module Main where

import UVMHS

import Symphony.Config
import Symphony.TypeChecker
import Symphony.TypeChecker.TLM
import Symphony.Interpreter
import Symphony.Interpreter.Types
import Symphony.Interpreter.Seq.Types
import Symphony.Interpreter.Dist.Types

import qualified Prelude as HS
import qualified Crypto.Random as R

symphonyMainExample ‚à∑ IO ()
symphonyMainExample = do
  os :* ts ‚Üê parseOptionsSymphony
  name ‚Üê case ts of
    Nil      ‚Üí failIO "ERROR: No file specified as target. Correct usage: symphony example [<arguments>] <name>"
    t :& Nil ‚Üí return t
    _ ‚Üí failIO "ERROR: Too many files specified as target. Correct usage: symphony example [<arguments>] <name>"
  let exampleRelativePath = "examples/" ‚ß∫ name ‚ß∫ ".sym"
  exampleDataFilePath ‚Üê datapath exampleRelativePath
  exampleLocalExists ‚Üê pexists exampleRelativePath
  exampleDataFileExists ‚Üê pexists exampleDataFilePath
  when (not exampleLocalExists ‚©ì exampleDataFileExists) $ do
    dtouch "examples"
    fcopy exampleDataFilePath exampleRelativePath
  pprint $ ppHorizontal
    [ ppHeader "INTERPRETING EXAMPLE:"
    , ppString name
    ]
  let Œ∏ = update iParamsIsExampleL True $ initializeEnv os
  tlsStd ‚Üê parseFile "lib:stdlib.sym" (optLibPath os ‚ß∫ "/stdlib.sym")
  tlsPrg ‚Üê parseFile (concat ["example:",name,".sym"]) exampleRelativePath
  pptraceM tlsPrg
  
  g ‚Üê case optRandomSeed os of
        None   ‚Üí R.drgNew
        Some n ‚Üí return $ R.drgNewSeed $ R.seedFromInteger $ HS.fromIntegral n
  let tls = tlsStd ‚ß∫ tlsPrg
 -- _œÑ ‚Üê evalTLMIO null null name $ synProg tls
 {-
  if isSome (iParamsMe Œ∏) then do
    let prog = do
          interpTLs tls
          interpMain
    v ‚Üê evalITLMIO @DistVal Œ∏ (œâtl‚ÇÄ g) name prog
    pprint $ ppHeader "RESULT"
    pprint v
  else do
    let prog = do
          interpTLs tls
          interpMain
    v ‚Üê evalITLMIO @SeqVal Œ∏ (œâtl‚ÇÄ g) name prog
    pprint $ ppHeader "RESULT"
    pprint v
-}
symphonyUsage ‚à∑ ùïä
symphonyUsage = "USAGE: symphony [options] file..."

symphonyInfo ‚à∑ ùïä
symphonyInfo =
  concat $ inbetween "\n"
  [ ""
  , "symphony is the interpreter for the Symphony language."
  , "Developed by UMD as an extension of the PSL language,"
  , "created by the PANTHEON team as part of the IARPA HECTOR project."
  , ""
  , symphonyUsage
  ]

symphonyMainInfo ‚à∑ IO ()
symphonyMainInfo = out symphonyInfo

symphonyMain ‚à∑ IO ()
symphonyMain = do
  map list iargs ‚â´= \case
    a :& as | a ‚â° "example" ‚Üí ilocalArgs as symphonyMainExample
    Nil             ‚Üí ilocalArgs (list ["--version", "--help"]) symphonyMainInfo
    as              ‚Üí ilocalArgs as symphonyMainInfo

main ‚à∑ IO ()
main = do
  initUVMHS
  symphonyMain
