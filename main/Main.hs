module Main where

import UVMHS

import Allyn.Config
import Allyn.TypeChecker
import Allyn.TypeChecker.Types
import Allyn.Interpreter
import Allyn.Interpreter.Types
import Allyn.Interpreter.Seq.Types
import Allyn.Interpreter.Dist.Types

import qualified Prelude as HS
import qualified Crypto.Random as R

allynMainExample ‚à∑ IO ()
allynMainExample = do
  os :* ts ‚Üê parseOptionsAllyn
  name ‚Üê case ts of
    Nil      ‚Üí failIO "ERROR: No file specified as target. Correct usage: allyn example [<arguments>] <name>"
    t :& Nil ‚Üí return t
    _ ‚Üí failIO "ERROR: Too many files specified as target. Correct usage: allyn example [<arguments>] <name>"
  let exampleRelativePath = "examples/" ‚ß∫ name ‚ß∫ ".all"
  exampleDataFilePath ‚Üê datapath exampleRelativePath
  exampleLocalExists ‚Üê pexists exampleRelativePath
  exampleDataFileExists ‚Üê pexists exampleDataFilePath
  when (not exampleLocalExists ‚©ì exampleDataFileExists) $ do
    dtouch "examples"
    fcopy exampleDataFilePath exampleRelativePath
  pprint $ ppHorizontal
    [ ppHeader "INTERPRETING EXAMPLE:"
    , ppString name
    ]
  let Œ∏ = update iParamsIsExampleL True $ initializeEnv os
  tlsStd ‚Üê parseFile "lib:stdlib.all" (optLibPath os ‚ß∫ "/stdlib.all")
  tlsPrg ‚Üê parseFile (concat ["example:",name,".all"]) exampleRelativePath
  g ‚Üê case optRandomSeed os of
        None   ‚Üí R.drgNew
        Some n ‚Üí return $ R.drgNewSeed $ R.seedFromInteger $ HS.fromIntegral n
  let tls = tlsStd ‚ß∫ tlsPrg
--  runTMIO null name $ wellTyped tls
  if isSome (iParamsMe Œ∏) then do
    let prog = do
          interpTLs tls
          interpMain
    v ‚Üê evalITLMIO @DistVal Œ∏ (œâtl‚ÇÄ g) name prog
    pprint $ ppHeader "RESULT"
    pprint v
  else do
    let prog = do
          interpTLs tls
          interpMain
    v ‚Üê evalITLMIO @SeqVal Œ∏ (œâtl‚ÇÄ g) name prog
    pprint $ ppHeader "RESULT"
    pprint v

allynUsage ‚à∑ ùïä
allynUsage = "USAGE: allyn [options] file..."

allynInfo ‚à∑ ùïä
allynInfo =
  concat $ inbetween "\n"
  [ ""
  , "allyn is the interpreter for the Allyn language."
  , "Developed by UMD as an extension of the PSL language,"
  , "created by the PANTHEON team as part of the IARPA HECTOR project."
  , ""
  , allynUsage
  ]

allynMainInfo ‚à∑ IO ()
allynMainInfo = out allynInfo

allynMain ‚à∑ IO ()
allynMain = do
  map list iargs ‚â´= \case
    a :& as | a ‚â° "example" ‚Üí ilocalArgs as allynMainExample
    Nil             ‚Üí ilocalArgs (list ["--version", "--help"]) allynMainInfo
    as              ‚Üí ilocalArgs as allynMainInfo

main ‚à∑ IO ()
main = do
  initUVMHS
  allynMain
