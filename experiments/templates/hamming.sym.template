principal A B

def hammingDist bs0 bs1 =
  let len = size bs0 in
  let hammingDistRec = fun [hammingDistRec] i distance →
    if i == len then
      distance
    else
      let inc = mux if bs0.i == bs1.i then 0n else 1n in
      hammingDistRec (i + 1n) (distance + inc)
  in hammingDistRec 0n 0n

def main () = par {A,B}
  let inputA = par {A} read (array ℕ) from "hamming-{{input-size}}.txt" in
  let inputB = par {B} read (array ℕ) from "hamming-{{input-size}}.txt" in

  let shareA = share [{{protocol}}, array ℕ : {A} → {A,B}] inputA in
  let shareB = share [{{protocol}}, array ℕ : {B} → {A,B}] inputB in

  reveal [{{protocol}}, ℕ : {A,B} → {A}] (hammingDist shareA shareB)