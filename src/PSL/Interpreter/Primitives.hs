module PSL.Interpreter.Primitives where

import UVMHS

import PSL.Interpreter.Types
import PSL.Interpreter.Pretty ()
import PSL.Interpreter.Truncating
import PSL.Syntax
import PSL.Interpreter.Json ()

primType ‚à∑ (STACK) ‚áí Op ‚Üí ùêø Type ‚Üí IM Type
primType op œÑs = case (op, tohs œÑs) of
  (OrO, [ùîπT, ùîπT]) ‚Üí return ùîπT
  (PlusO, [‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚ÑïT pr‚ÇÅ
  (PlusO, [‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚ÑïT pr‚ÇÅ
  (ExpO, [ùîΩT pr‚ÇÅ, ùîΩT pr‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ùîΩT pr‚ÇÅ
  _ ‚Üí throwIErrorCxt NotImplementedIError "primType" $ frhs
    [ ("op", pretty op)
    , ("œÑs", pretty œÑs)
    ]

interpPrim ‚à∑ (STACK) ‚áí Op ‚Üí ùêø Val ‚Üí IM Val
interpPrim o vs = case (o,tohs vs) of
  (OrO, [BoolV b‚ÇÅ, BoolV b‚ÇÇ]) ‚Üí return $ BoolV    $ b‚ÇÅ ‚©î b‚ÇÇ
  (PlusO, [NatV pr‚ÇÅ n‚ÇÅ, NatV pr‚ÇÇ n‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ trPrNat pr‚ÇÅ $ n‚ÇÅ + n‚ÇÇ
  (PlusO, [IntV pr‚ÇÅ i‚ÇÅ, IntV pr‚ÇÇ i‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ trPrInt pr‚ÇÅ $ i‚ÇÅ + i‚ÇÇ
  (ExpO, [FltV pr‚ÇÅ f‚ÇÅ, FltV pr‚ÇÇ f‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ FltV pr‚ÇÅ $ f‚ÇÅ ^ f‚ÇÇ
  _ ‚Üí throwIErrorCxt NotImplementedIError "interpPrim" $ frhs
    [ ("o",pretty o)
    , ("vs",pretty vs)
    ]
{-  (AndO    ,[BoolMV b‚ÇÅ  ,BoolMV b‚ÇÇ  ])               ‚Üí return $ BoolMV   $ b‚ÇÅ ‚©ì b‚ÇÇ
  (NotO    ,[BoolMV b])                              ‚Üí return $ BoolMV   $ not b
  (PlusO   ,[BoolMV b‚ÇÅ  ,BoolMV b‚ÇÇ  ])               ‚Üí return $ BoolMV   $ b‚ÇÅ ‚©î b‚ÇÇ
  (PlusO   ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ n‚ÇÅ + n‚ÇÇ
  (PlusO   ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ i‚ÇÅ + i‚ÇÇ
  (PlusO   ,[IntMV p‚ÇÅ (IntEMPSh i‚ÇÅ),IntMV p‚ÇÇ (IntEMPSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí io (EMP.integerAdd i‚ÇÅ i‚ÇÇ) >>= \ result ‚Üí  return $ IntMV p‚ÇÅ $ IntEMPSh result
  (PlusO   ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltMV p‚ÇÅ $ f‚ÇÅ + f‚ÇÇ
  (PlusO   ,[PrinMV œÅ‚ÇÅ  ,PrinMV œÅ‚ÇÇ  ])               ‚Üí return $ PrinMV   $ œÅ‚ÇÅ ‚äî œÅ‚ÇÇ
  (MinusO  ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ buPrNat p‚ÇÅ n‚ÇÅ - n‚ÇÇ
  (MinusO  ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ i‚ÇÅ - i‚ÇÇ
  (MinusO  ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltMV p‚ÇÅ $ f‚ÇÅ - f‚ÇÇ
  (TimesO  ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ n‚ÇÅ √ó n‚ÇÇ
  (TimesO  ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ i‚ÇÅ √ó i‚ÇÇ
  (TimesO  ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltMV p‚ÇÅ $ f‚ÇÅ √ó f‚ÇÇ
  (ExpO    ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ n‚ÇÅ ^^ n‚ÇÇ
  (ExpO    ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ i‚ÇÅ ^^ n‚ÇÇ
  (ExpO    ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltMV p‚ÇÅ $ f‚ÇÅ ^ f‚ÇÇ
  (DivO    ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ if n‚ÇÇ ‚â° 0     then n‚ÇÅ else n‚ÇÅ ‚åø n‚ÇÇ
  (DivO    ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ ‚åø i‚ÇÇ
  (DivO    ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltMV p‚ÇÅ $              if f‚ÇÇ ‚â° 0.0   then f‚ÇÅ else f‚ÇÅ / f‚ÇÇ
  (ModO    ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ if n‚ÇÇ ‚â° 0     then n‚ÇÅ else n‚ÇÅ √∑ n‚ÇÇ
  (ModO    ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ √∑ i‚ÇÇ
  (EqO     ,[BoolMV b‚ÇÅ  ,BoolMV b‚ÇÇ  ])               ‚Üí return $ BoolMV   $ b‚ÇÅ ‚â° b‚ÇÇ
  (EqO     ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ n‚ÇÅ ‚â° n‚ÇÇ
  (EqO     ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ i‚ÇÅ ‚â° i‚ÇÇ
  (EqO     ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ f‚ÇÅ ‚â° f‚ÇÇ
  (EqO     ,[PrinMV œÅev‚ÇÅ,PrinMV œÅev‚ÇÇ])               ‚Üí return $ BoolMV   $ œÅev‚ÇÅ ‚â° œÅev‚ÇÇ
  (LTO     ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ n‚ÇÅ < n‚ÇÇ
  (LTO     ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ i‚ÇÅ < i‚ÇÇ
  (LTO     ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ f‚ÇÅ < f‚ÇÇ
  (GTO     ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ n‚ÇÅ > n‚ÇÇ
  (GTO     ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ i‚ÇÅ > i‚ÇÇ
  (GTO     ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ f‚ÇÅ > f‚ÇÇ
  (LTEO    ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ n‚ÇÅ ‚â§ n‚ÇÇ
  (LTEO    ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ i‚ÇÅ ‚â§ i‚ÇÇ
  (LTEO    ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ f‚ÇÅ ‚â§ f‚ÇÇ
  (GTEO    ,[NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ n‚ÇÅ ‚â• n‚ÇÇ
  (GTEO    ,[IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ i‚ÇÅ ‚â• i‚ÇÇ
  (GTEO    ,[FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolMV   $ f‚ÇÅ ‚â• f‚ÇÇ
  (CondO   ,[BoolMV b,BoolMV b‚ÇÅ  ,BoolMV b‚ÇÇ  ])      ‚Üí return $ BoolMV   $ if b then b‚ÇÅ else b‚ÇÇ
  (CondO   ,[BoolMV b,NatMV p‚ÇÅ n‚ÇÅ,NatMV p‚ÇÇ n‚ÇÇ])|p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatMV p‚ÇÅ $ if b then n‚ÇÅ else n‚ÇÇ
  (CondO   ,[BoolMV b,IntMV p‚ÇÅ (IntSeqSh i‚ÇÅ),IntMV p‚ÇÇ (IntSeqSh i‚ÇÇ)])|p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ if b then i‚ÇÅ else i‚ÇÇ
  (CondO   ,[BoolMV b,FltMV p‚ÇÅ f‚ÇÅ,FltMV p‚ÇÇ f‚ÇÇ])|p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltMV p‚ÇÅ $ if b then f‚ÇÅ else f‚ÇÇ
  (CondO   ,[BoolMV b,PrinMV p‚ÇÅ  ,PrinMV p‚ÇÇ  ])      ‚Üí return $ PrinMV   $ if b then p‚ÇÅ else p‚ÇÇ
  (AbsO    ,[IntMV p (IntSeqSh i)])                             ‚Üí return $ NatMV p  $ zabs i
  (LogO    ,[FltMV p f])                             ‚Üí return $ FltMV p  $ logBase 2.0 f
  (SqrtO   ,[FltMV p f])                             ‚Üí return $ FltMV p  $ root f
  (NatO p‚ÇÅ ,[NatMV _ n])                            ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ n
  (NatO p‚ÇÅ ,[IntMV _ (IntSeqSh i)])                            ‚Üí return $ NatMV p‚ÇÅ $ trPrNat p‚ÇÅ $ natŒ© i
  (IntO p‚ÇÅ ,[IntMV _ (IntSeqSh i)])                            ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ i
  (IntO p‚ÇÅ ,[NatMV _ n])                            ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ trPrInt p‚ÇÅ $ int n
  (FltO p‚ÇÅ ,[NatMV _ n])                            ‚Üí return $ FltMV p‚ÇÅ $ dbl n
  (FltO p‚ÇÅ ,[IntMV _ (IntSeqSh i)])                            ‚Üí return $ FltMV p‚ÇÅ $ dbl i
  (FltO p‚ÇÅ ,[FltMV _ d])                            ‚Üí return $ FltMV p‚ÇÅ $ d
  (CeilO p‚ÇÅ,[FltMV _ f])                            ‚Üí return $ IntMV p‚ÇÅ $ IntSeqSh $ ceiling f
  _ ‚Üí throwIErrorCxt NotImplementedIError "interpPrim" $ frhs
    [ ("o",pretty o)
    , ("vs",pretty vs)
    ]

opName ‚à∑ Op ‚Üí ùïä
opName = \case
  OrO ‚Üí "OR"
  AndO ‚Üí "AND"
  NotO ‚Üí "NOT"
  PlusO ‚Üí "PLUS"
  MinusO ‚Üí "MINUS"
  TimesO ‚Üí "TIMES"
  ExpO ‚Üí "EXP"
  DivO ‚Üí "DIV"
  ModO  ‚Üí "MOD"
  EqO ‚Üí "EQ"
  LTO ‚Üí "LT"
  GTO ‚Üí "GT"
  LTEO ‚Üí "LTE"
  GTEO ‚Üí "GTE"
  CondO ‚Üí "COND"
  AbsO ‚Üí "ABS"
  SqrtO ‚Üí "SQRT"
  LogO ‚Üí "LOG‚ÇÇ"
  NatO _p ‚Üí "NAT"
  IntO _p ‚Üí "INT"
  FltO _p ‚Üí "FLT"
  CeilO _p ‚Üí "CEIL"


multDepth ‚à∑ Prot ‚Üí Op ‚Üí ‚Ñï
multDepth p o = case (p, o) of
  (_, TimesO) ‚Üí 1
  (_, GTO) -> 1
  (_, LTO) -> 1
  (_, EqO) -> 1
  (_, GTEO) -> 1
  (_, LTEO) -> 1
  _ ‚Üí 0 -- To be updated

multDepthShareInfo ‚à∑ Op ‚Üí ShareInfo ‚Üí ‚Ñï
multDepthShareInfo op = \case
  NotShared ‚Üí zero
  Shared œÜ _ ‚Üí multDepth œÜ op
-}
