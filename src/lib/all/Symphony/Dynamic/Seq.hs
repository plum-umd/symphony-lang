module Symphony.Dynamic.Seq where

import Symphony.Prelude

import Symphony.Config
import Symphony.Lang.Syntax
import Symphony.Lang.Parser

import Symphony.Dynamic.Seq.ReadType
import Symphony.Dynamic.Seq.Types
import Symphony.Dynamic.Seq.Seq.Types
import Symphony.Dynamic.Seq.Seq.Val
import Symphony.Dynamic.Seq.Operations
import Symphony.Dynamic.Seq.BaseVal
import Symphony.Dynamic.Seq.Lens
import Symphony.Dynamic.Seq.Error

import qualified Prelude as HS
import qualified Crypto.Random as R
import qualified Data.ByteString.Lazy as BSL
import qualified Data.Binary as B
import GHC.RTS.Flags (RTSFlags(profilingFlags))

--import Foreign.ForeignPtr

-----------------------------
--- Principal Expressions ---
-----------------------------

interpPrinExp ‚à∑ (STACK) ‚áí PrinExp ‚Üí IM SeqVal PrinVal
interpPrinExp = \case
  VarPE x       ‚Üí elimPrin *$ elimClear *$ elimBase *$ elimVal *$ interpVar x
  AccessPE x n‚ÇÅ ‚Üí do
    œÅ :* n‚ÇÇ ‚Üê elimPrinArr *$ elimPrinSet *$ elimClear *$ elimBase *$ elimVal *$ interpVar x
    guardErr (0 ‚â§ n‚ÇÅ ‚©ì n‚ÇÅ < n‚ÇÇ) $
      throwIErrorCxt TypeIError "interpPrinExp: n‚ÇÅ ‚àâ œÅ[n‚ÇÇ]" $ frhs
      [ ("n‚ÇÅ", pretty n‚ÇÅ)
      , ("œÅ", pretty œÅ)
      , ("n‚ÇÇ", pretty n‚ÇÇ)
      ]
    return $ AccessPV œÅ n‚ÇÅ

interpPrinSetExp ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí IM SeqVal PrinSetVal
interpPrinSetExp = \case
  VarPSE x   ‚Üí elimPrinSet *$ elimClear *$ elimBase *$ elimVal *$ interpVar x
  PowPSE œÅes ‚Üí PowPSV ^$ pow ^$ mapM interpPrinExp œÅes
  ThisPSE    ‚Üí do
    m   ‚Üê askL iCxtModeL
    œÅvs ‚Üê errorùëÇ (view addTopL m) $
          throwIErrorCxt TypeIError "interpPrinSetExp (ThisPSE): m ‚â° ‚ä§" emptyùêø
    return $ PowPSV œÅvs

-----------------
--- Variables ---
-----------------

interpVar ‚à∑ (STACK) ‚áí Var ‚Üí IM SeqVal SeqVal
interpVar x = do
  Œ≥ ‚Üê askL iCxtEnvL
  case Œ≥ ‚ãï? x of
    Some v ‚Üí locateVal v
    None   ‚Üí throwIErrorCxt SyntaxIError "interpVar: x ‚àâ dom(Œ≥)" $ frhs
             [ ("x", pretty x)
             , ("dom(Œ≥)", pretty $ keys Œ≥)
             ]

------------------
--- Primitives ---
------------------

interpBul ‚à∑ (STACK) ‚áí IM SeqVal SeqVal
interpBul = introVal $ BaseV $ Clear BulV

interpBool ‚à∑ (STACK) ‚áí ùîπ ‚Üí IM SeqVal SeqVal
interpBool b = introVal $ BaseV $ Clear $ BoolV b

interpNat ‚à∑ (STACK) ‚áí IPrecision ‚Üí ‚Ñï ‚Üí IM SeqVal SeqVal
interpNat pr n = introVal $ BaseV $ Clear $ NatV pr n

interpInt ‚à∑ (STACK) ‚áí IPrecision ‚Üí ‚Ñ§ ‚Üí IM SeqVal SeqVal
interpInt pr z = introVal $ BaseV $ Clear $ IntV pr z

interpFlt ‚à∑ (STACK) ‚áí FPrecision ‚Üí ùîª ‚Üí IM SeqVal SeqVal
interpFlt pr d = introVal $ BaseV $ Clear $ FltV pr d

interpStr ‚à∑ (STACK) ‚áí ùïä ‚Üí IM SeqVal SeqVal
interpStr s = introVal $ BaseV $ Clear $ StrV s

interpPrin ‚à∑ (STACK) ‚áí PrinExp ‚Üí IM SeqVal SeqVal
interpPrin œÅe =
  let c = interpPrinExp œÅe
  in do
    œÅv ‚Üê c
    introVal $ BaseV $ Clear $ PrinV œÅv

interpPrinSet ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí IM SeqVal SeqVal
interpPrinSet œÅse =
  let c = interpPrinSetExp œÅse
  in do
    œÅsv ‚Üê c
    introVal $ BaseV $ Clear $ PrinSetV œÅsv

interpPrim ‚à∑ (STACK) ‚áí Op ‚Üí ùêø Exp ‚Üí IM SeqVal SeqVal
interpPrim op es =
  let cs = map interpExp es
  in do
    primVal op *$ exchange cs

---------------------------------
--- Products, Sums, and Lists ---
---------------------------------

interpProd ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpProd e‚Çó e·µ£ =
  let c‚Çó = interpExp e‚Çó
      c·µ£ = interpExp e·µ£
  in do
    vÃÉ‚Çó ‚Üê c‚Çó
    vÃÉ·µ£ ‚Üê c·µ£
    introVal $ ProdV vÃÉ‚Çó vÃÉ·µ£

interpL ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpL e‚Çó =
  let c‚Çó = interpExp e‚Çó
  in do
    bv‚Çú ‚Üê introClear $ BoolV True
    vÃÉ‚Çó  ‚Üê c‚Çó
    vÃÉ·µ£  ‚Üê interpDefault
    introVal $ SumV bv‚Çú vÃÉ‚Çó vÃÉ·µ£

interpR ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpR e·µ£ =
  let c·µ£ = interpExp e·µ£
  in do
    bv‚Çú ‚Üê introClear $ BoolV False
    vÃÉ‚Çó  ‚Üê interpDefault
    vÃÉ·µ£  ‚Üê c·µ£
    introVal $ SumV bv‚Çú vÃÉ‚Çó vÃÉ·µ£

interpNil ‚à∑ (STACK) ‚áí IM SeqVal SeqVal
interpNil = introVal $ ListV Nil

interpCons ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpCons e‚Çï e‚Çú =
  let c‚Çï = interpExp e‚Çï
      c‚Çú = interpExp e‚Çú
  in do
    vÃÉ  ‚Üê c‚Çï
    vÃÉs ‚Üê elimList *$ elimVal *‚ãÖ c‚Çú
    introVal $ ListV $ vÃÉ :& vÃÉs

interpIf ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpIf e‚ÇÅ e‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    b ‚Üê elimBool *$ elimClear *$ elimBase *$ elimVal *‚ãÖ c‚ÇÅ
    if b then c‚ÇÇ else c‚ÇÉ

interpCase ‚à∑ (STACK) ‚áí Exp ‚Üí ùêø (Pat ‚àß Exp) ‚Üí IM SeqVal SeqVal
interpCase e œàes =
  let c  = interpExp e
      fs = mapOn œàes $ \ (œà :* e') ‚Üí
        let c' = interpExp e'
        in \ vÃÉ ‚Üí do
          f ‚Üê matchVal vÃÉ œà
          return $ f :* c'
  in do
    vÃÉ ‚Üê c
    fcùëÇ ‚Üê unFailT $ tries $ map (\ f ‚Üí f vÃÉ) fs
    f :* c‚Çò ‚Üê errorùëÇ fcùëÇ $
              throwIErrorCxt TypeIError "interpCase: vÃÉ doesn't match any of œàes" $ frhs
              [ ("vÃÉ", pretty vÃÉ)
              , ("œàes", pretty œàes)
              ]
    f c‚Çò

-----------------
--- Functions ---
-----------------

interpLet ‚à∑ (STACK) ‚áí Pat ‚Üí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpLet œà e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    vÃÉ‚ÇÅ ‚Üê c‚ÇÅ
    f  ‚Üê bindVal vÃÉ‚ÇÅ œà
    f c‚ÇÇ

interpLam ‚à∑ (STACK) ‚áí ùëÇ Var ‚Üí ùêø Pat ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpLam selfùëÇ œàs e = do
  œà :* œàs' ‚Üê errorùëÇ (view consL œàs) $
             throwIErrorCxt TypeIError "interpLam: view consL œàs ‚â° None" $ frhs
             [ ("œàs", pretty œàs)
             ]
  let e' = if œàs' ‚â° Nil
           then e
           else siphon e $ LamE None œàs' e
  Œ≥ ‚Üê askL iCxtEnvL
  let c' = interpExp e'
  introVal $ CloV selfùëÇ $ NoEq $ \ selfŒ≥ vÃÉ ‚Üí do
    œàŒ≥ ‚Üê bindVal vÃÉ œà
    compose [localL iCxtEnvL Œ≥, œàŒ≥, selfŒ≥] c'

evalApp ‚à∑ (STACK) ‚áí SeqVal ‚Üí SeqVal ‚Üí IM SeqVal SeqVal
evalApp vÃÉ‚ÇÅ vÃÉ‚ÇÇ = do
  selfùëÇ :* f‚ÇÅ ‚Üê elimClo *$ elimVal vÃÉ‚ÇÅ
  let selfŒ≥ = case selfùëÇ of
                None      ‚Üí id
                Some self ‚Üí bindTo self vÃÉ‚ÇÅ
  f‚ÇÅ selfŒ≥ vÃÉ‚ÇÇ

interpApp ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpApp e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  vÃÉ‚ÇÅ ‚Üê c‚ÇÅ
  vÃÉ‚ÇÇ ‚Üê c‚ÇÇ
  evalApp vÃÉ‚ÇÅ vÃÉ‚ÇÇ

----------------------
--- Read and Write ---
----------------------

interpRead ‚à∑ (STACK) ‚áí Type ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpRead œÑ e =
  let c = interpExp e
  in do
    fn ‚Üê elimStr *$ elimClear *$ elimBase *$ elimVal *‚ãÖ c
    œÅ  ‚Üê singletonMode
    path ‚Üê inputPath œÅ fn
    deserializeVal œÑ *$ io $ fread path

interpWrite ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpWrite e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    fn   ‚Üê elimStr *$ elimClear *$ elimBase *$ elimVal *‚ãÖ c‚ÇÇ
    œÅ    ‚Üê singletonMode
    path ‚Üê outputPath œÅ fn
    s    ‚Üê serializeVal *‚ãÖ c‚ÇÅ
    io $ fwrite path s
    interpBul

-------------
--- Trace ---
-------------

interpTrace ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpTrace e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    pptraceM *‚ãÖ c‚ÇÅ
    c‚ÇÇ

------------------
--- References ---
------------------

interpRef ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpRef e =
  let c‚ÇÅ = interpExp e
  in do
  vÃÉ ‚Üê c‚ÇÅ
  r ‚Üê io $ new‚ÑùMut vÃÉ
  introVal *$ introLoc (Inl r)

interpRefRead ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpRefRead e =
  let c‚ÇÅ = interpExp e
  in do
  r ‚Üê elimRef *$ elimLocRead *$ elimVal *‚ãÖ c‚ÇÅ
  vÃÉ·µ£ ‚Üê io $ read‚ÑùMut r
  locateVal vÃÉ·µ£

interpRefWrite ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpRefWrite e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  r ‚Üê elimRef *$ elimLocWrite *$ elimVal *‚ãÖ c‚ÇÅ
  vÃÉ‚ÇÇ ‚Üê c‚ÇÇ
  io $ write‚ÑùMut r vÃÉ‚ÇÇ
  return vÃÉ‚ÇÇ

--------------
--- Arrays ---
--------------

interpArray ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpArray e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  _pr :* n ‚Üê elimNat *$ elimClear *$ elimBase *$ elimVal *‚ãÖ c‚ÇÅ
  vÃÉ‚ÇÇ ‚Üê c‚ÇÇ
  a  ‚Üê io $ vecIMut $ replicate n vÃÉ‚ÇÇ
  introVal *$ introLoc (Inr a)

interpArrayRead ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpArrayRead e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  a  ‚Üê elimArr *$ elimLocRead *$ elimVal *‚ãÖ c‚ÇÅ
  _pr :* n ‚Üê elimNat *$ elimClear *$ elimBase *$ elimVal *‚ãÖ c‚ÇÇ
  vÃÉ·µ£ ‚Üê errorIO (idxùïçMut (natŒ©64 n) a) $
    throwIErrorCxt TypeIError "interpArrayRead: a[n] out of bounds" $ frhs
    [ ("a", pretty a)
    , ("n", pretty n)
    ]
  locateVal vÃÉ·µ£

interpArrayWrite ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpArrayWrite e‚ÇÅ e‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
  a  ‚Üê elimArr *$ elimLocWrite *$ elimVal *‚ãÖ c‚ÇÅ
  _pr :* n ‚Üê elimNat *$ elimClear *$ elimBase *$ elimVal *‚ãÖ c‚ÇÇ
  vÃÉ‚ÇÉ ‚Üê c‚ÇÉ
  errorIO (setùïçMut (natŒ©64 n) vÃÉ‚ÇÉ a) $
      throwIErrorCxt TypeIError "interpArrayWrite: a[n] out of bounds" $ frhs
      [ ("a", pretty a)
      , ("n", pretty n)
      ]
  return vÃÉ‚ÇÉ

interpArraySize ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpArraySize e = do
  a ‚Üê elimArr *$ elimLocRead *$ elimVal *$ interpExp e
  interpNat iprDefault $ nat $ lengthùïçMut a

-----------
--- Par ---
-----------

interpPar ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpPar œÅse‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    m  ‚Üê askL iCxtModeL
    œÅùëÉ ‚Üê elimPSV ^$ c‚ÇÅ
    let l = AddTop œÅùëÉ
    let m' = m ‚äì l
    isInPrins ‚Üê inPrins œÅùëÉ
    if m' ‚â¢ bot ‚©ì isInPrins then
      localL iCxtModeL m' c‚ÇÇ
    else
      return unknownVal


-----------
--- Rand --
-----------

randBaseVal ‚à∑ (R.DRG g) ‚áí g ‚Üí BaseType ‚Üí ClearBaseVal ‚àß g
randBaseVal g Œº = case Œº of
  UnitT ‚Üí BulV :* g
  ùîπT    ‚Üí mapFst BoolV $ frhs $ R.withRandomBytes g (HS.fromIntegral 1) (even ‚àò (B.decode @‚Ñï8) ‚àò BSL.fromStrict)
  ‚ÑïT pr ‚Üí case pr of
            FixedIPr wPr dPr | wPr + dPr ‚â° 8  ‚Üí mapFst ((NatV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 1) ((B.decode @‚Ñï8) ‚àò BSL.fromStrict)
            FixedIPr wPr dPr | wPr + dPr ‚â° 16 ‚Üí mapFst ((NatV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 2) ((B.decode @‚Ñï16) ‚àò BSL.fromStrict)
            FixedIPr wPr dPr | wPr + dPr ‚â° 32 ‚Üí mapFst ((NatV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 4) ((B.decode @‚Ñï32) ‚àò BSL.fromStrict)
            FixedIPr wPr dPr | wPr + dPr ‚â° 64 ‚Üí mapFst ((NatV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 8) ((B.decode @‚Ñï64) ‚àò BSL.fromStrict)
            _ ‚Üí undefined -- TODO
  ‚Ñ§T pr ‚Üí case pr of
            FixedIPr wPr dPr | wPr + dPr ‚â° 8  ‚Üí mapFst ((IntV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 1) ((B.decode @‚Ñ§8) ‚àò BSL.fromStrict)
            FixedIPr wPr dPr | wPr + dPr ‚â° 16 ‚Üí mapFst ((IntV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 2) ((B.decode @‚Ñ§16) ‚àò BSL.fromStrict)
            FixedIPr wPr dPr | wPr + dPr ‚â° 32 ‚Üí mapFst ((IntV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 4) ((B.decode @‚Ñ§32) ‚àò BSL.fromStrict)
            FixedIPr wPr dPr | wPr + dPr ‚â° 64 ‚Üí mapFst ((IntV pr) ‚àò HS.fromIntegral) $ frhs $ R.withRandomBytes g (HS.fromIntegral 8) ((B.decode @‚Ñ§64) ‚àò BSL.fromStrict)
            _ ‚Üí undefined -- TODO
  _     ‚Üí undefined -- TODO

interpRand ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí BaseType ‚Üí IM SeqVal SeqVal
interpRand œÅse Œº = do
  m  ‚Üê askL iCxtModeL
  m' ‚Üê AddTop ^$ elimPSV ^$ interpPrinSetExp œÅse
  guardErr (m ‚â° m') $
    throwIErrorCxt TypeIError "interpRand: m ‚â¢ m'" $ frhs
    [ ("m", pretty m)
    , ("m'", pretty m')
    ]
  g ‚Üê getL iStateGenL
  let v :* g' = randBaseVal g Œº
  putL iStateGenL g'
  introVal $ BaseV $ Clear v

-------------------------------
--- Share, Reveal, and Send ---
-------------------------------

modeCheckComm ‚à∑ ùëÉ PrinVal ‚Üí ùëÉ PrinVal ‚Üí IM v ()
modeCheckComm œÅvs‚ÇÅ œÅvs‚ÇÇ = do
  m ‚Üê askL iCxtModeL
  let nonEmpty   = not (isEmpty œÅvs‚ÇÅ) ‚©ì not (isEmpty œÅvs‚ÇÇ)
  let allPresent = (AddTop $ œÅvs‚ÇÅ ‚à™ œÅvs‚ÇÇ) ‚â° m
  guardErr nonEmpty $
    throwIErrorCxt TypeIError "modeCheckComm: œÅvs‚ÇÅ ‚â° √∏ ‚à® œÅvs‚ÇÇ ‚â° √∏" $ frhs
    [ ("œÅvs‚ÇÅ", pretty œÅvs‚ÇÅ)
    , ("œÅvs‚ÇÇ", pretty œÅvs‚ÇÇ)
    ]
  guardErr allPresent $
    throwIErrorCxt TypeIError "modeCheckComm: (AddTop $ œÅvs‚ÇÅ ‚à™ œÅvs‚ÇÇ) ‚â¢ m" $ frhs
    [ ("œÅvs‚ÇÅ", pretty œÅvs‚ÇÅ)
    , ("œÅvs‚ÇÇ", pretty œÅvs‚ÇÇ)
    , ("m", pretty m)
    ]

interpShare ‚à∑ (STACK) ‚áí Prot ‚Üí Type ‚Üí PrinSetExp ‚Üí PrinSetExp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpShare œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpPrinSetExp œÅse‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    œÅvsFr ‚Üê elimPSV ^$ c‚ÇÅ
    œÅvsTo ‚Üê elimPSV ^$ c‚ÇÇ
    vÃÉ     ‚Üê c‚ÇÉ
    modeCheckComm œÅvsFr œÅvsTo
    shareValSeq œÜ œÅvsFr œÅvsTo vÃÉ œÑ

interpReveal ‚à∑ (STACK) ‚áí Prot ‚Üí Type ‚Üí PrinSetExp ‚Üí PrinSetExp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpReveal œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpPrinSetExp œÅse‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    œÅvsFr ‚Üê elimPSV ^$ c‚ÇÅ
    œÅvsTo ‚Üê elimPSV ^$ c‚ÇÇ
    vÃÉ     ‚Üê c‚ÇÉ
    modeCheckComm œÅvsTo œÅvsFr
    revealValSeq œÜ œÅvsFr œÅvsTo vÃÉ œÑ

interpComm ‚à∑ (STACK) ‚áí Type ‚Üí PrinSetExp ‚Üí PrinSetExp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpComm œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpPrinSetExp œÅse‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    œÅvsFr ‚Üê elimPSV ^$ c‚ÇÅ
    œÅvsTo ‚Üê elimPSV ^$ c‚ÇÇ
    vÃÉ     ‚Üê c‚ÇÉ
    modeCheckComm œÅvsFr œÅvsTo
    commValSeq œÅvsFr œÅvsTo vÃÉ œÑ

----------------------
--- MPC Operations ---
----------------------

interpMuxIf ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpMuxIf e‚ÇÅ e‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    vÃÉ‚ÇÅ    ‚Üê c‚ÇÅ
    negvÃÉ‚ÇÅ ‚Üê primVal NotO $ vÃÉ‚ÇÅ :& Nil
    vÃÉ‚ÇÇ    ‚Üê mapEnvL iCxtMPCPathConditionL (vÃÉ‚ÇÅ :&)    c‚ÇÇ
    vÃÉ‚ÇÉ    ‚Üê mapEnvL iCxtMPCPathConditionL (negvÃÉ‚ÇÅ :&) c‚ÇÉ
    muxVal vÃÉ‚ÇÅ vÃÉ‚ÇÇ vÃÉ‚ÇÉ

interpMuxCase ‚à∑ (STACK) ‚áí Exp ‚Üí ùêø (Pat ‚àß Exp) ‚Üí IM SeqVal SeqVal
interpMuxCase e œàes =
  let c  = interpExp e
      fs = mapOn œàes $ \ (œà :* e') ‚Üí
        let c' = interpExp e'
        in \ vÃÉ ‚Üí do
          fùëÇ ‚Üê unFailT $ matchVal vÃÉ œà
          case fùëÇ of
            None   ‚Üí return Nil
            Some f ‚Üí single ^$ f c'
  in do
    vÃÉ ‚Üê c
    vÃÉs ‚Üê concat ^$ mapMOn fs $ \ f ‚Üí f vÃÉ
    vÃÉ‚Çï :* vÃÉs‚Çú ‚Üê errorùëÇ (view consL vÃÉs) $
                throwIErrorCxt TypeIError "interpMuxCase: vÃÉ doesn't match any of œàes" $ frhs
                [ ("vÃÉ", pretty vÃÉ)
                , ("œàes", pretty œàes)
                ]
    mfold vÃÉ‚Çï sumVal vÃÉs‚Çú

interpProc ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpProc e =
  let c = interpExp e
  in do
    Œ∫ :* v‚ÇÄ ‚Üê
      localizeL iStateMPCContL null $
      localL iCxtMPCPathConditionL null $
      c
    mfoldrOnFrom (reverse Œ∫) v‚ÇÄ $ \ (pc·¥ø :* v‚ÇÅ) v‚ÇÇ ‚Üí mfoldrOnFrom pc·¥ø v‚ÇÅ $ \ v·µñ·∂ú acc ‚Üí muxVal v·µñ·∂ú acc v‚ÇÇ

interpReturn ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpReturn e =
  let c = interpExp e
  in do
    vÃÉ ‚Üê c
    pc ‚Üê askL iCxtMPCPathConditionL
    modifyL iStateMPCContL $ \ Œ∫ ‚Üí (pc :* vÃÉ) :& Œ∫
    interpDefault

---------------
--- Bundles ---
---------------

interpBundle ‚à∑ (STACK) ‚áí ùêø (PrinExp ‚àß Exp) ‚Üí IM SeqVal SeqVal
interpBundle œÅeeùêø =
  let ccùêø = map (mapPair interpPrinExp interpExp) œÅeeùêø
  in
  introVal *$ BundleV ^$ dict ^$ mapMOn (iter ccùêø) $ \ (c‚ÇÅ :* c‚ÇÇ) ‚Üí do
    œÅ ‚Üê c‚ÇÅ
    vÃÉ ‚Üê c‚ÇÇ
    return $ œÅ ‚Ü¶ vÃÉ

interpBundleAccess ‚à∑ (STACK) ‚áí Exp ‚Üí PrinExp ‚Üí IM SeqVal SeqVal
interpBundleAccess e‚ÇÅ œÅe‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpPrinExp œÅe‚ÇÇ
  in do
    bdl ‚Üê elimBundle *$ elimVal *‚ãÖ c‚ÇÅ
    œÅ   ‚Üê c‚ÇÇ
    errorùëÇ (view justL $ bdl ‚ãï? œÅ) $
      throwIErrorCxt TypeIError "interpBundleAccess: œÅ ‚àâ dom(bdl)" $ frhs
      [ ("œÅ", pretty œÅ)
      , ("dom(bdl)", pretty $ keys bdl)
      ]

interpBundleUnion ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpBundleUnion e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    bdl‚ÇÅ ‚Üê elimBundle *$ elimVal *‚ãÖ c‚ÇÅ
    bdl‚ÇÇ ‚Üê elimBundle *$ elimVal *‚ãÖ c‚ÇÇ
    introVal $ BundleV $ bdl‚ÇÅ ‚©å bdl‚ÇÇ

------------------
--- Sequencing ---
------------------

interpSeq ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM SeqVal SeqVal
interpSeq e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    _ ‚Üê c‚ÇÅ
    c‚ÇÇ

---------------
--- Default ---
---------------

interpDefault ‚à∑ (STACK) ‚áí IM SeqVal SeqVal
interpDefault = introVal DefaultV

-------------------
--- Expressions ---
-------------------

--wrapInterp ‚à∑ (STACK) ‚áí (ExpR ‚Üí IM v a) ‚Üí Exp ‚Üí IM v a
--wrapInterp f e = localL iCxtSourceL (Some $ atag e) $ f $ extract e

interpExp ‚à∑ (STACK) ‚áí Exp ‚Üí IM SeqVal SeqVal
interpExp e = localL iCxtSourceL (Some $ atag e) $ interpExpR $ extract e

interpExpR ‚à∑ (STACK) ‚áí ExpR ‚Üí IM SeqVal SeqVal
interpExpR = \case
  -- Variables
  VarE x ‚Üí interpVar x

  -- Literals
  BulE        ‚Üí interpBul
  BoolE b     ‚Üí interpBool b
  NatE pr n   ‚Üí interpNat pr n
  IntE pr z   ‚Üí interpInt pr z
  FltE pr d   ‚Üí interpFlt pr d
  StrE s      ‚Üí interpStr s
  PrinSetE es ‚Üí interpPrinSet es
  PrimE op es ‚Üí interpPrim op es

  -- Sums, Products, and Lists
  ProdE e‚Çó e·µ£  ‚Üí interpProd e‚Çó e·µ£
  LE e‚Çó        ‚Üí interpL e‚Çó
  RE e·µ£        ‚Üí interpR e·µ£
  NilE         ‚Üí interpNil
  ConsE e‚Çï e‚Çú  ‚Üí interpCons e‚Çï e‚Çú
  IfE e‚ÇÅ e‚ÇÇ e‚ÇÉ ‚Üí interpIf e‚ÇÅ e‚ÇÇ e‚ÇÉ
  CaseE e œàes  ‚Üí interpCase e œàes

  -- Functions
  LetE œà e‚ÇÅ e‚ÇÇ    ‚Üí interpLet œà e‚ÇÅ e‚ÇÇ
  LamE selfùëÇ œàs e ‚Üí interpLam selfùëÇ œàs e
  AppE e‚ÇÅ e‚ÇÇ      ‚Üí interpApp e‚ÇÅ e‚ÇÇ


  -- Read and Write
  ReadE œÑ e    ‚Üí interpRead œÑ e
  WriteE e‚ÇÅ e‚ÇÇ ‚Üí interpWrite e‚ÇÅ e‚ÇÇ

  -- Trace
  TraceE e‚ÇÅ e‚ÇÇ ‚Üí interpTrace e‚ÇÅ e‚ÇÇ

  -- References
  RefE e          ‚Üí interpRef e
  RefReadE e      ‚Üí interpRefRead e
  RefWriteE e‚ÇÅ e‚ÇÇ ‚Üí interpRefWrite e‚ÇÅ e‚ÇÇ

  -- Arrays
  ArrayE e‚ÇÅ e‚ÇÇ                                ‚Üí interpArray e‚ÇÅ e‚ÇÇ
  ArrayReadE e‚ÇÅ e‚ÇÇ                            ‚Üí interpArrayRead e‚ÇÅ e‚ÇÇ
  ArrayWriteE (extract ‚Üí ArrayReadE e‚ÇÅ e‚ÇÇ) e‚ÇÉ ‚Üí interpArrayWrite e‚ÇÅ e‚ÇÇ e‚ÇÉ
  ArraySizeE e                                ‚Üí interpArraySize e

  -- Par
  ParE œÅse‚ÇÅ e‚ÇÇ ‚Üí interpPar œÅse‚ÇÅ e‚ÇÇ

  -- Rand
  RandE œÅse Œº ‚Üí interpRand œÅse Œº

  -- Share, Reveal, and Send
  ShareE œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ  ‚Üí interpShare œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ
  RevealE œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ ‚Üí interpReveal œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ
  SendE œÑ œÅe‚ÇÅ œÅse‚ÇÇ e‚ÇÉ      ‚Üí interpComm œÑ œÅe‚ÇÅ œÅse‚ÇÇ e‚ÇÉ

  -- MPC Operations
  MuxIfE e‚ÇÅ e‚ÇÇ e‚ÇÉ ‚Üí interpMuxIf e‚ÇÅ e‚ÇÇ e‚ÇÉ
  MuxCaseE e œàes  ‚Üí interpMuxCase e œàes
  ProcE e         ‚Üí interpProc e
  ReturnE e       ‚Üí interpReturn e

  -- Bundles
  BundleE œÅees         ‚Üí interpBundle œÅees
  BundleAccessE e‚ÇÅ œÅe‚ÇÇ ‚Üí interpBundleAccess e‚ÇÅ œÅe‚ÇÇ
  BundleUnionE e‚ÇÅ e‚ÇÇ   ‚Üí interpBundleUnion e‚ÇÅ e‚ÇÇ

  -- Sequencing
  SeqE e‚ÇÅ e‚ÇÇ ‚Üí interpSeq e‚ÇÅ e‚ÇÇ

  -- Default
  DefaultE ‚Üí interpDefault

  -- TODO
  _ ‚Üí todoCxt

---------------
-- TOP LEVEL --
---------------

asTLM ‚à∑ IM SeqVal a ‚Üí ITLM SeqVal a
asTLM xM = mkITLM $ \ Œ∏ œâtl ‚Üí
  let Œ≥       = itlStateEnv œâtl
      œâ       = itlStateExp œâtl
      ds      = itlStatePrinScope œâtl
      Œæ       = compose
                [ update iCxtParamsL Œ∏
                , update iCxtEnvL Œ≥
                , update iCxtPrinScopeL ds
                ]
                Œæ‚ÇÄ
  in do
    rox ‚Üê runIM Œæ œâ xM
    return $ case rox of
      Inl r ‚Üí Inl r
      Inr (œâ' :* o :* x) ‚Üí
        let œâtl' = update itlStateExpL œâ' œâtl in
          Inr $ œâtl' :* o :* x

interpTL ‚à∑ TL ‚Üí ITLM SeqVal ()
interpTL tl = case extract tl of
  DeclTL _ _ _ ‚Üí skip
  DefnTL b x œàs e ‚Üí
    let e' =
          if b
          then buildUnfixedLambda (atag tl) x œàs e
          else buildLambda (atag tl) x œàs e
        c  = interpExp e'
    in do
      v ‚Üê asTLM c
      modifyL itlStateEnvL ((x ‚Ü¶ v) ‚©å)
  PrinTL œÅds ‚Üí do
    Œ≥œÅs :* œÅScope ‚Üê split ^$ mapMOn œÅds $ \case
      SinglePD œÅ ‚Üí do
        let œÅv = SinglePV œÅ
        vÃÉ ‚Üê asTLM $ introVal $ BaseV $ Clear $ PrinV œÅv
        return $ (var œÅ ‚Ü¶ vÃÉ) :* single œÅv
      ArrayPD œÅ n ‚Üí do
        let œÅsv = ArrPSV œÅ n
        vÃÉ ‚Üê asTLM $ introVal $ BaseV $ Clear $ PrinSetV œÅsv
        return $ (var œÅ ‚Ü¶ vÃÉ) :* elimPSV œÅsv
    modifyL itlStateEnvL ((dict Œ≥œÅs) ‚©å)
    modifyL itlStatePrinScopeL ((concat œÅScope) ‚à™)
  ImportTL path ‚Üí do
    s ‚Üê io $ fread path
    let ts = tokens s
    ls ‚Üê io $ tokenizeIO lexer path ts
    tls ‚Üê io $ parseIO cpTLs path ls
    interpTLs tls

interpTLs ‚à∑ ùêø TL ‚Üí ITLM SeqVal ()
interpTLs = eachWith interpTL

-- ==== --
-- MAIN --
-- ==== --

evalProgram ‚à∑ IParams ‚Üí ITLState SeqVal ‚Üí ùêø TL ‚Üí IO SeqVal
evalProgram Œ∏ œâ prog = do
  evalITLMIO Œ∏ œâ "" $ do
    interpTLs prog
    asTLM $ do
      main ‚Üê interpVar $ var "main"
      bul  ‚Üê introVal $ BaseV $ Clear BulV
      evalApp main bul
