module Symphony.Dynamic.Par.Primitives where

import Symphony.Prelude

import Symphony.Lang.Syntax

import Symphony.Dynamic.Par.Types
import Symphony.Dynamic.Par.Truncating
import Symphony.Dynamic.Par.Error

import Symphony.Dynamic.Par.GMW

primBaseVal ‚à∑ Op ‚Üí ùêø BaseVal ‚Üí IM Val BaseVal
primBaseVal op bvs = case (op, tohs bvs) of
  -- Booleans
  (NotO, [ BoolV (ClearBV b) ]) ‚Üí return $ BoolV $ ClearBV $ not b

  (AndO, [ BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ b‚ÇÅ ‚©ì b‚ÇÇ
  (OrO , [ BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ b‚ÇÅ ‚©î b‚ÇÇ
  (EqO , [ BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ b‚ÇÅ ‚â° b‚ÇÇ

  (AndO, [ BoolV (ClearBV b‚ÇÅ), BoolV (EncBV œÅvs‚ÇÇ (GmwB b‚ÇÇ)) ]) ‚Üí BoolV ^$ EncBV œÅvs‚ÇÇ ^$ GmwB ^$ do
    gmw ‚Üê getOrMkGmw œÅvs‚ÇÇ
    b‚ÇÅ  ‚Üê gmwBoolConstant gmw b‚ÇÅ
    gmwBoolAnd gmw b‚ÇÅ b‚ÇÇ

  (CondO, [ BoolV (ClearBV b), BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ if b then b‚ÇÅ else b‚ÇÇ

  -- Naturals
  (NatO pr‚ÇÅ, [ NatV _ (ClearNV n) ]) ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ n
  (IntO pr‚ÇÅ, [ NatV _ (ClearNV n) ]) ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ int n

  (PlusO , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ + n‚ÇÇ
  (MinusO, [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ buPrNat pr‚ÇÅ $ n‚ÇÅ - n‚ÇÇ
  (TimesO, [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ √ó n‚ÇÇ
  (ExpO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ ^^ n‚ÇÇ
  (DivO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ if n‚ÇÇ ‚â° 0 then n‚ÇÅ else n‚ÇÅ ‚åø n‚ÇÇ
  (ModO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ if n‚ÇÇ ‚â° 0 then n‚ÇÅ else n‚ÇÅ √∑ n‚ÇÇ
  (EqO   , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ ‚â° n‚ÇÇ
  (LTO   , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ < n‚ÇÇ
  (LTEO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ ‚â§ n‚ÇÇ
  (GTO   , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ > n‚ÇÇ
  (GTEO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ ‚â• n‚ÇÇ

  (CondO, [ BoolV (ClearBV b), NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ if b then n‚ÇÅ else n‚ÇÇ

  -- Integers
  (NatO pr‚ÇÅ, [ IntV _  (ClearZV i) ]) ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ natŒ© i
  (IntO pr‚ÇÅ, [ IntV _  (ClearZV i) ]) ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ i
  (AbsO    , [ IntV pr (ClearZV i) ]) ‚Üí return $ NatV pr  $ ClearNV $ zabs i

  (PlusO , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ + i‚ÇÇ
  (MinusO, [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ - i‚ÇÇ
  (TimesO, [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ √ó i‚ÇÇ
  (ExpO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ ^^ n‚ÇÇ
  (DivO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ ‚åø i‚ÇÇ
  (ModO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ √∑ i‚ÇÇ
  (EqO   , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ ‚â° i‚ÇÇ
  (LTO   , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ < i‚ÇÇ
  (LTEO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ ‚â§ i‚ÇÇ
  (GTO   , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ > i‚ÇÇ
  (GTEO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ ‚â• i‚ÇÇ

  (CondO, [ BoolV (ClearBV b), IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ if b then i‚ÇÅ else i‚ÇÇ

  -- Principals
  (EqO, [ PrinV œÅv‚ÇÅ, PrinV œÅv‚ÇÇ ]) ‚Üí return $ BoolV $ ClearBV $ œÅv‚ÇÅ ‚â° œÅv‚ÇÇ

  -- Principal Sets
  (PlusO, [ PrinSetV œÅvs‚ÇÅ, PrinSetV œÅvs‚ÇÇ ]) ‚Üí return $ PrinSetV $ PowPSV $ (elimPSV œÅvs‚ÇÅ) ‚à™ (elimPSV œÅvs‚ÇÇ)

  _ ‚Üí todoCxt
