module Symphony.Dynamic.Par.Primitives where

import Symphony.Prelude

import Symphony.Lang.Syntax

import Symphony.Dynamic.Par.Types
import Symphony.Dynamic.Par.Truncating
import Symphony.Dynamic.Par.Error

primType ‚à∑ (Monad m, MonadReader (ICxt v) m, MonadError IError m, STACK) ‚áí Op ‚Üí ùêø BaseType ‚Üí m BaseType
primType op œÑs = case (op, tohs œÑs) of
  (NotO,   [             ùîπT     ])             ‚Üí return ùîπT
  (AndO,   [     ùîπT,     ùîπT     ])             ‚Üí return ùîπT
  (PlusO,  [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚Ñ§T pr‚ÇÅ
  (PlusO,  [     ‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚ÑïT pr‚ÇÅ
  (MinusO, [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚Ñ§T pr‚ÇÅ
  (TimesO, [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚Ñ§T pr‚ÇÅ
  (DivO,   [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚Ñ§T pr‚ÇÅ
  (ModO,   [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚Ñ§T pr‚ÇÅ
  (EqO,    [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (LTO,    [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (LTEO,   [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (LTEO,   [     ‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (GTO,    [     ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (GTO,    [     ‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (PlusO,  [     ‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚ÑïT pr‚ÇÅ
  (EqO,    [     ‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return ùîπT
  (CondO,  [ ùîπT, ùîπT,     ùîπT     ])             ‚Üí return ùîπT
  (CondO,  [ ùîπT, ‚Ñ§T pr‚ÇÅ, ‚Ñ§T pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚Ñ§T pr‚ÇÅ
  (CondO,  [ ùîπT, ‚ÑïT pr‚ÇÅ, ‚ÑïT pr‚ÇÇ ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ ‚ÑïT pr‚ÇÅ
  _ ‚Üí throwIErrorCxt NotImplementedIError "bad" $ frhs [ ("op", pretty op), ("œÑs", pretty œÑs) ]

evalPrimClearBaseVal ‚à∑ (Monad m, MonadReader (ICxt v) m, MonadError IError m, STACK) ‚áí Op ‚Üí ùêø ClearBaseVal ‚Üí m ClearBaseVal
evalPrimClearBaseVal o vs = case (o,tohs vs) of
  (OrO     ,[BoolCV b‚ÇÅ, BoolCV b‚ÇÇ])                   ‚Üí return $ BoolCV    $ b‚ÇÅ ‚©î b‚ÇÇ
  (PlusO   ,[NatCV pr‚ÇÅ n‚ÇÅ, NatCV pr‚ÇÇ n‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatCV pr‚ÇÅ $ trPrNat pr‚ÇÅ $ n‚ÇÅ + n‚ÇÇ
  (PlusO   ,[IntCV pr‚ÇÅ i‚ÇÅ, IntCV pr‚ÇÇ i‚ÇÇ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntCV pr‚ÇÅ $ trPrInt pr‚ÇÅ $ i‚ÇÅ + i‚ÇÇ
  (AndO    ,[BoolCV b‚ÇÅ  ,BoolCV b‚ÇÇ  ])                ‚Üí return $ BoolCV   $ b‚ÇÅ ‚©ì b‚ÇÇ
  (NotO    ,[BoolCV b])                              ‚Üí return $ BoolCV   $ not b
  (PlusO   ,[BoolCV b‚ÇÅ  ,BoolCV b‚ÇÇ  ])                ‚Üí return $ BoolCV   $ b‚ÇÅ ‚©î b‚ÇÇ
  (PlusO   ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ n‚ÇÅ + n‚ÇÇ
  (PlusO   ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ i‚ÇÅ + i‚ÇÇ
  (PlusO   ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltCV p‚ÇÅ $ f‚ÇÅ + f‚ÇÇ
  (PlusO   ,[PrinSetCV œÅvs‚ÇÅ, PrinSetCV œÅvs‚ÇÇ])        ‚Üí return $ PrinSetCV $ PowPSV $ (elimPSV œÅvs‚ÇÅ) ‚à™ (elimPSV œÅvs‚ÇÇ)
  (MinusO  ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ buPrNat p‚ÇÅ n‚ÇÅ - n‚ÇÇ
  (MinusO  ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ i‚ÇÅ - i‚ÇÇ
  (MinusO  ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltCV p‚ÇÅ $ f‚ÇÅ - f‚ÇÇ
  (TimesO  ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ n‚ÇÅ √ó n‚ÇÇ
  (TimesO  ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ i‚ÇÅ √ó i‚ÇÇ
  (TimesO  ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltCV p‚ÇÅ $ f‚ÇÅ √ó f‚ÇÇ
  (ExpO    ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ n‚ÇÅ ^^ n‚ÇÇ
  (ExpO    ,[IntCV p‚ÇÅ i‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ i‚ÇÅ ^^ n‚ÇÇ
  (ExpO    ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltCV p‚ÇÅ $ f‚ÇÅ ^ f‚ÇÇ
  (DivO    ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ if n‚ÇÇ ‚â° 0     then n‚ÇÅ else n‚ÇÅ ‚åø n‚ÇÇ
  (DivO    ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ ‚åø i‚ÇÇ
  (DivO    ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltCV p‚ÇÅ $              if f‚ÇÇ ‚â° 0.0   then f‚ÇÅ else f‚ÇÅ / f‚ÇÇ
  (ModO    ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ if n‚ÇÇ ‚â° 0     then n‚ÇÅ else n‚ÇÅ √∑ n‚ÇÇ
  (ModO    ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ √∑ i‚ÇÇ
  (EqO     ,[BoolCV b‚ÇÅ  ,BoolCV b‚ÇÇ  ])               ‚Üí return $ BoolCV   $ b‚ÇÅ ‚â° b‚ÇÇ
  (EqO     ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ n‚ÇÅ ‚â° n‚ÇÇ
  (EqO     ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ i‚ÇÅ ‚â° i‚ÇÇ
  (EqO     ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ f‚ÇÅ ‚â° f‚ÇÇ
  (EqO     ,[PrinCV œÅev‚ÇÅ, PrinCV œÅev‚ÇÇ])              ‚Üí return $ BoolCV   $ œÅev‚ÇÅ ‚â° œÅev‚ÇÇ
  (LTO     ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ n‚ÇÅ < n‚ÇÇ
  (LTO     ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ i‚ÇÅ < i‚ÇÇ
  (LTO     ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ f‚ÇÅ < f‚ÇÇ
  (GTO     ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ n‚ÇÅ > n‚ÇÇ
  (GTO     ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ i‚ÇÅ > i‚ÇÇ
  (GTO     ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ f‚ÇÅ > f‚ÇÇ
  (LTEO    ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ n‚ÇÅ ‚â§ n‚ÇÇ
  (LTEO    ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ i‚ÇÅ ‚â§ i‚ÇÇ
  (LTEO    ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ f‚ÇÅ ‚â§ f‚ÇÇ
  (GTEO    ,[NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ n‚ÇÅ ‚â• n‚ÇÇ
  (GTEO    ,[IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ i‚ÇÅ ‚â• i‚ÇÇ
  (GTEO    ,[FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])         |p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ BoolCV   $ f‚ÇÅ ‚â• f‚ÇÇ
  (CondO   ,[BoolCV b,BoolCV b‚ÇÅ  ,BoolCV b‚ÇÇ  ])      ‚Üí return $ BoolCV   $ if b then b‚ÇÅ else b‚ÇÇ
  (CondO   ,[BoolCV b,NatCV p‚ÇÅ n‚ÇÅ,NatCV p‚ÇÇ n‚ÇÇ])|p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ NatCV p‚ÇÅ $ if b then n‚ÇÅ else n‚ÇÇ
  (CondO   ,[BoolCV b,IntCV p‚ÇÅ i‚ÇÅ,IntCV p‚ÇÇ i‚ÇÇ])|p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ IntCV p‚ÇÅ $ if b then i‚ÇÅ else i‚ÇÇ
  (CondO   ,[BoolCV b,FltCV p‚ÇÅ f‚ÇÅ,FltCV p‚ÇÇ f‚ÇÇ])|p‚ÇÅ‚â°p‚ÇÇ‚Üí return $ FltCV p‚ÇÅ $ if b then f‚ÇÅ else f‚ÇÇ
  (AbsO    ,[IntCV p i])                             ‚Üí return $ NatCV p  $ zabs i
  (LogO    ,[FltCV p f])                             ‚Üí return $ FltCV p  $ logBase 2.0 f
  (SqrtO   ,[FltCV p f])                             ‚Üí return $ FltCV p  $ root f
  (NatO p‚ÇÅ ,[NatCV _ n])                            ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ n
  (NatO p‚ÇÅ ,[IntCV _ i])                            ‚Üí return $ NatCV p‚ÇÅ $ trPrNat p‚ÇÅ $ natŒ© i
  (IntO p‚ÇÅ ,[IntCV _ i])                            ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ i
  (IntO p‚ÇÅ ,[NatCV _ n])                            ‚Üí return $ IntCV p‚ÇÅ $ trPrInt p‚ÇÅ $ int n
  (FltO p‚ÇÅ ,[NatCV _ n])                            ‚Üí return $ FltCV p‚ÇÅ $ dbl n
  (FltO p‚ÇÅ ,[IntCV _ i])                            ‚Üí return $ FltCV p‚ÇÅ $ dbl i
  (FltO p‚ÇÅ ,[FltCV _ d])                            ‚Üí return $ FltCV p‚ÇÅ $ d
  (CeilO p‚ÇÅ,[FltCV _ f])                            ‚Üí return $ IntCV p‚ÇÅ $ ceiling f
  _ ‚Üí throwIErrorCxt NotImplementedIError "interpPrim" $ frhs
    [ ("o",pretty o)
    , ("vs",pretty vs)
    ]
