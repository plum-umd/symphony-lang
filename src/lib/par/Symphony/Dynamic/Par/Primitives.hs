module Symphony.Dynamic.Par.Primitives where

import Symphony.Prelude

import Symphony.Lang.Syntax

import Symphony.Dynamic.Par.Types
import Symphony.Dynamic.Par.Truncating
import Symphony.Dynamic.Par.Error

import Symphony.Dynamic.Par.GMW

import qualified Data.Bits as BITS

metaBaseVal ‚à∑ BaseVal ‚Üí ùëÇ (Prot ‚àß ùëÉ PrinVal)
metaBaseVal bv = case bv of
  BoolV  (ClearBV _) ‚Üí None
  NatV _ (ClearNV _) ‚Üí None
  IntV _ (ClearZV _) ‚Üí None
  BoolV  (EncBV œÅvs (GmwB _)) ‚Üí Some $ GMWP :* œÅvs
  NatV _ (EncNV œÅvs (GmwN _)) ‚Üí Some $ GMWP :* œÅvs
  IntV _ (EncZV œÅvs (GmwZ _)) ‚Üí Some $ GMWP :* œÅvs
  _ ‚Üí None

metaComb ‚à∑ ùëÇ (Prot ‚àß ùëÉ PrinVal) ‚Üí ùëÇ (Prot ‚àß ùëÉ PrinVal) ‚Üí IM Val (ùëÇ (Prot ‚àß ùëÉ PrinVal))
metaComb meta1 meta2 = case (meta1, meta2) of
  (None   , None   ) ‚Üí return None
  (None   , _      ) ‚Üí return meta2
  (_      , None   ) ‚Üí return meta1
  (Some m‚ÇÅ, Some m‚ÇÇ) ‚Üí do
    guardErr (m‚ÇÅ ‚â° m‚ÇÇ) $
      throwIErrorCxt TypeIError "metaComb: m‚ÇÅ ‚â¢ m‚ÇÇ" $ frhs
      [ ("m‚ÇÅ", pretty m‚ÇÅ)
      , ("m‚ÇÇ", pretty m‚ÇÇ)
      ]
    return meta1

metaBaseVals ‚à∑ ùêø BaseVal ‚Üí IM Val (ùëÇ (Prot ‚àß ùëÉ PrinVal))
metaBaseVals bvs = mfold None metaComb $ map metaBaseVal bvs

embedBaseVal ‚à∑ ùëÇ (Prot ‚àß ùëÉ PrinVal) ‚Üí BaseVal ‚Üí IM Val BaseVal
embedBaseVal meta bv = case meta of
  None            ‚Üí return bv
  Some (œÜ :* œÅvs) ‚Üí case œÜ of
    GMWP ‚Üí do
      gmw ‚Üê getOrMkGmw œÅvs
      case bv of
        BoolV   (ClearBV b) ‚Üí BoolV   ^$ EncBV œÅvs ^$ GmwB ^$ gmwBoolConstant gmw b
        NatV pr (ClearNV n) ‚Üí NatV pr ^$ EncNV œÅvs ^$ GmwN ^$ gmwNatConstant gmw pr n
        IntV pr (ClearZV z) ‚Üí IntV pr ^$ EncZV œÅvs ^$ GmwZ ^$ gmwIntConstant gmw pr z
        _                   ‚Üí return bv

embedBaseVals ‚à∑ ùêø BaseVal ‚Üí IM Val (ùêø BaseVal)
embedBaseVals bvs = do
  meta ‚Üê metaBaseVals bvs
  mapM (embedBaseVal meta) bvs

primBaseVal ‚à∑ Op ‚Üí ùêø BaseVal ‚Üí IM Val BaseVal
primBaseVal op bvs = do
  bvs ‚Üê embedBaseVals bvs
  case (op, tohs bvs) of
    -- Unit

    (CondO, [ BoolV _, BulV, BulV ]) ‚Üí return BulV

    -- Booleans
    (NotO, [ BoolV (ClearBV b) ]) ‚Üí return $ BoolV $ ClearBV $ not b

    (AndO, [ BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ b‚ÇÅ ‚©ì b‚ÇÇ
    (OrO , [ BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ b‚ÇÅ ‚©î b‚ÇÇ
    (EqO , [ BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ b‚ÇÅ ‚â° b‚ÇÇ

    (CondO, [ BoolV (ClearBV b), BoolV (ClearBV b‚ÇÅ), BoolV (ClearBV b‚ÇÇ) ]) ‚Üí return $ BoolV $ ClearBV $ if b then b‚ÇÅ else b‚ÇÇ

    (OrO, [ BoolV (EncBV œÅvs (GmwB b‚ÇÅ)), BoolV (EncBV _ (GmwB b‚ÇÇ)) ]) ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwBoolOr gmw b‚ÇÅ b‚ÇÇ }

    (CondO, [ BoolV (EncBV œÅvs (GmwB b‚ÇÅ)), BoolV (EncBV _ (GmwB b‚ÇÇ)), BoolV (EncBV _ (GmwB b‚ÇÉ)) ]) ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwBoolMux gmw b‚ÇÅ b‚ÇÇ b‚ÇÉ }

    -- Naturals
    (NatO pr‚ÇÅ, [ NatV _ (ClearNV n) ]) ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ n
    (IntO pr‚ÇÅ, [ NatV _ (ClearNV n) ]) ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ int n
    (BoolO   , [ NatV _ (ClearNV n) ]) ‚Üí return $ BoolV    $ ClearBV $ n ‚â¢ 0

    (XorO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ `BITS.xor` n‚ÇÇ
    (PlusO , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ + n‚ÇÇ
    (MinusO, [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ buPrNat pr‚ÇÅ $ n‚ÇÅ - n‚ÇÇ
    (TimesO, [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ √ó n‚ÇÇ
    (ExpO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ n‚ÇÅ ^^ n‚ÇÇ
    (DivO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ if n‚ÇÇ ‚â° 0 then n‚ÇÅ else n‚ÇÅ ‚åø n‚ÇÇ
    (ModO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ if n‚ÇÇ ‚â° 0 then n‚ÇÅ else n‚ÇÅ √∑ n‚ÇÇ
    (EqO   , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ ‚â° n‚ÇÇ
    (LTO   , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ < n‚ÇÇ
    (LTEO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ ‚â§ n‚ÇÇ
    (GTO   , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ > n‚ÇÇ
    (GTEO  , [ NatV pr‚ÇÅ (ClearNV n‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ n‚ÇÅ ‚â• n‚ÇÇ

    (CondO, [ BoolV (ClearBV b)         , NatV pr‚ÇÅ (ClearNV n‚ÇÅ)       , NatV pr‚ÇÇ (ClearNV n‚ÇÇ)        ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ if b then n‚ÇÅ else n‚ÇÇ

    (PlusO , [ NatV pr‚ÇÅ (EncNV œÅvs (GmwN n‚ÇÅ)), NatV pr‚ÇÇ (EncNV _ (GmwN n‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí NatV pr‚ÇÅ ^$ EncNV œÅvs ^$ GmwN ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwNatAdd gmw n‚ÇÅ n‚ÇÇ }
    (TimesO, [ NatV pr‚ÇÅ (EncNV œÅvs (GmwN n‚ÇÅ)), NatV pr‚ÇÇ (EncNV _ (GmwN n‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí NatV pr‚ÇÅ ^$ EncNV œÅvs ^$ GmwN ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwNatMul gmw n‚ÇÅ n‚ÇÇ }


    (EqO   , [ NatV pr‚ÇÅ (EncNV œÅvs (GmwN n‚ÇÅ)), NatV pr‚ÇÇ (EncNV _ (GmwN n‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwNatEq gmw n‚ÇÅ n‚ÇÇ }
    (LTEO  , [ NatV pr‚ÇÅ (EncNV œÅvs (GmwN n‚ÇÅ)), NatV pr‚ÇÇ (EncNV _ (GmwN n‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwNatLte gmw n‚ÇÅ n‚ÇÇ }

    (CondO, [ BoolV (EncBV œÅvs (GmwB b)), NatV pr‚ÇÅ (EncNV _ (GmwN n‚ÇÅ)), NatV pr‚ÇÇ (EncNV _ (GmwN n‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí
      NatV pr‚ÇÅ ^$ EncNV œÅvs ^$ GmwN ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwNatMux gmw b n‚ÇÅ n‚ÇÇ }

    -- Integers
    (NatO pr‚ÇÅ, [ IntV _  (ClearZV i) ]) ‚Üí return $ NatV pr‚ÇÅ $ ClearNV $ trPrNat pr‚ÇÅ $ natŒ© i
    (IntO pr‚ÇÅ, [ IntV _  (ClearZV i) ]) ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ i
    (AbsO    , [ IntV pr (ClearZV i) ]) ‚Üí return $ NatV pr  $ ClearNV $ zabs i

    (PlusO , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ + i‚ÇÇ
    (MinusO, [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ - i‚ÇÇ
    (TimesO, [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ √ó i‚ÇÇ
    (ExpO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), NatV pr‚ÇÇ (ClearNV n‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ i‚ÇÅ ^^ n‚ÇÇ
    (DivO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ ‚åø i‚ÇÇ
    (ModO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ trPrInt pr‚ÇÅ $ if i‚ÇÇ ‚â° int 0 then i‚ÇÅ else i‚ÇÅ √∑ i‚ÇÇ
    (EqO   , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ ‚â° i‚ÇÇ
    (LTO   , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ < i‚ÇÇ
    (LTEO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ ‚â§ i‚ÇÇ
    (GTO   , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ > i‚ÇÇ
    (GTEO  , [ IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ BoolV    $ ClearBV $ i‚ÇÅ ‚â• i‚ÇÇ

    (CondO, [ BoolV (ClearBV b), IntV pr‚ÇÅ (ClearZV i‚ÇÅ), IntV pr‚ÇÇ (ClearZV i‚ÇÇ) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí return $ IntV pr‚ÇÅ $ ClearZV $ if b then i‚ÇÅ else i‚ÇÇ

    (PlusO , [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí IntV pr‚ÇÅ ^$ EncZV œÅvs ^$ GmwZ ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntAdd gmw z‚ÇÅ z‚ÇÇ }
    (MinusO, [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí IntV pr‚ÇÅ ^$ EncZV œÅvs ^$ GmwZ ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntSub gmw z‚ÇÅ z‚ÇÇ }
    (TimesO, [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí IntV pr‚ÇÅ ^$ EncZV œÅvs ^$ GmwZ ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntMul gmw z‚ÇÅ z‚ÇÇ }
    (DivO  , [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí IntV pr‚ÇÅ ^$ EncZV œÅvs ^$ GmwZ ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntDiv gmw z‚ÇÅ z‚ÇÇ }
    (ModO  , [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí IntV pr‚ÇÅ ^$ EncZV œÅvs ^$ GmwZ ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntMod gmw z‚ÇÅ z‚ÇÇ }

    (EqO , [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntEq gmw z‚ÇÅ z‚ÇÇ }
    (LTO , [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntLt gmw z‚ÇÅ z‚ÇÇ }
    (LTEO, [ IntV pr‚ÇÅ (EncZV œÅvs (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí BoolV ^$ EncBV œÅvs ^$ GmwB ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntLte gmw z‚ÇÅ z‚ÇÇ }

    (CondO, [ BoolV (EncBV œÅvs (GmwB b)), IntV pr‚ÇÅ (EncZV _ (GmwZ z‚ÇÅ)), IntV pr‚ÇÇ (EncZV _ (GmwZ z‚ÇÇ)) ]) | pr‚ÇÅ ‚â° pr‚ÇÇ ‚Üí
      IntV pr‚ÇÅ ^$ EncZV œÅvs ^$ GmwZ ^$ do { gmw ‚Üê getOrMkGmw œÅvs ; gmwIntMux gmw b z‚ÇÅ z‚ÇÇ }

    -- Principals
    (EqO, [ PrinV œÅv‚ÇÅ, PrinV œÅv‚ÇÇ ]) ‚Üí return $ BoolV $ ClearBV $ œÅv‚ÇÅ ‚â° œÅv‚ÇÇ

    -- Principal Sets
    (PlusO, [ PrinSetV œÅvs‚ÇÅ, PrinSetV œÅvs‚ÇÇ ]) ‚Üí return $ PrinSetV $ PowPSV $ (elimPSV œÅvs‚ÇÅ) ‚à™ (elimPSV œÅvs‚ÇÇ)

    _ ‚Üí do
      pptraceM (op, bvs)
      todoCxt
