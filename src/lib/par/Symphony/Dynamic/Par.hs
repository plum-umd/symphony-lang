module Symphony.Dynamic.Par ( module Symphony.Dynamic.Par ) where

import Symphony.Prelude

import Symphony.Config
import Symphony.Lang.Syntax
import Symphony.Lang.Parser

import Symphony.Dynamic.Par.ReadType
import Symphony.Dynamic.Par.Types as Symphony.Dynamic.Par
import Symphony.Dynamic.Par.Operations
import Symphony.Dynamic.Par.Dist
import Symphony.Dynamic.Par.Error
import Symphony.Dynamic.Par.Prg

import qualified Prelude as HS
import qualified System.Console.GetOpt as O
import qualified Crypto.Random as R
import qualified Data.ByteString.Lazy as BSL
import qualified Data.Binary as B

import Foreign.ForeignPtr

-----------------------------
--- Principal Expressions ---
-----------------------------

interpPrinExp ‚à∑ (STACK) ‚áí PrinExp ‚Üí IM Val PrinVal
interpPrinExp = \case
  VarPE x       ‚Üí elimPrin *$ elimClear *$ elimBase *$ elimKnown *$ interpVar x
  AccessPE x n‚ÇÅ ‚Üí do
    œÅ :* n‚ÇÇ ‚Üê elimPrinArr *$ elimPrinSet *$ elimClear *$ elimBase *$ elimKnown *$ interpVar x
    guardErr (0 ‚â§ n‚ÇÅ ‚©ì n‚ÇÅ < n‚ÇÇ) $
      throwIErrorCxt TypeIError "interpPrinExp: n‚ÇÅ ‚àâ œÅ[n‚ÇÇ]" $ frhs
      [ ("n‚ÇÅ", pretty n‚ÇÅ)
      , ("œÅ", pretty œÅ)
      , ("n‚ÇÇ", pretty n‚ÇÇ)
      ]
    return $ AccessPV œÅ n‚ÇÅ

interpPrinSetExp ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí IM Val PrinSetVal
interpPrinSetExp = \case
  VarPSE x   ‚Üí elimPrinSet *$ elimClear *$ elimBase *$ elimKnown *$ interpVar x
  PowPSE œÅes ‚Üí PowPSV ^$ pow ^$ mapM interpPrinExp œÅes
  ThisPSE    ‚Üí do
    m   ‚Üê askL iCxtModeL
    œÅvs ‚Üê errorùëÇ (view addTopL m) $
          throwIErrorCxt TypeIError "interpPrinSetExp (ThisPSE): m ‚â° ‚ä§" emptyùêø
    return $ PowPSV œÅvs

-----------------
--- Variables ---
-----------------

interpVar ‚à∑ (STACK) ‚áí Var ‚Üí IM Val Val
interpVar x = do
  Œ≥ ‚Üê askL iCxtEnvL
  case Œ≥ ‚ãï? x of
    Some v ‚Üí return v
    None   ‚Üí throwIErrorCxt SyntaxIError "interpVar: x ‚àâ dom(Œ≥)" $ frhs
             [ ("x", pretty x)
             , ("dom(Œ≥)", pretty $ keys Œ≥)
             ]

------------------
--- Primitives ---
------------------

interpBul ‚à∑ (STACK) ‚áí IM Val Val
interpBul = return $ KnownV $ BaseV $ ClearV BulCV

interpBool ‚à∑ (STACK) ‚áí ùîπ ‚Üí IM Val Val
interpBool b = return $ KnownV $ BaseV $ ClearV $ BoolCV b

interpNat ‚à∑ (STACK) ‚áí IPrecision ‚Üí ‚Ñï ‚Üí IM Val Val
interpNat pr n = return $ KnownV $ BaseV $ ClearV $ NatCV pr n

interpInt ‚à∑ (STACK) ‚áí IPrecision ‚Üí ‚Ñ§ ‚Üí IM Val Val
interpInt pr z = return $ KnownV $ BaseV $ ClearV $ IntCV pr z

interpFlt ‚à∑ (STACK) ‚áí FPrecision ‚Üí ùîª ‚Üí IM Val Val
interpFlt pr d = return $ KnownV $ BaseV $ ClearV $ FltCV pr d

interpStr ‚à∑ (STACK) ‚áí ùïä ‚Üí IM Val Val
interpStr s = return $ KnownV $ BaseV $ ClearV $ StrCV s

interpPrin ‚à∑ (STACK) ‚áí PrinExp ‚Üí IM Val Val
interpPrin œÅe =
  let c = interpPrinExp œÅe
  in do
    œÅv ‚Üê c
    return $ KnownV $ BaseV $ ClearV $ PrinCV œÅv

interpPrinSet ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí IM Val Val
interpPrinSet œÅse =
  let c = interpPrinSetExp œÅse
  in do
    œÅsv ‚Üê c
    return $ KnownV $ BaseV $ ClearV $ PrinSetCV œÅsv

interpPrim ‚à∑ (STACK) ‚áí Op ‚Üí ùêø Exp ‚Üí IM Val Val
interpPrim op es =
  let cs = map interpExp es
  in do
    primVal op *$ exchange cs

---------------------------------
--- Products, Sums, and Lists ---
---------------------------------

interpProd ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpProd e‚Çó e·µ£ =
  let c‚Çó = interpExp e‚Çó
      c·µ£ = interpExp e·µ£
  in do
    vÃÉ‚Çó ‚Üê c‚Çó
    vÃÉ·µ£ ‚Üê c·µ£
    return $ KnownV $ ProdV vÃÉ‚Çó vÃÉ·µ£

interpL ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpL e‚Çó =
  let c‚Çó = interpExp e‚Çó
  in do
    bv‚Çú ‚Üê return $ ClearV $ BoolCV True
    vÃÉ‚Çó  ‚Üê c‚Çó
    vÃÉ·µ£  ‚Üê interpDefault
    return $ KnownV $ SumV bv‚Çú vÃÉ‚Çó vÃÉ·µ£

interpR ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpR e·µ£ =
  let c·µ£ = interpExp e·µ£
  in do
    bv‚Çú ‚Üê return $ ClearV $ BoolCV False
    vÃÉ‚Çó  ‚Üê interpDefault
    vÃÉ·µ£  ‚Üê c·µ£
    return $ KnownV $ SumV bv‚Çú vÃÉ‚Çó vÃÉ·µ£

interpNil ‚à∑ (STACK) ‚áí IM Val Val
interpNil = return $ KnownV $ ListV Nil

interpCons ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpCons e‚Çï e‚Çú =
  let c‚Çï = interpExp e‚Çï
      c‚Çú = interpExp e‚Çú
  in do
    vÃÉ  ‚Üê c‚Çï
    vÃÉs ‚Üê elimList *$ elimKnown *‚ãÖ c‚Çú
    return $ KnownV $ ListV $ vÃÉ :& vÃÉs

interpIf ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí Exp ‚Üí IM Val Val
interpIf e‚ÇÅ e‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    b ‚Üê elimBool *$ elimClear *$ elimBase *$ elimKnown *‚ãÖ c‚ÇÅ
    if b then c‚ÇÇ else c‚ÇÉ

interpCase ‚à∑ (STACK) ‚áí Exp ‚Üí ùêø (Pat ‚àß Exp) ‚Üí IM Val Val
interpCase e œàes =
  let c  = interpExp e
      fs = mapOn œàes $ \ (œà :* e') ‚Üí
        let c' = interpExp e'
        in \ vÃÉ ‚Üí do
          f ‚Üê matchVal vÃÉ œà
          return $ f :* c'
  in do
    vÃÉ ‚Üê c
    fcùëÇ ‚Üê unFailT $ tries $ map (\ f ‚Üí f vÃÉ) fs
    f :* c‚Çò ‚Üê errorùëÇ fcùëÇ $
              throwIErrorCxt TypeIError "interpCase: vÃÉ doesn't match any of œàes" $ frhs
              [ ("vÃÉ", pretty vÃÉ)
              , ("œàes", pretty œàes)
              ]
    f c‚Çò

-----------------
--- Functions ---
-----------------

interpLet ‚à∑ (STACK) ‚áí Pat ‚Üí Exp ‚Üí Exp ‚Üí IM Val Val
interpLet œà e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    vÃÉ‚ÇÅ ‚Üê c‚ÇÅ
    f  ‚Üê bindVal vÃÉ‚ÇÅ œà
    f c‚ÇÇ

interpLam ‚à∑ (STACK) ‚áí ùëÇ Var ‚Üí ùêø Pat ‚Üí Exp ‚Üí IM Val Val
interpLam selfùëÇ œàs e = do
  œà :* œàs' ‚Üê errorùëÇ (view consL œàs) $
             throwIErrorCxt TypeIError "interpLam: view consL œàs ‚â° None" $ frhs
             [ ("œàs", pretty œàs)
             ]
  let e' = if œàs' ‚â° Nil
           then e
           else siphon e $ LamE None œàs' e
  Œ≥ ‚Üê askL iCxtEnvL
  let c' = interpExp e'
  return $ KnownV $ CloV selfùëÇ $ NoEq $ \ selfŒ≥ vÃÉ ‚Üí do
    œàŒ≥ ‚Üê bindVal vÃÉ œà
    compose [localL iCxtEnvL Œ≥, œàŒ≥, selfŒ≥] c'

evalApp ‚à∑ (STACK) ‚áí Val ‚Üí Val ‚Üí IM Val Val
evalApp vÃÉ‚ÇÅ vÃÉ‚ÇÇ = do
  selfùëÇ :* f‚ÇÅ ‚Üê elimClo *$ elimKnown vÃÉ‚ÇÅ
  let selfŒ≥ = case selfùëÇ of
                None      ‚Üí id
                Some self ‚Üí bindTo self vÃÉ‚ÇÅ
  f‚ÇÅ selfŒ≥ vÃÉ‚ÇÇ

interpApp ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpApp e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  vÃÉ‚ÇÅ ‚Üê c‚ÇÅ
  vÃÉ‚ÇÇ ‚Üê c‚ÇÇ
  evalApp vÃÉ‚ÇÅ vÃÉ‚ÇÇ

----------------------
--- Read and Write ---
----------------------

interpRead ‚à∑ (STACK) ‚áí Type ‚Üí Exp ‚Üí IM Val Val
interpRead œÑ e =
  let c = interpExp e
  in do
    fn ‚Üê elimStr *$ elimClear *$ elimBase *$ elimKnown *‚ãÖ c
    œÅ  ‚Üê singletonMode
    path ‚Üê inputPath œÅ fn
    deserializeVal œÑ *$ io $ fread path

interpWrite ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpWrite e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    fn   ‚Üê elimStr *$ elimClear *$ elimBase *$ elimKnown *‚ãÖ c‚ÇÇ
    œÅ    ‚Üê singletonMode
    path ‚Üê outputPath œÅ fn
    s    ‚Üê serializeVal *‚ãÖ c‚ÇÅ
    io $ fwrite path s
    interpBul

-------------
--- Trace ---
-------------

interpTrace ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpTrace e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    pptraceM *‚ãÖ c‚ÇÅ
    c‚ÇÇ

------------------
--- References ---
------------------

interpRef ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpRef e =
  let c‚ÇÅ = interpExp e
  in do
  vÃÉ ‚Üê c‚ÇÅ
  r ‚Üê io $ new‚ÑùMut vÃÉ
  KnownV ^$ introLoc (Inl r)

interpRefRead ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpRefRead e =
  let c‚ÇÅ = interpExp e
  in do
  r ‚Üê elimRef *$ elimLocRead *$ elimKnown *‚ãÖ c‚ÇÅ
  vÃÉ·µ£ ‚Üê io $ read‚ÑùMut r
  return vÃÉ·µ£

interpRefWrite ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpRefWrite e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  r ‚Üê elimRef *$ elimLocWrite *$ elimKnown *‚ãÖ c‚ÇÅ
  vÃÉ‚ÇÇ ‚Üê c‚ÇÇ
  io $ write‚ÑùMut r vÃÉ‚ÇÇ
  return vÃÉ‚ÇÇ

--------------
--- Arrays ---
--------------

interpArray ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpArray e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  _pr :* n ‚Üê elimNat *$ elimClear *$ elimBase *$ elimKnown *‚ãÖ c‚ÇÅ
  vÃÉ‚ÇÇ ‚Üê c‚ÇÇ
  a  ‚Üê io $ vecIMut $ replicate n vÃÉ‚ÇÇ
  KnownV ^$ introLoc (Inr a)

interpArrayRead ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpArrayRead e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
  a  ‚Üê elimArr *$ elimLocRead *$ elimKnown *‚ãÖ c‚ÇÅ
  _pr :* n ‚Üê elimNat *$ elimClear *$ elimBase *$ elimKnown *‚ãÖ c‚ÇÇ
  vÃÉ·µ£ ‚Üê errorIO (idxùïçMut (natŒ©64 n) a) $
    throwIErrorCxt TypeIError "interpArrayRead: a[n] out of bounds" $ frhs
    [ ("a", pretty a)
    , ("n", pretty n)
    ]
  return vÃÉ·µ£

interpArrayWrite ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí Exp ‚Üí IM Val Val
interpArrayWrite e‚ÇÅ e‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
  a  ‚Üê elimArr *$ elimLocWrite *$ elimKnown *‚ãÖ c‚ÇÅ
  _pr :* n ‚Üê elimNat *$ elimClear *$ elimBase *$ elimKnown *‚ãÖ c‚ÇÇ
  vÃÉ‚ÇÉ ‚Üê c‚ÇÉ
  errorIO (setùïçMut (natŒ©64 n) vÃÉ‚ÇÉ a) $
      throwIErrorCxt TypeIError "interpArrayWrite: a[n] out of bounds" $ frhs
      [ ("a", pretty a)
      , ("n", pretty n)
      ]
  return vÃÉ‚ÇÉ

interpArraySize ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpArraySize e = do
  a ‚Üê elimArr *$ elimLocRead *$ elimKnown *$ interpExp e
  interpNat iprDefault $ nat $ lengthùïçMut a

-----------
--- Par ---
-----------

interpPar ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí Exp ‚Üí IM Val Val
interpPar œÅse‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    m  ‚Üê askL iCxtModeL
    œÅùëÉ ‚Üê elimPSV ^$ c‚ÇÅ
    let l = AddTop œÅùëÉ
    let m' = m ‚äì l
    isInPrins ‚Üê inPrinsDist œÅùëÉ
    if m' ‚â¢ bot ‚©ì isInPrins then
      localL iCxtModeL m' c‚ÇÇ
    else
      return UnknownV


-----------
--- Rand --
-----------

rand ‚à∑ Prg ‚Üí BaseType ‚Üí IM Val ClearBaseVal
rand prg bœÑ = case bœÑ of
  UnitT ‚Üí return BulCV
  ùîπT    ‚Üí BoolCV ^$ prgRandBool prg
{-  ‚ÑïT pr ‚Üí case pr of
    FixedIPr wPr dPr | wPr + dPr ‚â° 8  ‚Üí NatCV pr ^$ prgRandNat8  prg
    FixedIPr wPr dPr | wPr + dPr ‚â° 16 ‚Üí NatCV pr ^$ prgRandNat16 prg
    FixedIPr wPr dPr | wPr + dPr ‚â° 32 ‚Üí NatCV pr ^$ prgRandNat32 prg
    FixedIPr wPr dPr | wPr + dPr ‚â° 64 ‚Üí NatCV pr ^$ prgRandNat64 prg
    _ ‚Üí todoCxt -}
{-  ‚Ñ§T pr ‚Üí case pr of
    FixedIPr wPr dPr | wPr + dPr ‚â° 8   ‚Üí IntCV pr ^$ prgRandInt8 prg
    FixedIPr wPr dPr | wPr + dPr ‚â° 16  ‚Üí IntCV pr ^$ prgRandInt16 prg
    FixedIPr wPr dPr | wPr + dPr ‚â° 32  ‚Üí IntCV pr ^$ prgRandInt32 prg
    FixedIPr wPr dPr | wPr + dPr ‚â° 64  ‚Üí IntCV pr ^$ prgRandInt64 prg
    _ ‚Üí todoCxt -}
  _ ‚Üí todoCxt

interpRand ‚à∑ (STACK) ‚áí PrinSetExp ‚Üí BaseType ‚Üí IM Val Val
interpRand œÅse bœÑ = do
  m  ‚Üê askL iCxtModeL
  m' ‚Üê AddTop ^$ elimPSV ^$ interpPrinSetExp œÅse
  guardErr (m ‚â° m') $
    throwIErrorCxt TypeIError "interpRand: m ‚â¢ m'" $ frhs
    [ ("m", pretty m)
    , ("m'", pretty m')
    ]
  prg ‚Üê getPrg
  cbv ‚Üê rand prg bœÑ
  return $ KnownV $ BaseV $ ClearV cbv

-------------------------------
--- Share, Reveal, and Send ---
-------------------------------

modeCheckComm ‚à∑ ùëÉ PrinVal ‚Üí ùëÉ PrinVal ‚Üí IM Val ()
modeCheckComm œÅvs‚ÇÅ œÅvs‚ÇÇ = do
  m ‚Üê askL iCxtModeL
  let nonEmpty   = not (isEmpty œÅvs‚ÇÅ) ‚©ì not (isEmpty œÅvs‚ÇÇ)
  let allPresent = (AddTop $ œÅvs‚ÇÅ ‚à™ œÅvs‚ÇÇ) ‚â° m
  guardErr nonEmpty $
    throwIErrorCxt TypeIError "modeCheckComm: œÅvs‚ÇÅ ‚â° √∏ ‚à® œÅvs‚ÇÇ ‚â° √∏" $ frhs
    [ ("œÅvs‚ÇÅ", pretty œÅvs‚ÇÅ)
    , ("œÅvs‚ÇÇ", pretty œÅvs‚ÇÇ)
    ]
  guardErr allPresent $
    throwIErrorCxt TypeIError "modeCheckComm: (AddTop $ œÅvs‚ÇÅ ‚à™ œÅvs‚ÇÇ) ‚â¢ m" $ frhs
    [ ("œÅvs‚ÇÅ", pretty œÅvs‚ÇÅ)
    , ("œÅvs‚ÇÇ", pretty œÅvs‚ÇÇ)
    , ("m", pretty m)
    ]

interpShare ‚à∑ (STACK) ‚áí Prot ‚Üí Type ‚Üí PrinSetExp ‚Üí PrinSetExp ‚Üí Exp ‚Üí IM Val Val
interpShare œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpPrinSetExp œÅse‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    œÅvsFr ‚Üê elimPSV ^$ c‚ÇÅ
    œÅvFr  ‚Üê errorùëÇ (view oneùëÉL œÅvsFr) $
            throwIErrorCxt TypeIError "interpShare: view oneùëÉL œÅvsFr ‚â° None" $ frhs
            [ ("œÅvsFr", pretty œÅvsFr)
            ]
    œÅvsTo ‚Üê elimPSV ^$ c‚ÇÇ
    vÃÉ     ‚Üê c‚ÇÉ
    modeCheckComm œÅvsFr œÅvsTo
    share œÜ œÅvFr œÅvsTo vÃÉ œÑ

interpReveal ‚à∑ (STACK) ‚áí Prot ‚Üí Type ‚Üí PrinSetExp ‚Üí PrinSetExp ‚Üí Exp ‚Üí IM Val Val
interpReveal œÜ œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpPrinSetExp œÅse‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    œÅvsFr ‚Üê elimPSV ^$ c‚ÇÅ
    œÅvsTo ‚Üê elimPSV ^$ c‚ÇÇ
    œÅvTo  ‚Üê errorùëÇ (view oneùëÉL œÅvsTo) $
            throwIErrorCxt TypeIError "interpReveal: view oneùëÉL œÅvsTo ‚â° None" $ frhs
            [ ("œÅvsTo", pretty œÅvsTo)
            ]
    vÃÉ     ‚Üê c‚ÇÉ
    modeCheckComm œÅvsFr œÅvsTo
    reveal œÜ œÅvsFr œÅvTo vÃÉ œÑ

interpComm ‚à∑ (STACK) ‚áí Type ‚Üí PrinSetExp ‚Üí PrinSetExp ‚Üí Exp ‚Üí IM Val Val
interpComm œÑ œÅse‚ÇÅ œÅse‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpPrinSetExp œÅse‚ÇÅ
      c‚ÇÇ = interpPrinSetExp œÅse‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    œÅvsFr ‚Üê elimPSV ^$ c‚ÇÅ
    œÅvsTo ‚Üê elimPSV ^$ c‚ÇÇ
    vÃÉ     ‚Üê c‚ÇÉ
    modeCheckComm œÅvsFr œÅvsTo
    commVal œÅvsFr œÅvsTo vÃÉ œÑ

----------------------
--- MPC Operations ---
----------------------

interpMuxIf ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí Exp ‚Üí IM Val Val
interpMuxIf e‚ÇÅ e‚ÇÇ e‚ÇÉ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
      c‚ÇÉ = interpExp e‚ÇÉ
  in do
    vÃÉ‚ÇÅ    ‚Üê c‚ÇÅ
    negvÃÉ‚ÇÅ ‚Üê primVal NotO $ vÃÉ‚ÇÅ :& Nil
    vÃÉ‚ÇÇ    ‚Üê mapEnvL iCxtMPCPathConditionL (vÃÉ‚ÇÅ :&)    c‚ÇÇ
    vÃÉ‚ÇÉ    ‚Üê mapEnvL iCxtMPCPathConditionL (negvÃÉ‚ÇÅ :&) c‚ÇÉ
    muxVal vÃÉ‚ÇÅ vÃÉ‚ÇÇ vÃÉ‚ÇÉ

interpMuxCase ‚à∑ (STACK) ‚áí Exp ‚Üí ùêø (Pat ‚àß Exp) ‚Üí IM Val Val
interpMuxCase e œàes =
  let c  = interpExp e
      fs = mapOn œàes $ \ (œà :* e') ‚Üí
        let c' = interpExp e'
        in \ vÃÉ ‚Üí do
          fùëÇ ‚Üê unFailT $ matchVal vÃÉ œà
          case fùëÇ of
            None   ‚Üí return Nil
            Some f ‚Üí single ^$ f c'
  in do
    vÃÉ ‚Üê c
    vÃÉs ‚Üê concat ^$ mapMOn fs $ \ f ‚Üí f vÃÉ
    vÃÉ‚Çï :* vÃÉs‚Çú ‚Üê errorùëÇ (view consL vÃÉs) $
                throwIErrorCxt TypeIError "interpMuxCase: vÃÉ doesn't match any of œàes" $ frhs
                [ ("vÃÉ", pretty vÃÉ)
                , ("œàes", pretty œàes)
                ]
    mfold vÃÉ‚Çï sumVal vÃÉs‚Çú

interpProc ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpProc e =
  let c = interpExp e
  in do
    Œ∫ :* v‚ÇÄ ‚Üê
      localizeL iStateMPCContL null $
      localL iCxtMPCPathConditionL null $
      c
    mfoldrOnFrom (reverse Œ∫) v‚ÇÄ $ \ (pc·¥ø :* v‚ÇÅ) v‚ÇÇ ‚Üí mfoldrOnFrom pc·¥ø v‚ÇÅ $ \ v·µñ·∂ú acc ‚Üí muxVal v·µñ·∂ú acc v‚ÇÇ

interpReturn ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpReturn e =
  let c = interpExp e
  in do
    vÃÉ ‚Üê c
    pc ‚Üê askL iCxtMPCPathConditionL
    modifyL iStateMPCContL $ \ Œ∫ ‚Üí (pc :* vÃÉ) :& Œ∫
    interpDefault

---------------
--- Bundles ---
---------------

interpBundle ‚à∑ (STACK) ‚áí ùêø (PrinExp ‚àß Exp) ‚Üí IM Val Val
interpBundle œÅeeùêø =
  let ccùêø = map (mapPair interpPrinExp interpExp) œÅeeùêø
  in
  KnownV ^$ BundleV ^$ dict ^$ mapMOn (iter ccùêø) $ \ (c‚ÇÅ :* c‚ÇÇ) ‚Üí do
    œÅ ‚Üê c‚ÇÅ
    vÃÉ ‚Üê c‚ÇÇ
    return $ œÅ ‚Ü¶ vÃÉ

interpBundleAccess ‚à∑ (STACK) ‚áí Exp ‚Üí PrinExp ‚Üí IM Val Val
interpBundleAccess e‚ÇÅ œÅe‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpPrinExp œÅe‚ÇÇ
  in do
    bdl ‚Üê elimBundle *$ elimKnown *‚ãÖ c‚ÇÅ
    œÅ   ‚Üê c‚ÇÇ
    errorùëÇ (view justL $ bdl ‚ãï? œÅ) $
      throwIErrorCxt TypeIError "interpBundleAccess: œÅ ‚àâ dom(bdl)" $ frhs
      [ ("œÅ", pretty œÅ)
      , ("dom(bdl)", pretty $ keys bdl)
      ]

interpBundleUnion ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpBundleUnion e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    bdl‚ÇÅ ‚Üê elimBundle *$ elimKnown *‚ãÖ c‚ÇÅ
    bdl‚ÇÇ ‚Üê elimBundle *$ elimKnown *‚ãÖ c‚ÇÇ
    return $ KnownV $ BundleV $ bdl‚ÇÅ ‚©å bdl‚ÇÇ

------------------
--- Sequencing ---
------------------

interpSeq ‚à∑ (STACK) ‚áí Exp ‚Üí Exp ‚Üí IM Val Val
interpSeq e‚ÇÅ e‚ÇÇ =
  let c‚ÇÅ = interpExp e‚ÇÅ
      c‚ÇÇ = interpExp e‚ÇÇ
  in do
    _ ‚Üê c‚ÇÅ
    c‚ÇÇ

---------------
--- Default ---
---------------

interpDefault ‚à∑ (STACK) ‚áí IM Val Val
interpDefault = return $ KnownV DefaultV

-------------------
--- Expressions ---
-------------------

--wrapInterp ‚à∑ (STACK) ‚áí (ExpR ‚Üí IM Val a) ‚Üí Exp ‚Üí IM Val a
--wrapInterp f e = localL iCxtSourceL (Some $ atag e) $ f $ extract e

interpExp ‚à∑ (STACK) ‚áí Exp ‚Üí IM Val Val
interpExp e = localL iCxtSourceL (Some $ atag e) $ interpExpR $ extract e

interpExpR ‚à∑ (STACK) ‚áí ExpR ‚Üí IM Val Val
interpExpR = \case
  -- Variables
  VarE x ‚Üí interpVar x

  -- Literals
  BulE        ‚Üí interpBul
  BoolE b     ‚Üí interpBool b
  NatE pr n   ‚Üí interpNat pr n
  IntE pr z   ‚Üí interpInt pr z
  FltE pr d   ‚Üí interpFlt pr d
  StrE s      ‚Üí interpStr s
  PrinSetE es ‚Üí interpPrinSet es
  PrimE op es ‚Üí interpPrim op es

  -- Sums, Products, and Lists
  ProdE e‚Çó e·µ£  ‚Üí interpProd e‚Çó e·µ£
  LE e‚Çó        ‚Üí interpL e‚Çó
  RE e·µ£        ‚Üí interpR e·µ£
  NilE         ‚Üí interpNil
  ConsE e‚Çï e‚Çú  ‚Üí interpCons e‚Çï e‚Çú
  IfE e‚ÇÅ e‚ÇÇ e‚ÇÉ ‚Üí interpIf e‚ÇÅ e‚ÇÇ e‚ÇÉ
  CaseE e œàes  ‚Üí interpCase e œàes

  -- Functions
  LetE œà e‚ÇÅ e‚ÇÇ    ‚Üí interpLet œà e‚ÇÅ e‚ÇÇ
  LamE selfùëÇ œàs e ‚Üí interpLam selfùëÇ œàs e
  AppE e‚ÇÅ e‚ÇÇ      ‚Üí interpApp e‚ÇÅ e‚ÇÇ


  -- Read and Write
  ReadE œÑ e    ‚Üí interpRead œÑ e
  WriteE e‚ÇÅ e‚ÇÇ ‚Üí interpWrite e‚ÇÅ e‚ÇÇ

  -- Trace
  TraceE e‚ÇÅ e‚ÇÇ ‚Üí interpTrace e‚ÇÅ e‚ÇÇ

  -- References
  RefE e          ‚Üí interpRef e
  RefReadE e      ‚Üí interpRefRead e
  RefWriteE e‚ÇÅ e‚ÇÇ ‚Üí interpRefWrite e‚ÇÅ e‚ÇÇ

  -- Arrays
  ArrayE e‚ÇÅ e‚ÇÇ                                ‚Üí interpArray e‚ÇÅ e‚ÇÇ
  ArrayReadE e‚ÇÅ e‚ÇÇ                            ‚Üí interpArrayRead e‚ÇÅ e‚ÇÇ
  ArrayWriteE (extract ‚Üí ArrayReadE e‚ÇÅ e‚ÇÇ) e‚ÇÉ ‚Üí interpArrayWrite e‚ÇÅ e‚ÇÇ e‚ÇÉ
  ArraySizeE e                                ‚Üí interpArraySize e

  -- Par
  ParE œÅse‚ÇÅ e‚ÇÇ ‚Üí interpPar œÅse‚ÇÅ e‚ÇÇ

  -- Rand
  RandE œÅse Œº ‚Üí interpRand œÅse Œº

  -- Share, Reveal, and Send
  ShareE œÜ œÑ œÅes‚ÇÅ œÅse‚ÇÇ e‚ÇÉ  ‚Üí interpShare œÜ œÑ œÅes‚ÇÅ œÅse‚ÇÇ e‚ÇÉ
  RevealE œÜ œÑ œÅse‚ÇÅ œÅes‚ÇÇ e‚ÇÉ ‚Üí interpReveal œÜ œÑ œÅse‚ÇÅ œÅes‚ÇÇ e‚ÇÉ
  SendE œÑ œÅes‚ÇÅ œÅse‚ÇÇ e‚ÇÉ     ‚Üí interpComm œÑ œÅes‚ÇÅ œÅse‚ÇÇ e‚ÇÉ

  -- MPC Operations
  MuxIfE e‚ÇÅ e‚ÇÇ e‚ÇÉ ‚Üí interpMuxIf e‚ÇÅ e‚ÇÇ e‚ÇÉ
  MuxCaseE e œàes  ‚Üí interpMuxCase e œàes
  ProcE e         ‚Üí interpProc e
  ReturnE e       ‚Üí interpReturn e

  -- Bundles
  BundleE œÅees         ‚Üí interpBundle œÅees
  BundleAccessE e‚ÇÅ œÅe‚ÇÇ ‚Üí interpBundleAccess e‚ÇÅ œÅe‚ÇÇ
  BundleUnionE e‚ÇÅ e‚ÇÇ   ‚Üí interpBundleUnion e‚ÇÅ e‚ÇÇ

  -- Sequencing
  SeqE e‚ÇÅ e‚ÇÇ ‚Üí interpSeq e‚ÇÅ e‚ÇÇ

  -- Default
  DefaultE ‚Üí interpDefault

  -- TODO
  _ ‚Üí todoCxt

---------------
-- TOP LEVEL --
---------------

interpTL ‚à∑ TL ‚Üí IM Val a ‚Üí IM Val a
interpTL tl xM = case extract tl of
  DeclTL _ _ _    ‚Üí xM
  DefnTL b x œàs e ‚Üí do
    v ‚Üê interpExp $ buildLam (atag tl) x œàs e
    mapEnvL iCxtEnvL ((x ‚Ü¶ v) ‚©å) xM
    where buildLam = if b then buildUnfixedLambda else buildLambda
  PrinTL œÅds ‚Üí do
    Œ≥œÅs :* œÅScope ‚Üê split ^$ mapMOn œÅds $ \case
      SinglePD œÅ ‚Üí do
        let œÅv = SinglePV œÅ
        let vÃÉ  = KnownV $ BaseV $ ClearV $ PrinCV œÅv
        return $ (var œÅ ‚Ü¶ vÃÉ) :* single œÅv
      ArrayPD œÅ n ‚Üí do
        let œÅsv = ArrPSV œÅ n
        let vÃÉ   = KnownV $ BaseV $ ClearV $ PrinSetCV œÅsv
        return $ (var œÅ ‚Ü¶ vÃÉ) :* elimPSV œÅsv
    mapEnvL iCxtEnvL ((dict Œ≥œÅs) ‚©å) $ mapEnvL iCxtPrinScopeL ((concat œÅScope) ‚à™) xM

interpTLs ‚à∑ ùêø TL ‚Üí IM Val a ‚Üí IM Val a
interpTLs = compose ‚àò map interpTL

-- ==== --
-- MAIN --
-- ==== --

evalProgram ‚à∑ IParams ‚Üí ùêø TL ‚Üí IO Val
evalProgram Œ∏ prog =
  evalIMIO Œ∏ $ do
    interpTLs prog $ do
      main ‚Üê interpVar $ var "main"
      bul  ‚Üê return $ KnownV $ BaseV $ ClearV BulCV
      evalApp main bul
