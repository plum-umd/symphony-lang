module Symphony.TypeChecker.TLM.Types where

import UVMHS

import Symphony.TypeChecker.Env
import Symphony.TypeChecker.Error

data TLR = TLR
  { ttlrSource ‚à∑ ùëÇ SrcCxt
  }

tlr‚ÇÄ ‚à∑ TLR
tlr‚ÇÄ = TLR { ttlrSource = None }

type TLW = ()

data TLS = TLS
  { ttlsEnv ‚à∑ Env
  , ttlsPrins ‚à∑ (ùëÉ ùïè)
  }

tls‚ÇÄ ‚à∑ TLS
tls‚ÇÄ = TLS { ttlsEnv = d√∏, ttlsPrins = p√∏ }

type TLE = Error

newtype TLM a = TTLM { unTLM ‚à∑ RWST TLR TLW TLS (ErrorT TLE ID) a }
  deriving
    ( Functor
    , Return, Bind, Monad
    , MonadReader TLR
    , MonadWriter TLW
    , MonadState TLS
    , MonadError TLE
    )

makeLenses ''TLR
makeLenses ''TLS
