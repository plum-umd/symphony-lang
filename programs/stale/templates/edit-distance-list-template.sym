principal A B

-- edit-dist: classical dynamic programming algorithm
def edit-dist rowsWord colsWord =
  let (topFirst, topLast) = elim-list rowsWord
    (map inc (range-nat (len colsWord)), 0n)
    (fun rowChar (prevSolnRow, prevLast) ->
       let curLast = inc prevLast in
       let (curFirst, _) = elim-list (zip prevSolnRow colsWord)
         ([ ], prevLast)
         (fun (prevRowCost, colChar) (curRow, diagCost) ->
           let prevColCost = head curLast curRow in
           let choice0 = min-muxable prevRowCost prevColCost in
           let (choice1, addCost) = mux if (choice0 > diagCost)
             then (diagCost, (mux if (rowChar == colChar) then 0n else 1n))
             else (choice0, 1n) in
           ((choice1 + addCost)::curRow, prevRowCost)) in
       (curFirst, curLast)) in
  head topLast topFirst

def main () = par {{A,B}}
  let inputA  = par {{A}} read list ℤ from "edit-distance-input-{1}.txt" in
  let publicA = send-ls {{A}} {{A,B}} inputA in
  let sharedA = map (fun x → share {{{0}, ℤ : A → A,B}} x) publicA in

  let inputB  = par {{B}} read list ℤ from "edit-distance-input-{1}.txt" in
  let publicB = send-ls {{B}} {{A,B}} inputB in
  let sharedB = map (fun x → share {{{0}, ℤ : B → A,B}} x) publicB in

  reveal {{{0}, ℕ : A,B → A,B}} edit-dist sharedA sharedB
