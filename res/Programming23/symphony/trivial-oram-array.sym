principal A B

def dummy a = (-1, a)

def rr' oram idx acc i =
  if i == nat (size oram) then
    acc
  else
    let c        = oram.i
    let idx', _  = c
    let c', acc' = mux if idx == idx' then (acc, c) else (c, acc)
    let _        = oram.i ← c' in
    rr' oram idx acc' (i + 1n)

def rr oram idx a = rr' oram idx (dummy a) 0n

def add' oram acc i =
  if i == nat (size oram) then
    ()
  else
    let c        = oram.i
    let idx', _  = c
    let c', acc' = mux if idx' == -1 then (acc, c) else (c, acc)
    let _        = oram.i ← c' in
    add' oram acc' (i + 1n)

def add oram idx v = add' oram (idx, v) 0n

def initialize n a = array[n] (-1, a)
