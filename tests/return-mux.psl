principal A B

def main • =
  par {A,B}
  proc
  let x = share {yao, 𝔹 : A → A,B} false
  let y = (share {yao, ℤ : B → A,B} 3, share {yao, ℤ : B → A,B} 4)
  let z = (share {yao, ℤ : B → A,B} 4, share {yao, ℤ : B → A,B} 1)
  let sum =
    mux if share {yao, 𝔹 : A → A,B} false
    then L 1
    else R 2
  do mux case sum
       { L x → return x + 10
       ; R y → return y + 100
       }
  in 0

def expected = par {A,B} share {yao, ℤ : A → A,B} 102
