principal A B

def main • =
  proc
  let x = share {yao:A → A,B} false
  let y = (share {yao:B → A,B} 3, share {yao:B → A,B} 4)
  let z = (share {yao:B → A,B} 4, share {yao:B → A,B} 1)
  let sum = 
    mux if share {yao:A → A,B} false
    then L 1
    else R 2
  do mux case sum
       { L x → trace 1 in return x + 10
       ; R y → trace 2 in return y + 100
       }
  in 0

def expected = share {yao:A → A,B} 102
