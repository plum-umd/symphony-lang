-- here is an aspirational PSL program in which A generates a NIZK
-- proof that she knows an non-negative input and sends the proof to
-- Bob.

principal Alice Bob

def main () =
  -- pf: the proof constructed by A that she knows a non-negative
  -- integer.
  let pf : (nizk-verify {Alice} bool){Alice}
  let pf = par { Alice }
    -- There are two aspirational families of types that will be used
    -- to represent NIZK proofs. The first is the type of tests of
    -- witnesses common to principals P that evaluate to type t,
    -- denoted
    --
    -- t{ nizk-test : P}.

    -- An "atomic" witness test may be a witness value; they are
    -- introduced by using an aspirational syntactic form
    -- [nizk-witness prin-set exp]. E.g.,
    -- 
    -- w : int{ nizk-test : P }
    -- 
    -- is Alice's witness that she knows a non-negative value (namely,
    -- 1).
    let w : nizk-test { Alice } int in
    let w = nizk-witness { yao: Alice } 1 in

    -- Witness tests can be composed using all operators that shadown
    -- all operators for which can we construct circuits for Boolean
    -- protocols (which I believe is pretty much all operators on base
    -- types). E.g.,
    --
    -- test-non-neg : bool{ nizk-test : P}
    -- 
    -- defined below is a test that Alice's witness value is
    -- non-negative:
    let test-non-neg = 0 <= w in

    -- Once Alice has built a test for the desired property of her
    -- witness, she generates (1) the witness's value [v] under the
    -- test, (2) a cryptographic fingerprint of the witness, and (3) a
    -- NIZK proof that the witness evaluates to [v] under the
    -- test. These tuples are referred to collectively as a "NIZK
    -- proof". The type of NIZK proofs that principals [P] know a
    -- witness that evaluates to a value of type [t] under some test
    -- is denoted
    --
    -- t{ nizk-pf : P }.

    -- These proofs are generated by using the aspirational PSL form,
    -- [nizk-commit]. E.g., the following evaluates to a NIZK proof
    -- that Alice knows a value that yields of [true] when substituted
    -- for [x] in the expression [0 <= x]:
    nizk-commit {yao:Alice} test-non-neg in

  -- once Alice has constructed her NIZK proof, she is free to send it
  -- to other parties, largely like other secret values in the
  -- language. E.g., the following evaluates to a NIZK proof that
  -- Alice knows a non-negative value, held by Bob.
  send { Alice -> Bob } pf

  -- As illustrated by last send operation, the nizk-pf type modality
  -- "nests" under the location type modality. I.e., it would be
  -- allowed that Bob would hold a proof that Alice knows a witness
  -- that evaluates to a particular value.

def expected = 
  send {Alice -> Bob}
    (par {Alice} nizk-commit {yao:Alice} (nizk-witness {yao:Alice} true))
