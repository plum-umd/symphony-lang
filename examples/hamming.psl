principal A B

def hamming bs0 bs1 = sum-nats (map
  (fun (b0, b1) -> mux if b0 == b1 then 0n else 1n)
  (zip bs0 bs1))

-- input lists must be of equal lengths:
def main () = par {A, B}
  let bitstringA = map (fun x -> share {yao: A -> A, B} x)
      (send-ls {A} {A, B}
       (par {A} (read list int from "hamming-input.txt"))) in
  let bitstringB = map (fun x -> share {yao: B -> A, B} x)
      (send-ls {B} {A, B}
       (par {B} (read list int from "hamming-input.txt"))) in
  reveal {yao: A,B -> A, B} (hamming bitstringA bitstringB)
