principal A
principal B

def add : ℤ[64]{isec:A,B} → 𝔹{acir:A,B}
def add = λ xy → 
  let x : ℤ[64]{ncir:A}
  let x = ~xy.A 
  let y : ℤ[64]{ncir:B}
  let y = ~xy.B
  let r : 𝔹{ccir:B}
  let r = x + y
  in r

def add-mpc : 𝟙 →{inp:A,B} ℤ[64]{yshare:A,B}
def add-mpc = λ • →
  let xy : ℤ[64]{isec:A,B}
  let xy = {par:A,B} read ℤ[64] "e1-input.txt"
  let r : ℤ[64]{yshare:A,B}
  let r = mpc{yao:A,B} add xy
  in r 

def add-mpc-rev : 𝟙 →{inp:A,B;rev:A,B} ℤ{ssec:A,B}
def add-mpc-rev = λ • →
  let r : ℤ[64]{yshare:A,B}
  let r = add-mpc •
  let p : ℤ[64]{ssec:A,B}
  let p = reveal{A,B} r
  in p

def one-liner : 𝟙 →{inp:A,B;rev:A,B} ℤ[64]{ssec:A,B}
def one-liner = λ • →
  let xy = {par:A,B} read ℤ[64] "e1-input.txt"
  in reveal{A,B} mpc{yao:A,B} ~xy.A + ~xy.B

def main : ℤ[64]{ssec:A,B} × ℤ[64]{ssec:A,B}
def main = add-mpc-rev • , one-liner •
