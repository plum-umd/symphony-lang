-- input parties
principal node_1 node_2

-- Listing 5: Greatest Common Divisor.
-- def gcd gcd_rec (a, b) =
def sec gcd (a, b) =
  -- 0 is divisible by any number, so when we reach it we can stop
  mux if (a == 0) then
    b
  else
    let r = b % a in -- remainder (B / A)

    -- gcd (A, B) = gcd ( A, R +kA) = gcd( R, A ), so use recursion
    gcd (r, a)

def main () =
  let a = par {node_1} (read int from "gcd.txt") in
  let b = par {node_2} (read int from "gcd.txt") in 
  reveal{node_1} (eval-upto gcd 93n
    (int-minmax
      (share{yao: node_1 -> node_1, node_2} a)
      (share{yao: node_2 -> node_1, node_2} b) ) )
