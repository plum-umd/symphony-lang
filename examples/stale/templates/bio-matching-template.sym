principal A B

-- euclidean distance
def dist (a0, a1) (b0, b1) = babylonian-sqrt-int
  ((square (a0 - b0)) + (square (a1 - b1)))

def euclidean a b len =
  let euclidean_rec = fun [euclidean_rec] i acc ->
    if i == len then
      acc
    else
      euclidean_rec (i + 1n) (min-muxable (dist a.i b) acc)
    in
    euclidean_rec 0n max-int

def main () = par {{A,B}}
  let inputA = par {{A}} snd (read (ℕ#32 × array[{1}] (ℤ#32 × ℤ#32)) from "bio-matching-input-{1}.txt") in
  let inputB = par {{B}} read (ℤ#32 × ℤ#32) from "bio-matching-input-{1}.txt" in

  let shareA = share [{0}, array[{1}] (ℤ#32 × ℤ#32) : A → {{A,B}}] inputA in
  let shareB = share [{0}, (ℤ#32 × ℤ#32) : B → {{A,B}}] inputB in
  let _      = par {{B}} flush [A] in

  reveal [{0}, ℤ : {{A,B}} → A] (euclidean shareA shareB {1}n)
