-- input parties
principal A B
-- compute parties
principal C D
-- output party
principal E

-- Listing 5: Greatest Common Divisor.
def gcd gcd_rec (a, b) =
  -- 0 is divisible by any number, so when we reach it we can stop
  mux if (a == 0) then
    b
  else
    let r = b % a in -- remainder (B / A)

    -- gcd (A, B) = gcd ( A, R +kA) = gcd( R, A ), so use recursion
    gcd_rec (r, a)

def main () =
  -- TODO: replace with file input
  let a = par {A} 3 in
  let b = par {B} 6 in
  reveal{E} (int-eval-upto gcd 93n
    (int-minmax
      (share{yao:A -> C,D} a)
      (share{yao:B -> C,D} b) ) )
