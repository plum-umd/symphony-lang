principal A B

def hamming bs0 bs1 len =
  let hamming_rec = fun [hamming_rec] i acc ->
    if i == len then
      acc
    else
      let n = mux if bs0.i == bs1.i then 0n else 1n in hamming_rec (i + 1n) (acc + n)
  in
  hamming_rec 0n 0n

def main () = par {{A,B}}
  let inputA = par {{A}} snd (read (ℕ#32 × array[{1}] ℤ#32) from "hamming-input-{1}.txt") in
  let inputB = par {{B}} snd (read (ℕ#32 × array[{1}] ℤ#32) from "hamming-input-{1}.txt") in

  let strA = share [{0}, array[{1}] ℤ#32 : A → {{A,B}}] inputA in
  let strB = share [{0}, array[{1}] ℤ#32 : B → {{A,B}}] inputB in
  let _    = par {{B}} flush [A] in

  reveal [{0}, ℕ#32 : {{A,B}} → A] (hamming strA strB {1}n)
