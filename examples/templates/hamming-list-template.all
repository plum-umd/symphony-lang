principal A B

def hamming bs0 bs1 acc = case (bs0, bs1)
  {{ []     , []      → acc
  ; h0 ∷ t0, h1 ∷ t1 → let n = mux if h0 == h1 then 0n#32 else 1n#32 in hamming t0 t1 (acc + n)
  }}

def main () = par {{A,B}}
  let inputA = par {{A}} snd (read (ℕ#32 × list[{1}] ℤ#32) from "hamming-input-{1}.txt") in
  let inputB = par {{B}} snd (read (ℕ#32 × list[{1}] ℤ#32) from "hamming-input-{1}.txt") in

  let strA = share [{0}, list[{1}] ℤ#32 : A → {{A,B}}] inputA in
  let strB = share [{0}, list[{1}] ℤ#32 : B → {{A,B}}] inputB in

  reveal [{0}, ℕ#32 : {{A,B}} → A] (hamming strA strB 0n#32)
