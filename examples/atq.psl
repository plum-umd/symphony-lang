principal A[2] -- Just integers
principal B[2] -- Both integers and queries

-- basic functions

def length :
    list ℤ{bgw:all}
  → ℤ{bgw:all}
def length xs = case xs
  { [] → share{bgw:all} 0
  ; x∷xs → length xs + (share{bgw:all} 1)
  }

def elem :
    ℤ{bgw:all}
  → list ℤ{bgw:all}
  → 𝔹{bgw:all}
def elem y xs = case xs
  { [] → share{bgw:all} false
  ; x∷xs →
    let b = x == y
    in b ? (share{bgw:all} true) ◇ (elem y xs)
  }

def elem-at :
    ℤ{bgw:all}
  → list ℤ{bgw:all}
  → ℤ{bgw:all}
def elem-at i xs = case xs
  { [] → -1
  ; x∷xs' →
    let b = i ≡ 0
    in b ? x ◇ (elem-at (i - 1) xs')
  }


-- query functions

def min :
    list ℤ{bgw:all}
  → ℤ{bgw:all}
def min xs = case xs
  { [x] → x
  ; x∷xs →
    let y = min xs
    let b = x < y
    in b ? x ◇ y
  }


def max :
    list ℤ{bgw:all}
  → ℤ{bgw:all}
def max xs = case xs
  { [x] → x
  ; x∷xs →
    let y = max xs
    let b = x > y
    in b ? x ◇ y
  }


def median :
    list ℤ{bgw:all}
  → ℤ{bgw:all}
def median xs = share{bgw:all} 0 -- not implemented


def num-unique-rec :
    list ℤ{bgw:all}
  → list ℤ{bgw:all}
  → ℤ{bgw:all}
def num-unique-rec xs seen = case xs
  { [] → length seen
  ; x∷xs →
    let b = elem x seen
    in b ? num-unique-rec xs seen ◇ num-unique-rec xs (x∷seen)
  }

def num-unique :
    list ℤ{bgw:all}
  → ℤ{bgw:all}
def num-unique xs = num-unique-rec xs []

-- mpc list manip

def append :
    list ℤ{bgw:all}
  → list ℤ{bgw:all}
  → list ℤ{bgw:all}
def append xs ys = case xs
  { [] → ys
  ; (x∷xs) → append xs (x∷ys)
  }

def share-list :
    list ℤ{A}
  → list ℤ{bgw:all}
def share-list xs = case xs
  { [] → []
  ; x∷xs′ → (share{bgw:all} x) ∷ (share-list xs′)
  }

def combine-lists :
    list ℤ{isec:A,B}
  → list ℤ{bgw:all}
def combine-lists xs =
  append (share-list xs.A.1) (append (share-list xs.A.2) (append (share-list xs.B.1) (share-list xs.B.2)))


-- atq

def run-queries :
    list ℤ{isec:A,B}
  → list ℤ{bgw:all}
def run-queries xs =
  let xs′ = combine-lists xs
  in (min xs′) ∷ (max xs′) ∷ (median xs′) ∷ (num-unique xs′) ∷ []

def send-result :
    (t : ℙ)
  → list ℤ{bgw:all}
  → ℤ{isec:B}
  → list ℤ{ssec:t}
def send-result t results q =
  reveal{t} (elem-at q results)

def send-results :
    list ℤ{bgw:all}
  → list ℤ{isec:B}
  → list ℙ{isec:B}
  → list ℤ{ssec:hmm}
def send-results results qs ts = case (qs, ts)
  { ([], []) → []
  ; (q∷qs',t∷ts') → (send-result t results q) ∷ (send-results results qs' ts')
  }

def main : 𝟙 →{inp:A,B;rev:hmmm} list ℤ{ssec:hmm}
def main • =
  let xs : list ℤ{isec:A,B}
  let xs = {par:A,B} read (list ℤ) "atq-data.txt"
  let qs : list ℤ{isec:B}
  let qs = {par:B} read (list ℤ) "atq-queries.txt"
  let ts : list ℙ{isec:B}
  let ts = {par:B} read (list ℙ) "atq-targets.txt"
  let results = run-queries xs
  in send-results results qs ts
