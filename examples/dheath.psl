principal A
principal B

def main () =
  par {A,B}

    let x0 = share{yao:A -> this} (par {A} 0)
    let x1 = share{yao:A -> this} (par {A} 2)
    let y0 = share{yao:B -> this} (par {B} 4)
    let y1 = share{yao:B -> this} (par {B} 5)


    let xs = (par {A} 1::2::3::[])
    let ys = (par {B} 5::6::7::8::[])

    let sbool = fun P -> (fun x -> share{yao:P -> this} x)
    let sint = fun P -> (fun x -> share{yao:P -> this} x)
    let rint = fun i -> reveal {this} i


    let xs' = share-as-vec A (sbool A) (sint A) 0 10 xs
    let ys' = share-as-vec B (sbool B) (sint B) 0 10 ys

    let b = share{yao:A -> this} (par {A} false)

    let xss' = mux if b
         then xs'
         else ys'

    in vec-int-sum (vec-map (fun x -> x + 1) xss')
