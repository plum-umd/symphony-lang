-- BEGIN definitions appropriate for general-purpose library modules

-- err msg: throw an error message
def err msg = msg + 0

-- BEGIN library for general functions:

def apply f a = f a

def compose : (t0 -> t1) -> (t1 -> t2) -> (t0 -> t2)
def compose f g x = g (f x)

def const : t -> u -> t
def const x y = x

def flip f x y = f y x

def id : t -> t
def id x = x

def uncurry : (a -> b -> c) -> (a * b -> c)
def uncurry f (a, b) = f a b

def pair x y = (x, y)

def fst (x, y) = x

def snd (x, y) = y

def elim_sum f g x = case x
  { L x' -> f x'
  ; R y' -> g y'
  }

-- BEGIN library for security-sensitive operations:

def ite guard tc fc = if guard then tc else fc

def mux guard tc fc = guard ? tc ◇ fc

def fold-f i f xs = case xs
  { ⟪⟫ → i
  ; ⟪p|x⟫⧺xs′ → f p x (fold-f i f xs′)
  }

def send_ls P0 P1 l = 
  case (send{ P0 -> P1 } l)
  { [ ] -> [ ]
  ; x :: l' -> x :: (send_ls P0 P1 l') 
  }

def reveal_prins p x = reveal { p } x

-- shr_spdz: a first-order operation that shares over SPDZ
def shr_spdz P0 P1 x = share{ spdz : P0 -> P1 } x

-- BEGIN library for Boolean

-- and: non-infix Boolean conjunction
def and b0 b1 = b0 && b1

-- def not b = b ? false >< true
def neg b = not b

-- BEGIN library for types with equality:

-- eq: non-infix equality test
def eq x y = x == y

-- BEGIN library for a numeric typeclass

-- plus: non-infix sum
def plus m n = m + n

-- minus: non-infix subtraction
def minus m n = m - n

-- mult: non-infix multiplication 
def mult m n = m * n

-- div: non-infix division
def div m n = m / n

-- exp: non-infix exponentiation
def exp m n = m ^ n

-- square: multiple a number with itself:
def square a = a * a

def max muxer a b = muxer (a <= b) b a

def max_spdz = max mux

def abs_val_real a = max mux a (-1.0 * a)

-- TODO: define these properly
def log_2_real = id

def magn x = 1n

-- BEGIN library for nats:

-- inc n: increment of nat n
def inc : nat -> nat
def inc = plus 1n

-- def inc n = 1n + n

-- dec n: decrement of nat n
def dec : nat -> nat
def dec n = n - 1n

-- elim_nat: form for eliminating (folding over) nats
def elim_nat : nat -> t -> (t -> t) -> t
def elim_nat m z s = 
  if m ≡ 0n then z
  else s (elim_nat (dec m) z s)

-- eliml_nat: analog of fold right, for nats
-- PSL: add syntactic sugar for this?
def eliml_nat : nat -> t -> (t -> t) -> t
def eliml_nat n z s = (elim_nat n id (compose s)) z

def seq e0 e1 =
  let _ = e0 in
  e1

-- monad for building a value and a continuation. Type is
-- cont a b = (a -> a, b)
-- where cont a is a monad.

-- nat_log: logarithm over nats. Diverges at 0n.
def nat_log : nat -> nat -> nat
def nat_log b n =
  if n == 1n then 0n
  else inc (nat_log b (n / b))

def ceil_fn f f_inv n =
  let n' = f n in
  n' + (if n == f_inv n' then 0n else 1n)

def log_2_ceil = ceil_fn (nat_log 2n) (exp 2n)

-- BEGIN library for floats:

-- sqrt: implementation of the Babylonian method for computing sqrt
def sqrt_steps = 5n
def babylonian_sqrt x = eliml_nat sqrt_steps
  1.0
  (fun s -> (s + x / s) / 2.0)

-- BEGIN library for list:

-- cons: non-infix list cons
def cons : t -> list t -> list t
def cons x l = x :: l

-- const_vec t a n: a vector of constant a of size n
def const_vec : t -> nat -> list t
def const_vec c n = elim_nat n [ ] (cons c)

-- foldr: right fold, the list eliminator
def foldr : list t -> acc -> (t -> acc -> acc) -> acc
def foldr l acc f = case l
  { [ ] -> acc
  ; x :: l' -> f x (foldr l' acc f)
  } 

-- iter: fold over the unit
def iter l f = foldr l () (fun x () -> f x)

-- filter test l: l, filtered down to elements that satisfy test
def filter test l = foldr l
  [ ]
  (fun x rest -> if test x then x :: rest else rest)

-- foldr_tl: right fold with access to the tail of the list
def foldr_tl : list t -> acc -> (t -> list t -> acc -> acc) -> acc
def foldr_tl l i f = snd
  (foldr l ([ ], i) (fun x (l', b) -> (x :: l', f x l' b)))

-- decons_ls: first-order case syntax 
def decons_ls : list t -> u -> (t -> list t -> u) -> u
def decons_ls l a0 f = case l
  { [ ] -> a0
  ; x :: l' -> f x l'
  }

-- foldl: left fold
-- PSL: add syntactic sugar for this?
def foldl : list t -> acc -> (t -> acc -> acc) -> acc
def foldl l acc0 f = (foldr l id (fun x acc -> compose acc (f x))) acc0

-- concat l0 l1: concatenation of l0 and l1
def concat : list t -> list t -> list t
def concat l0 l1 = foldr l0 l1 cons

-- len l: length of list l
def len : list t -> nat
def len l = foldr l 0n (const inc)

def order = len

-- get i l: the ith element of l
def get l i =
  (elim_nat i
    (fun l' -> case l'
      { [ ] -> err "get: 0th of empty list"
      ; x :: l'' -> x
      })
    (fun g l' -> case l'
      { [ ] -> err "get: ith of non-empty list"
      ; x :: l'' -> g l''
      }) )
    l

-- set l i v: list l with the ith element updated to be v
def setter l i v =
  (elim_nat i
    (fun l' -> case l'
      { [ ] -> err "set: setting 0th of empty list"
      ; x :: l' -> v :: l'
      })
    (fun s l' -> case l'
     { [ ] -> err "set : setting ith of non-empty list"
     ; x :: l'' -> x :: (s l'')
     }) )
    l

-- map: map operation for the list functor
def map : (t -> u) -> list t -> list u
def map f l = foldr l [ ] (compose f cons)

-- rev_ls l: the reverse of list l
def rev_ls : list t -> list t
def rev_ls l = foldl l [ ] cons

def snoc : t -> list t -> list t
def snoc x l = concat l [ x ]

-- zip_lists pt0 pt1: the zip of points p0 and p1
def zip_lists : list t -> list u -> list (t * u)
def zip_lists l0 l1 =
  (foldr l0
    (const [ ])
    (fun x z0 l -> case l
      { [ ] -> [ ]
      ; y :: l' -> (x, y) :: z0 l'
      }) )
    l1

def zip_map : (t -> u -> v) -> list t -> list u -> list v
def zip_map f l0 l1 = map (uncurry f) (zip_lists l0 l1)

-- mux_ls: multiplex over a pair of lists:
def mux_ls guard l0 l1 = zip_map (mux guard) l0 l1

-- monadic return:
def cont_return a = (id, a)

-- monadic bind:
def cont_bind (f, a) g =
  let (f0, b) = g a in
  (compose f0 f, b)

-- cont_run : cont a a -> a: get an a value:
def cont_run = uncurry apply

def cont_join m = cont_bind m id

def cont_seq (f, a) v = cont_bind (f, a) (const v)

-- if_then guard tc: an if-then branch 
def if_then muxer guard tc rest = ((muxer guard tc), rest)

-- if_then guard tc: an if-then branch 
def if_then_ls = if_then mux_ls

-- eliml_sec_nat: eliminate a secure nat. Iterates up to a constant
-- bound.
def max_nat = 1n
def eliml_sec_nat muxer encz encone n z s = cont_run (snd
  (eliml_nat max_nat
    (n, cont_return z)
    (fun (n', cv) ->
      (n' - encone,
       cont_bind
         (cont_bind cv
           ((fun v -> (muxer (n' == encz) v), v)) )
         s) ) ) )

-- transpose: shift matrix between row major and column major order
def transpose : list (list t) -> list (list t)
def transpose m = foldr m
  (const_vec [ ]
    (case m
     { [ ] -> 0n
     ; v :: m' -> len v
     }) )
  (zip_map cons)

def all_true : list bool -> bool
def all_true l = foldr l true and

def eq_lists v0 v1 = all_true (zip_map eq v0 v1)

def eq_vecs = eq_lists

-- prod: the product over a list of numerics
def prod v one = foldr v one mult

-- sum: the sum over a list of numerics
def sum v z = foldr v z plus

-- dot_prod: take the dot product of two points
def dot_prod_gen z p0 p1 = sum (zip_map mult p0 p1) z

-- pt_diff: subtract one point from another
def minus_vecs : point -> point -> point
def minus_vecs v0 v1 = zip_map minus v0 v1 

-- scalar_vec_mult a v: scalar product of a and v
def scalar_vec_mult a = map (mult a)

-- scalar_vec_div: divide a vector of reals by a constant
def div_vec : real -> list real -> list real
def div_vec v a = map (flip div a) v

-- l2norm z v: the L2 norm of a vector of numerics with zero element z
def l2norm : point -> comp_shr
def l2norm z v = babylonian_sqrt (sum (map square v) z)

-- zeros_vec: a vector of floating-point zeroes
def zeros_vec : nat -> list real
def zeros_vec = const_vec 0.0

-- row_of_ones: a vector of real ones
def row_of_ones : nat -> list real
def row_of_ones = const_vec 1.0

-- mult_mat_vec : multiply a matrix of secrets and a point
def matrix_vec_mult_gen z m pt = map (dot_prod_gen z pt) m

-- mult_mat: product of row matrix and column matrix
def matrix_mult_gen z m0 m1 =
  let m1t = transpose m1 in
  map (fun v -> map (dot_prod_gen z v) m1t) m0 

-- part_ith a i l: l partitioned into the first i - elements, ith elt,
-- and the everything after element i. a is a default elt, which
-- should never be used.
def part_ith : nat -> t -> list t -> (list t) * t * (list t)
def part_ith a i l =
  let (first_i, rem) =
    eliml_nat i
      ([ ], l)
      (fun (front, tl) -> case tl
        { [ ] -> (front, tl) -- should never be used
        ; hd :: tl' -> (hd :: front, tl)
        }) in
  let (ith, tl) = case rem
    { [ ] -> (a, rem) -- should never be used
    ; b :: rem' -> (b, rem')
    } in
  (first_i, ith, tl)

-- squareMat m: matrix m coerced into a square matrix
def squareMat d m = rev_ls (snd
  (foldl m
    (0n, [ ])
    (fun rv (i, acc) -> (inc i, (part_ith d i rv) :: acc)) ) )

-- col_lt_to_row m: LT matrix m in col-major form, converted to
-- row-major form
def col_lt_to_row m = foldr m
  [ ]
  (fun (hd, bot) acc -> ([ ], hd) ::
    (zip_map (fun b (ls, rt) -> (b :: ls, rt)) bot acc) )

-- lt_lift d l: LT matrix l, lifted into a matrix by padding copies of
-- default element d
def lt_lift : t -> list (t * (list t)) -> list (list t)
def lt_lift d l = rev_ls (snd
  (foldl l
    ([ ], [ ])
    (fun (hd, tl) (buf, m) -> (d :: buf, (concat buf (hd :: tl)) :: m) ) ) )

-- diagonal_matrix_gen v: the diagonal matrix of vector v, with zero
-- elt z
def diagonal_matrix_gen z v = foldr v
  [ ]
  (fun x diag -> (x :: (const_vec z (len diag))) :: (map (cons z) diag))

-- END: library code

-- BEGIN: application-specific code

-- m : user parameter: number of constraint parties
def m : nat
def m = 8n

-- n : user parameter: dimension of the constraint system
def n : nat
def n = 8n

-- Ctr[m]: parties that bring the constraints
principal Ctr[8]

-- party that provides the cost vector:
principal Cost

-- party that gets the output:
principal Out

-- comps: the parties that do computation, Ctr and Cost
-- def comps = set(Ctr,Cost)
def comps = { Ctr, Cost }

-- shr_w_comp: share data with the parties performing computation
def shr_w_comp sender = shr_spdz sender comps

-- shr0, shr1: shares of constants that are often reused:
def shr0 = shr_w_comp { Cost } 0.0 
def shr1 = shr_w_comp { Cost } 1.0 
     
def eliml_sec_nat_ls sender = eliml_sec_nat mux_ls
  (shr_w_comp sender 0n) (shr_w_comp sender 1n) 

def dot_prod = dot_prod_gen shr0

-- matrix_mult: multiply matrices of SPDZ shares
def matrix_mult = matrix_mult_gen shr0 

-- matrix_vec_mult: multiply matrix and vector of SPDZ shares
def matrix_vec_mult = matrix_vec_mult_gen shr0 

def nOnes = row_of_ones n 

-- dimensions_of m: dimensions of matrix m
def dimensions_of m = case m
  { [ ] -> (0n, 0n)
  ; rv :: m' -> (inc (len m'), len rv)
  }

-- nz_prod z u l: the product of non-z entries in l, with
-- multiplicative unit u
def nz_prod z one l = foldr l
  one
  (fun x -> mult (mux (x == z) one x))

def nz_prod_vec = nz_prod shr0 shr1

def nz_prod_mat m = nz_prod_vec (map nz_prod_vec m)

-- diagonal_matrix v: diagonal matrix of vector of SPDZ shares v
def diagonal_matrix = diagonal_matrix_gen shr0

def zero_vec = const_vec shr0 

-- zero_pt: point of zero's
def zero_pt = zero_vec n

-- zero_mat: matrix of zeroes
def zero_mat n = elim_nat n
  [ ]
  (cons (zero_vec n))

-- range m n: the list of elements from m to n
def range m n =
  if n < m then [ ]
  else map (plus m)
    (elim_nat (n - m)
       [ 0n ]
       (fun rng -> snoc (len rng) rng) )

def matrix_get m (i, j) = get (get m i) j

def matrix_set m (i, j) v = setter m i (setter (get m i) j v)

-- Listing 9: Inverse of a lower triangular matrix
def matrix_inverse_lt l =
  let n = order l in -- order of L
  let l_inv = ref (zero_mat n) in -- n x n zero matrix
  -- PSL: can we add syntactic sugar for sequencing?
  -- PSL: can we add syntactic sugar for loops? In particular for
  -- loops with no accumulator?
  seq
  (iter (range 0n (n - 1n))
    (fun k ->
      -- For diagonal entries, take the reciprocal
      do l_inv := matrix_set !l_inv (k, k) (shr1 / (matrix_get !l_inv (k, k))) in

      -- For non-diagonal entries, solve L * L_inv = I
      iter (range (k + 1n) (n - 1n))
        (fun j ->
          let sum = ref shr0 in
          iter (range k (j - 1n))
            (fun i ->
              -- let _ = "inverse_lt: pre get into l at " + (j, i) in
              let _ = matrix_get l (j, i) in
              -- let _ = err "inverse_lt: pre get into l_inv" in
              let _ = matrix_get !l_inv (i, k) in
              do sum := !sum - (matrix_get l (j, i)) * (matrix_get !l_inv (i, k))
              in
              () ) ) ) )
  !l_inv

-- TODO: replace with list syntax

-- Listing 10: Cholesky decomposition of a positive definite Hermitian
-- matrix
def cholesky_decomposition m =
  -- Initialize variables
  let n = order m in -- order of m
  let l = ref (zero_mat n) in -- n x n zero matrix

  -- Calculate the top diagonal element of L
  do l := matrix_set !l (0n, 0n) (sqrt (matrix_get m (0n, 0n))) in

  -- Calculate the rest of the first column of L
  seq
  (iter (range 1n (n - 1n))
    (fun j ->
      do l := matrix_set !l (j, 0n) ((matrix_get m (j, 0n)) / (matrix_get !l (0n, 0n)) ) in
      () ) )

  -- Iterate through the remaining columns
  (seq
   (iter (range 1n (n - 1n))
    (fun i ->
      -- First calculate the diagonal element for this column
      let sum = ref shr0 in
      seq
      (iter (range 0n (i - 1n))
        (fun j ->
          do sum := !sum + (matrix_get !l (i, j)) * (matrix_get !l (i, j)) in
          () ) )

      (do l := matrix_set !l (i, i) (sqrt ((matrix_get m (i, i)) - !sum)) in

      -- Now fill in the remaining entries in this column
      if (i < n - 1n) then
        (iter (range (i + 1n) (n - 1n))
          (fun j ->
            do sum := shr0 in
            iter (range 0n (i - 1n))
              (fun k ->
                do sum := !sum + (matrix_get !l (i, k)) * (matrix_get !l (j, k)) in
                () ) ) )
      else () ) ) )
    !l)

-- Listing 8: Inverse of a positive definite Hermitian matrix
def matrix_inverse_pdh : num -> matrix -> matrix
def matrix_inverse_pdh m =
  let l = cholesky_decomposition m in
  let l_inv = matrix_inverse_lt l in -- Invert the lower-triangular matrix
  let m_inv = matrix_mult (transpose l_inv) l_inv in
  m_inv

-- Listing 6: Iteration for Karmarkar's Algorithm
def karmarkar_iteration initial_point a c =
  let (m, n) = dimensions_of a in
  -- D is a matrix of zeros with the values of initial_point on the
  -- diagonal
  -- Dimensions of D: n x n
  let d = diagonal_matrix initial_point in
  -- Dimensions of cprime: n x 1
  let cprime = matrix_vec_mult d c in
  -- Dimensions of AD: m x n
  let ad = matrix_mult a d in

  -- Construct B
  -- Dimensions of B: (m + 1) x n
  let b = snoc (row_of_ones n) ad in -- append a row of ones onto AD

  -- Dimensions of BBT: (m + 1) x (m + 1)
  let bbt = matrix_mult b (transpose b) in

  -- Dimensions of BBTInv: (m + 1) x (m + 1)
  let bbtinv = matrix_inverse_pdh bbt in

  -- Project C onto B's nullspace
  -- Dimensions of cp: n x 1
  let cp = minus_vecs cprime
    (matrix_vec_mult (transpose b)
      (matrix_vec_mult bbtinv
        (matrix_vec_mult b cprime) ) ) in

  -- Calculate a unit vector of cp
  -- Dimensions of unitcp: n x 1
  let unit_cp =
    mux_ls (eq_vecs cp zero_pt) -- If cp is the zero vector
      -- If cp is the zero vector, assign it to be 0
      zero_pt
      (div_vec zero_pt (l2norm shr0 cp)) in

  -- Take a step of 1/3n in the direction of -cp, row_of_ones(n)/n is
  -- the "transformed" initial point
  -- Dimensions of bprime: n x 1
  let bprime = minus_vecs
    (div_vec (row_of_ones n) (to_flt n))
    (scalar_vec_mult (1.0 / (3.0 * (to_flt n))) unit_cp) in

  -- Transform the point back
  -- Dimensions of b: n x 1
  let b = div_vec (matrix_vec_mult d bprime)
    (dot_prod (row_of_ones n) (matrix_vec_mult d bprime)) in
  b

-- Listing 7: Loop for Karmarkar's Algorithm
def karmarkar_loop a c =
  let (m, n) = dimensions_of a in
  -- Epsilon is the stopping condition. This value should be close to
  -- 0, so we choose 10^(-8)
  let epsilon = 10.0 ^ -8.0 in

  -- x is our initial point
  let x = div_vec (row_of_ones n) (to_flt n) in

  -- product of non-zero entries in c and A
  let p = (nz_prod_vec c) * (nz_prod_mat a) in
  let l = (m + 1n) * n +
    (magn (ceil (log_2_real (abs_val_real p)))) +
    n * (magn (ceil (log_2_real (to_flt n)))) in
  let max_iterations = 12n * n * l in
  let max_iterations = 156n in -- DEBUG: actual max iterations:
  let max_iterations = 1n in -- DEBUG:

  -- If this initial point is an optimal solution, return
  -- DEBUG for resource estimation:
  mux_ls ((dot_prod c x) < epsilon)
    x
  -- simple one that's close enough for resource estimation
  -- (elim_nat max_iterations
  --   x
  --   (fun x -> 
  --     let x' = karmarkar_iteration x a c in

  --     -- if we are within the stopping condition in the current
  --     -- iteration, return
  --     let g = 
  --       ((((dot_prod c x) - (dot_prod c x')) /
  --          (max_spdz shr1 (dot_prod c x)) ) < epsilon ) in
  --     x' ) )

  -- actual version that represents early return
  (eliml_sec_nat_ls { Cost } max_iterations
    x
    (fun x -> 
      let x' = karmarkar_iteration x a c in

      -- if we are within the stopping condition in the current
      -- iteration, return
      let g = shr0 == shr0 in
        -- DEBUG:
        -- ((((dot_prod c x) - (dot_prod c x')) /
        --      (max_spdz shr1 (dot_prod c x)) ) < epsilon ) in
      if_then_ls g x'
      x') )

-- main: entry point; Ctr, Cost read inputs and run the algorithm,
-- distributes results to Out
def main : unit ->{ inp : Ctr, Cost; rev : Out } (list out_sec)
def main () =
  -- read_vec: reads an input vector on a principal's machine
  -- let read_vec = fun () -> read (list flt) "in.txt" in
  let read_vec = fun () -> [ 1.0 ; 2.0; 3.0; 4.0; 5.0; 6.0; 7.0; 8.0 ] in -- DEBUG:

  -- FANCY MPC: Ctr and Cost send the data in the list to Out. This
  -- may change if the PSL model of isec's changes as a result of
  -- issue #31
  let soln = par { Ctr, Cost, Out } (map
    (reveal_prins { Out })
    -- Cost reveals the structure of the list to out:
    (send_ls { Cost } { Ctr, Cost, Out }
      -- Ctr and Cost compute the solution point:
      (par { Ctr, Cost } karmarkar_loop
        -- read in the matrix of constraints and share them
        (fold-f
          [ ]
          (fun Q ctr -> cons (map (shr_w_comp { Q }) (send_ls { Q } comps ctr)))
          (solo { Ctr } as c in read_vec ()) )
        -- read in the vector of costs and share them
        (map (shr_w_comp { Cost })
          (send_ls { Cost } comps (par { Cost } read_vec ())) ) ) ) ) in
  -- Ctr and Cost forget the structure of the solution
  par { Out } send_ls { Out } { Out } soln
