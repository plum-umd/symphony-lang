-- BEGIN definitions appropriate for general-purpose library modules

-- err msg: throw an error message
def err msg = msg + 0

-- BEGIN library for general functions:

def apply f a = f a

def compose : (t0 -> t1) -> (t1 -> t2) -> (t0 -> t2)
def compose f g x = g (f x)

def const : t -> u -> t
def const x y = x

def flip f x y = f y x

def id : t -> t
def id x = x

def uncurry : (a -> b -> c) -> (a * b -> c)
def uncurry f (a, b) = f a b

def pair x y = (x, y)

def fst (x, y) = x

def snd (x, y) = y

def elim_sum f g x = case x
  { L x' -> f x'
  ; R y' -> g y'
  }

-- BEGIN library for security-sensitive operations:

def ite guard tc fc = if guard then tc else fc

def mux guard tc fc = guard ? tc ◇ fc

def pdecons a f xy = case xy
  { ⟪⟫ → a
  ; ⟪Q.x⟫⧺xy′ → f Q x 
  }

def pfold : ∀ A:☆,P:ℙ. A → ((Q:ℙ | Q⊆P) → ℤ{Q} → A → A) → ℤ{isec:P} →{sec:P} A
def pfold i f xy = case xy
  { ⟪⟫ → i
  ; ⟪Q.x⟫⧺xy′ → f Q x (pfold i f xy′)
  }

def reveal_ls P l = 
  case (reveal{ P } l)
  { [ ] -> [ ]
  ; x :: l' -> x :: (reveal_ls P l') 
  }

def reveal_prins P x = reveal{ P } x

-- shr_spdz: a first-order operation that shares over SPDZ
def shr_spdz P x = share{ spdz : P } x

-- BEGIN library for Boolean

-- and: non-infix Boolean conjunction
def and b0 b1 = b0 && b1

def not b = !b

-- BEGIN library for types with equality:

-- eq: non-infix equality test
def eq x y = x == y

-- BEGIN library for a numeric typeclass

-- plus: non-infix sum
def plus m n = m + n

-- minus: non-infix subtraction
def minus m n = m - n

-- mult: non-infix multiplication 
def mult m n = m * n

-- div: non-infix division
def div m n = m / n

-- exp: non-infix exponentiation
def exp m n = m ^ n

-- square: multiple a number with itself:
def square a = a * a

def max muxer a b = muxer (a <= b) b a

def max_spdz = mux

def abs_val_real a = max mux a (-1.0 * a)

-- TODO: define these properly
def log_2_real = id

def magn x = 1n

-- BEGIN library for nats:

-- inc n: increment of nat n
def inc : nat -> nat
def inc = plus 1n

-- def inc n = 1n + n

-- dec n: decrement of nat n
def dec : nat -> nat
def dec n = n - 1n

-- elim_nat: form for eliminating (folding over) nats
def elim_nat : nat -> t -> (t -> t) -> t
def elim_nat m z s = 
  if m ≡ 0n then z
  else s (elim_nat (dec m) z s)

-- eliml_nat: analog of fold right, for nats
-- PSL: add syntactic sugar for this?
def eliml_nat : nat -> t -> (t -> t) -> t
def eliml_nat n z s = (elim_nat n id (compose s)) z

-- monad for building a value and a continuation. Type is
-- cont a b = (a -> a, b)
-- where cont a is a monad.

-- monadic return:
def cont_return a = (id, a)

-- monadic bind:
def cont_bind (f, a) g =
  let (f0, b) = g a in
  (compose f0 f, b)

def cont_join (f, (g, a)) = (compose f g, a)

def cont_seq (f, a) v = cont_bind (f, a) (const v)

-- cont_run : cont a a -> a: get an a value:
def cont_run = uncurry apply

-- if_then guard tc: an if-then branch 
def if_then guard tc rest = (mux guard tc, rest)

-- eliml_sec_nat: eliminate a secure nat. Just does this by iterating
-- up to some bound.
def max_nat = 0n
def eliml_sec_nat muxer encz encone n z s = cont_run (snd
  (eliml_nat max_nat
    (n, cont_return z)
    (fun (n', v) ->
      (n' - encone, cont_join ((muxer (n' == encz) v), s v)) ) ) )

-- nat_log: logarithm over nats. Diverges at 0n.
def nat_log : nat -> nat -> nat
def nat_log b n =
  if n == 1n then 0n
  else inc (nat_log b (n / b))

def ceil_fn f f_inv n =
  let n' = f n in
  n' + (if n == f_inv n' then 0n else 1n)

def log_2_ceil = ceil_fn (nat_log 2n) (exp 2n)

-- BEGIN library for floats:

-- sqrt: implementation of the Babylonian method for computing sqrt
def sqrt_steps = 5n
def babylonian_sqrt x = eliml_nat sqrt_steps
  1.0
  (fun s -> (s + x / s) / 2.0)

-- BEGIN library for list:

-- cons: non-infix list cons
def cons : t -> list t -> list t
def cons x l = x :: l

-- const_vec t a n: a vector of constant a of size n
def const_vec : t -> nat -> list t
def const_vec c n = elim_nat n [ ] (cons c)

-- foldr: right fold, the list eliminator
def foldr : list t -> acc -> (t -> acc -> acc) -> acc
def foldr l acc f = case l
  { [ ] -> acc
  ; x :: l' -> f x (foldr l' acc f)
  } 

-- filter test l: l, filtered down to elements that satisfy test
def filter test l = foldr l
  [ ]
  (fun x rest -> if test x then x :: rest else rest)

-- foldr_tl: right fold with access to the tail of the list
def foldr_tl : list t -> acc -> (t -> list t -> acc -> acc) -> acc
def foldr_tl l i f = snd
  (foldr l ([ ], i) (fun x (l', b) -> (x :: l', f x l' b)))

-- decons_ls: first-order case syntax 
def decons_ls : list t -> u -> (t -> list t -> u) -> u
def decons_ls l a0 f = case l
  { [ ] -> a0
  ; x :: l' -> f x l'
  }

-- foldl: left fold
-- PSL: add syntactic sugar for this?
def foldl : list t -> acc -> (t -> acc -> acc) -> acc
def foldl l acc0 f = (foldr l id (fun x acc -> compose acc (f x))) acc0

-- concat l0 l1: concatenation of l0 and l1
def concat : list t -> list t -> list t
def concat l0 l1 = foldr l0 l1 cons

-- len l: length of list l
def len : list t -> nat
def len l = foldr l 0n (const inc)

-- map: map operation for the list functor
def map : (t -> u) -> list t -> list u
def map f l = foldr l [ ] (compose f cons)

-- rev_ls l: the reverse of list l
def rev_ls : list t -> list t
def rev_ls l = foldl l [ ] cons

def snoc : t -> list t -> list t
def snoc x l = concat l [ x ]

-- zip_lists pt0 pt1: the zip of points p0 and p1
def zip_lists : list t -> list u -> list (t * u)
def zip_lists l0 l1 =
  (foldr l0
    (const [ ])
    (fun x z0 l -> case l
      { [ ] -> [ ]
      ; y :: l' -> (x, y) :: z0 l'
      }) )
    l1

def zip_map : (t -> u -> v) -> list t -> list u -> list v
def zip_map f l0 l1 = map (uncurry f) (zip_lists l0 l1)

-- transpose: shift matrix between row major and column major order
def transpose : list (list t) -> list (list t)
def transpose m = foldr m
  (const_vec [ ]
    (case m
     { [ ] -> 0n
     ; v :: m' -> len v
     }) )
  (zip_map cons)

def all_true : list bool -> bool
def all_true l = foldr l true and

-- is_const_vec c v: test if v is the vector of c's
def is_const_vec c v = all_true (map (eq c) v)

-- mux_ls: multiplex over a pair of lists:
def mux_ls guard l0 l1 = zip_map (mux guard) l0 l1

def eliml_sec_nat_ls = eliml_sec_nat mux_ls
  (shr_w_comp 0n) (shr_w_comp 1n) 

-- prod: the product over a list of numerics
def prod v one = foldr v one mult

-- sum: the sum over a list of numerics
def sum v z = foldr v z plus

-- dot_prod: take the dot product of two points
def dot_prod z p0 p1 = sum (zip_map mult p0 p1) z
def dot_prod_spdz = dot_prod shr0

-- pt_diff: subtract one point from another
def vec_diff : point -> point -> point
def vec_diff v0 v1 = zip_map minus v0 v1 

-- vec_div: divide a vector of reals by a constant
def vec_div : real -> list real -> list real
def vec_div a = map (flip div a)

-- l2norm z v: the L2 norm of a vector of numerics with zero element z
def l2norm : point -> comp_shr
def l2norm z v = babylonian_sqrt (sum (map square v) z)

-- zeros_vec: a vector of floating-point zeroes
def zeros_vec : nat -> list real
def zeros_vec = const_vec 0.0

-- row_of_ones: a vector of real ones
def row_of_ones : nat -> list real
def row_of_ones = const_vec 1.0

-- mult_mat_vec : multiply a matrix of secrets and a point
def mult_mat_vec : num -> matrix -> point -> point
def mult_mat_vec z m pt = map (dot_prod z pt) m

-- mult_mat: product of row matrix and column matrix
def mult_mat z m0 m1 = map (fun v -> map (dot_prod z v) m1) m0 

-- part_ith a i l: l partitioned into the first i - elements, ith elt,
-- and the everything after element i. a is a default elt, which
-- should never be used.
def part_ith : nat -> t -> list t -> (list t) * t * (list t)
def part_ith a i l =
  let (first_i, rem) =
    eliml_nat i
      ([ ], l)
      (fun (front, tl) -> case tl
        { [ ] -> (front, tl) -- should never be used
        ; hd :: tl' -> (hd :: front, tl)
        }) in
  let (ith, tl) = case rem
    { [ ] -> (a, rem) -- should never be used
    ; b :: rem' -> (b, rem')
    } in
  (first_i, ith, tl)

-- squareMat m: matrix m coerced into a square matrix
def squareMat d m = rev_ls (snd
  (foldl m
    (0n, [ ])
    (fun rv (i, acc) -> (inc i, (part_ith d i rv) :: acc)) ) )

-- cholesky m: the Cholesky decomposition of matrix m, in column-major
-- order, computed using the Cholesky-Crout algorithm
def cholesky : sqMat -> ltMat
def cholesky z m = fst
  (foldl m -- fold over each column in the matrix,
    ([ ], [ ])
    (fun (top, diag, bot) (tri, base) ->
      -- deconstruct the maintained base box 
      let (jth_row', base') = case base
        { [ ] -> ([ ], const_vec [ ] (len bot))
        ; x :: tl -> (x, tl)
        } in
      -- diag': the diagonal elt of the solution
      let diag' = babylonian_sqrt (diag - (dot_prod z jth_row' jth_row')) in
      -- tri': the upper triangle, extended
      let tri' = snoc (diag', [ ])
        (map (fun ((d, tl), jth_elt) -> (d, snoc jth_elt tl))
          (zip_lists tri jth_row')) in
      -- the base box, extended
      let base'' = map 
        (fun (rv', elt) ->
          snoc ((diag - (dot_prod z rv' jth_row')) / diag') rv')
        (zip_lists base' bot) in
      (tri', base'')) )

-- col_lt_to_row m: LT matrix m in col-major form, converted to
-- row-major form
def col_lt_to_row m = foldr m
  [ ]
  (fun (hd, bot) acc -> ([ ], hd) ::
    (zip_map (fun b (ls, rt) -> (b :: ls, rt)) bot acc) )

-- lt_inverse m: the inverse of LT matrix m:
def lt_inverse : ltMat -> ltMat
def lt_inverse z l =
  let add_inv = fun x -> z - x in
  foldr_tl l -- fold over the LT matrix
    [ ]
    (fun (d, cv) tl -> snoc
      -- fold over the tail of the current column and the rest of the matrix
      (foldl (zip_lists cv (col_lt_to_row tl))
        (d, [ ])
        (fun (x, (rv, y)) (hd', tl') ->
          let dprod = dot_prod z (snoc y rv) (hd' :: tl') in
          (hd', snoc ((add_inv dprod) / y) tl') ) ) )

-- lt_lift d l: LT matrix l, lifted into a matrix by padding copies of
-- default element d
def lt_lift : t -> list (t * (list t)) -> list (list t)
def lt_lift d l = rev_ls (snd
  (foldl l
    ([ ], [ ])
    (fun (hd, tl) (buf, m) -> (d :: buf, (concat buf (hd :: tl)) :: m) ) ) )

-- inverse z m: the inverse matrix of m over numeric type with zero
-- element z
def matrix_inverse_pdh : num -> matrix -> matrix
def matrix_inverse_pdh z m =
  let l_inv = lt_lift z
    (lt_inverse z (cholesky z (squareMat z (transpose m)))) in
  mult_mat z (transpose l_inv) l_inv

-- mult_diag_vec d v: product of diagonal matrix over vector d, and v
def mult_diag_vec : point -> point -> point
def mult_diag_vec = zip_map mult 

-- END: library code

-- BEGIN: application-specific code

-- m : user parameter: number of constraint parties
def m : nat
def m = 2n

-- n : user parameter: dimension of the constraint system
def n : nat
def n = 2n

-- Ctr[m]: parties that bring the constraints
principal Ctr[2]

-- party that provides the cost vector:
principal Cost

-- party that gets the output:
principal Out

-- comps: the parties that do computation, Ctr and Cost
def comps = set(Ctr,Cost)

-- shr_w_ctrs: share data with the parties performing computation
def shr_w_ctrs = shr_spdz set(Ctr)

-- shr_w_comp: share data with the parties performing computation
def shr_w_comp = shr_spdz comps

-- shr0, shr1: shares of constants that are often reused:
def shr0 = shr_w_comp 0.0 in
def shr1 = shr_w_comp 1.0 in
     
def nOnes = row_of_ones n 

-- dimensions_of m: the number of rows and vectors in m
def dimensions_of m = case m
  { [ ] -> (0, 0)
  ; rv :: m' -> (inc (len m'), len rv)
  }

-- TODO: define
def diagonal_matrix pt = [ ]

-- karmarkar_iter: an iteration of Karmarkar's algorithm
def karmarkar_iteration initial_point a c =
  let (m, n) = dimensions_of a in
  -- D is a matrix of zeros with the values of initial_point on the
  -- diagonal
  -- Dimensions of D: n x n
  let d = diagonal_matrix initial_point in
  -- Dimensions of cprime: n x 1
  let cprime = mult_mat_vec_spdz d c in
  -- Dimensions of AD: m x n
  let ad = mult_mat_spdz a d in

  -- Construct B
  -- Dimensions of B: (m + 1) x n
  let b = concat ad [ row_of_ones n ] in -- append a row of ones onto AD

  -- Dimensions of BBT: (m + 1) x (m + 1)
  let bbt = mult_mat_spdz b (transpose b) in
  -- Dimensions of BBTInv: (m + 1) x (m + 1)
  let bbtinv = matrix_inverse_pdh bbt in

  -- vector and matrix operations instantiated to SPDZ protocol
  -- session
  let invert_spdz = inverse shr0 in
  let mult_spdz_mats = mult_mat shr0 in
  let mult_spdz_mat_vec = mult_mat_vec shr0 in

  let unit_cp =
    -- project c onto b's nullspace
    let cp =
      -- c': product of diagonal of point and c vector
      let c' = mult_diag_vec initial_point c in
      -- FANCY MPC:
      -- b: matrix of shares of constraint coefficients
      let b = concat a [ nOnes ] in
      vec_diff
        c'
        (mult_spdz_mat_vec (transpose b)
          (mult_spdz_mat_vec (invert_spdz (mult_spdz_mats b b))
            (mult_spdz_mat_vec b c') ) ) in

    -- FANCY MPC: compute list of shares from shared Boolean
    let is_const = is_const_vec shr0 cp in
    zip_map (mux is_const)
      (const_vec shr0 n) (vec_div (l2norm shr0 cp) cp)

  -- take a step of 1/3 n in the direction of cp
  let b' = vec_diff
    (map shr_w_comp (vec_div (to_flt n) nOnes))
    (vec_div (shr_w_comp (to_flt (3n * n))) unit_cp) in

  let db' = mult_diag_vec initial_point b' in
  vec_div (dot_prod shr0 (map shr_w_comp nOnes) db') db'

-- nzProd a: the product of all non-zero entries in a vector:
def nz_prod : list (real{ ssec : p }) -> real{ ssec : p }
def nz_prod z one l = prod (filter (eq z) l) one

def nz_prod_vec_spdz = nz_prod shr0 shr1

def nz_prod_mat_spdz m = foldr m
  shr1
  (fun rv -> mult (nz_prod_vec_spdz rv))

-- karmarkar_loop: Karmarkar's algorithm, main loop: runs an iterative
-- algorithm up to some bound computed from private inputs
def karmarkar_loop a c =
  let (m, n) = dimensions_of a in
  -- Epsilon is the stopping condition. This value should be close to
  -- 0, so we choose 10^(-8)
  let epsilon = 10.0 ^ -8.0 in

  -- x is our initial point
  let x = map shr_w_comp (vec_div (to_flt n) (row_of_ones n)) in

  let max_iterations = 
    -- product of non-zero entries in c and A
    let p = (nz_prod_vec_spdz c) * (nz_prod_mat_spdz a) in
    let l = (m + 1n) * n +
      (magn (ceil (log_2_real (abs_val_real p)))) +
      n * (magn (ceil (log_2_real (to_flt n)))) in
    12n * n * l in
  let max_iterations = shr_w_comp 1n in -- TODO: remove, used for debugging

  -- If this initial point is an optimal solution, return
  mux_ls ((dot_prod_spdz c x) < epsilon)
    x
  (eliml_sec_nat_ls max_iterations
    x
    (fun x -> 
      let x' = karmarkar_iteration x a c in

      -- if we are within the stopping condition in the current
      -- iteration, return
      if_then 
        ((((dot_prod_spdz c x) - (dot_prod_spdz c x')) /
           (max_spdz shr1 (dot_prod_spdz c x)) ) < epsilon )
        x'
      x') )

-- main: entry point; Ctr, Cost read inputs and run the algorithm,
-- distributes results to Out
def main : unit ->{ inp : Ctr, Cost; rev : Out } (list out_sec)
def main () =
  -- read_vec: reads an input vector on a principal's machine
  let read_vec = fun () -> read (list flt) "in.txt" in
  
  -- FANCY MPC: Ctr and Cost send the data in the list to Out. This
  -- may change if the PSL model of isec's changes as a result of
  -- issue #31
  let soln = { par : Ctr, Cost, Out } (map
    (reveal_prins set(Out))
    -- Ctr and Cost reveal the list structure of the point to Out:
    (reveal_ls set(Ctr,Cost,Out)
      -- Ctr and Cost compute the solution point:
      ({ par : Ctr, Cost } karmarkar_loop
        -- read in the matrix of constraints and share them
        (pfold 
          [ ]
          (fun Q ctr -> cons
            (mult_diag_vec pt
            (map shr_w_comp (reveal_ls comps ctr)) ) )
          ({ par : Ctr } read_vec ()) )
        -- read in the vector of costs and share them
        (map shr_w_comp
          (reveal_ls comps ({ par : Cost } read_vec ())) ) ) ) ) in
  -- Ctr and Cost forget the structure of the solution
  { par : Out } reveal_ls set(Out) soln
