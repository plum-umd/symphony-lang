principal A

// https://github.com/samee/obliv-c/blob/master/test/oblivc/psi/waksman.c#L5
def waksmanSwapCount n =
  if n <= 1n then
    0n
  else
    if n == 2n then
      1n
    else
      (n - 1n) + (waksmanSwapCount (n / 2n)) + (waksmanSwapCount ((n + 1n) / 2n))

def waksmanSwitches arr output offset =
  let n = size arr in

  let inv        = array[n] ⊥ in
  let arr1       = array[n / 2n] ⊥ in
  let arr2       = array[(n + 1n) / 2n] ⊥ in
  let outputTail = array[(n - 1n) / 2n] ⊥ in
  let isSet      = array[n] false in

  let initializeInv = fun [initializeInv] i ->
    if i < n then
      let _ = inv.(arr.i) <- i in ()
    else ()
  in
  let _ = initializeInv 0n in

  let mainLoop = fun [mainLoop] i ->
    if 0 < i then
      let _ =
        if not (isSet.i) then
          let innerLoop = fun [innerLoop] j ->
            ...
          in innerLoop i
        else ()
      in
      mainLoop (i - 1n)
    else ()
  in
  let _ = mainLoop n in

  let _ used := !used + (waksmanSwitches arr1 (n / 2n)        output !used) in
  let _ used := !used + (waksmanSwitches arr2 ((n + 1n) / 2n) output !used) in

  let assignOutput = fun [assignOutput] i ->
    if i < ((n - 1n) / 2n) then
      let u = !used in
      let _ = output.u <- outputTail.i in
      let _ = used := u + 1n in
      assignOutput (i + 1n)
    else ()
  in
  let _ = assignOutput 0n in

  !used

def main () = par {A}
  let n   = waksmanSwapCount 10n in
  let out = array[n] false in
  waksmanSwitches (permutation {A} 10n) (