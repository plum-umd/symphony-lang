principal A B

def hammingDist : ((nat[gmw]@{A,B})[{A, B}]@{A,B}  -> (nat[gmw]@{A,B})[{A, B}]@{A,B} ->nat[gmw]@{A,B}@{A,B} )@all
def hammingDist bs0 bs1 =
  let len = size bs0 in
  let hammingDistRec = (fun [hammingDistRec] i distance →
    if i == len then
      distance
    else
      let inc = mux if bs0.i == bs1.i then 0n else 1n in
      hammingDistRec (i + 1n) (distance + inc)): (nat@{A,B} -> nat[gmw]@{A,B}@{A,B} ->nat[gmw]@{A,B}@{A,B} )@all
  in hammingDistRec 0n 0n

def main () = par {A,B}
  let inputA = par {A} read (array {A} ℕ) from "hamming-1k.txt" in
  let inputB = par {B} read (array {B} ℕ) from "hamming-1k.txt" in

  let shareA = share [gmw, array {A} ℕ : {A} → {A,B}] inputA in
  let shareB = share [gmw, array {B} ℕ : {B} → {A,B}] inputB in

  reveal [gmw, ℕ : {A,B} → {A}] (hammingDist shareA shareB)