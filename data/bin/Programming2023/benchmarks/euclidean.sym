principal A B

def steps : nat@{A,B}
def steps = par {A, B} 10n

def maxInt : int@{A, B}
def maxInt = par {A, B} (2 ^ 31n) - 1

def root : (int[gmw]@{A, B}@{A, B} -> {{A, B}} int[gmw]@{A, B}@{A, B})@{A, B}
def root x =
  let rootRec = (fun [rootRec] i guess ->
    if i == 0n then
      guess
    else
      rootRec (i - 1n) ((guess + (x / guess)) / 2)):(nat@{A, B} -> {{A, B}} (int[gmw]@{A, B}@{A, B} -> {{A, B}} int[gmw]@{A, B}@{A, B})@{A, B})@{A, B}
  in
  rootRec steps 1

def square : (int[gmw]@{A, B}@{A, B} -> {{A, B}} int[gmw]@{A, B}@{A, B})@{A, B}
def square x = x * x

def euclideanDist: ((int[gmw]@{A, B}@{A, B} × int[gmw]@{A, B}@{A, B})@{A, B} -> {{A, B}}  ((int[gmw]@{A, B}@{A, B} × int[gmw]@{A, B}@{A, B})@{A, B} -> {{A, B}} int[gmw]@{A, B}@{A, B})@{A, B})@{A, B}
def euclideanDist (a0, a1) (b0, b1) = root ((square (a0 - b0)) + (square (a1 - b1)))

def minEuclideanDist : ( (array{{A, B}}((int[gmw]@{A, B}@{A, B} × int[gmw]@{A, B}@{A, B} )@{A, B}))@{A, B}  -> {{A, B}} ((int[gmw]@{A, B}@{A, B} × int[gmw]@{A, B}@{A, B} )@{A, B} -> {{A, B}} (int[gmw]@{A,B})@{A,B})@{A, B})@{A,B}
def minEuclideanDist vs pt =
  let len = size vs in
  let minRec = (fun [minRec] i min ->
    if i == len then
      min
    else
      let dist = euclideanDist vs.i pt in
      minRec (i + 1n) (mux if dist <= min then dist else min)): (nat@{A,B} -> {{A,B}} (int[gmw]@{A,B}@{A,B} -> {{A, B}} int[gmw]@{A,B}@{A,B})@{A,B} )@{A,B}
  in
  minRec 0n maxInt

def main : (unit@all -> {all} int@{A, B})@all
def main () = par {A,B}
  let inputA = par {A} read (array {A} (ℤ × ℤ)) from "euclidean-5.txt" in
  let inputB = par {B} read (ℤ × ℤ) from "euclidean-5.txt" in

  let shareA = share [gmw, array {A} (ℤ × ℤ) : {A} → {A,B}] inputA in
  let shareB = share [gmw, ℤ × ℤ         : {B} → {A,B}] inputB in

  reveal [gmw, ℤ : {A,B} → {A}] minEuclideanDist shareA shareB
