principal A B

-- euclidean distance
def dist (a0, a1) (b0, b1) = babylonian-sqrt-int
  ((square (a0 - b0)) + (square (a1 - b1)))

-- omin l: minimum value in non-empty list l
def omin l = elim-list l (head _|_ l) min-muxable

def main () = par {{A,B}}
  let inputA = par {{A}} snd (read (ℕ#32 × list[{1}] (ℤ#32 × ℤ#32)) from "bio-matching-input-{1}.txt") in
  let inputB = par {{B}} read (ℤ#32 × ℤ#32) from "bio-matching-input-{1}.txt" in

  let shareA = share [{0}, list[{1}] (ℤ#32 × ℤ#32) : A → {{A,B}}] inputA in
  let shareB = share [{0}, (ℤ#32 × ℤ#32) : B → {{A,B}}] inputB in

  reveal [{0}, ℤ : {{A,B}} → A] (omin (map (dist shareB) shareA))
