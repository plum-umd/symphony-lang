-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package uvmhs
@version 0.0.0.0

module UVMHS.Core.Classes.Monoid
class Null a
null :: Null a => a
class Append a
(‚ß∫) :: Append a => a -> a -> a
infixl 4 ‚ß∫
class (Null a, Append a) => Monoid a
class Unit a
unit :: Unit a => a
class Cross a
(‚®≥) :: Cross a => a -> a -> a
class (Monoid a, Unit a, Cross a) => Prodoid a
class Eps a
eps :: Eps a => a
class Seq a
(‚ñ∑) :: Seq a => a -> a -> a
class (Monoid a, Eps a, Seq a) => Seqoid a
opt :: (Append a, Eps a) => a -> a
class Star a
star :: Star a => a -> a
class (Seqoid a, Star a) => Kleene a
oom :: Kleene a => a -> a

module UVMHS.Core.Init
class CHS a b | b -> a
tohs :: CHS a b => a -> b
frhs :: CHS a b => b -> a
data Ex_C (c :: k -> Constraint) (t :: k -> ‚òÖ) :: ‚òÖ
[Ex_C] :: forall (c :: k -> Constraint) (t :: k -> ‚òÖ) (a :: k). c a => t a -> Ex_C c t
data Ex (t :: k -> ‚òÖ) :: ‚òÖ
[Ex] :: forall (t :: k -> ‚òÖ) (a :: k). t a -> Ex t
data W (c :: Constraint)
[W] :: c => W c
data Nat
Z :: Nat
S :: Nat -> Nat
data P (a :: k)
P :: P
data (‚âü) (a :: k) (b :: k) :: ‚òÖ
[Refl] :: forall (a :: k). a ‚âü a
data Lazy a
Lazy :: ~a -> Lazy a
[unLazy] :: Lazy a -> ~a
newtype k ‚á∞ v
ùê∑ :: Map k v -> (‚á∞) k v
[unùê∑] :: (‚á∞) k v -> Map k v
infixr 2 ‚á∞
newtype ùëÉ a
ùëÉ :: Set a -> ùëÉ a
[unùëÉ] :: ùëÉ a -> Set a
newtype ùëÑ a
ùëÑ :: Seq a -> ùëÑ a
[unùëÑ] :: ùëÑ a -> Seq a
data ùëÜ a
[ùëÜ] :: forall s a. s -> (s -> ùëÇ (a ‚àß s)) -> ùëÜ a
newtype ùêº a
ùêº :: (forall b. (a -> b -> b) -> b -> b) -> ùêº a
[unùêº] :: ùêº a -> forall b. (a -> b -> b) -> b -> b
data ùêø a
Nil :: ùêø a
(:&) :: a -> ùêø a -> ùêø a
infixr 8 :&
data ùëÇ a
None :: ùëÇ a
Some :: a -> ùëÇ a
data a ‚àß b
(:*) :: a -> b -> (‚àß) a b
infixl 5 ‚àß
infixl 1 :*
data a ‚à® b
Inl :: a -> (‚à®) a b
Inr :: b -> (‚à®) a b
infixl 4 ‚à®
type ùîπ = Bool
data Void
type ùïä = Text
type ‚ÑÇ = Char
data ‚Ñù·¥æ
Natural :: ‚Ñï -> ‚Ñù·¥æ
Rational·¥æ :: ‚Ñö·¥æ -> ‚Ñù·¥æ
Double·¥æ :: ùîª·¥æ -> ‚Ñù·¥æ
data ‚Ñù
Integer :: ‚Ñ§ -> ‚Ñù
Rational :: ‚Ñö -> ‚Ñù
Double :: ùîª -> ‚Ñù
newtype ùîª·¥æ
ùîª·¥æ :: ùîª -> ùîª·¥æ
[unùîª·¥æ] :: ùîª·¥æ -> ùîª
type ùîª = Double
type ‚Ñö·¥æ = Ratio ‚Ñï
type ‚Ñö = Rational
type ‚Ñ§8 = Int8
type ‚Ñ§16 = Int16
type ‚Ñ§32 = Int32
type ‚Ñ§64 = Int64
type ‚Ñ§ = Integer
type ‚Ñï8 = Word8
type ‚Ñï16 = Word16
type ‚Ñï32 = Word32
type ‚Ñï64 = Word64
type ‚Ñï = Natural
type STACK = HasCallStack
with :: W c -> (c => a) -> a
unpack :: forall (t :: k -> ‚òÖ) (b :: ‚òÖ). Ex t -> (forall (a :: k). t a -> b) -> b
unpack_C :: forall (k :: ‚òÖ) (c :: k -> Constraint) (t :: k -> ‚òÖ) (b :: ‚òÖ). Ex_C c t -> (forall (a :: k). c a => t a -> b) -> b
zabs :: ‚Ñ§ -> ‚Ñï
qabs :: ‚Ñö -> ‚Ñö·¥æ
numer :: ‚Ñö -> ‚Ñ§
denom :: ‚Ñö -> ‚Ñï
numer·¥æ :: ‚Ñö·¥æ -> ‚Ñï
denom·¥æ :: ‚Ñö·¥æ -> ‚Ñï
truncate :: ùîª -> ‚Ñ§
ceiling :: ùîª -> ‚Ñ§
floor :: ùîª -> ‚Ñ§
truncate·¥æ :: ùîª·¥æ -> ‚Ñï
ceiling·¥æ :: ùîª·¥æ -> ‚Ñï
floor·¥æ :: ùîª·¥æ -> ‚Ñï
fromString :: [‚ÑÇ] -> ùïä
fromInteger :: ‚Ñ§ -> ‚Ñï
negate :: ‚Ñï -> ‚Ñ§
fromRational :: Rational -> ùîª
fail :: forall (r :: RuntimeRep) (a :: TYPE r) m. STACK => [‚ÑÇ] -> m a
ifThenElse :: ùîπ -> a -> a -> a
ùïü64 :: ‚Ñï -> ‚Ñï64
ùïü32 :: ‚Ñï -> ‚Ñï32
ùïü16 :: ‚Ñï -> ‚Ñï16
ùïü8 :: ‚Ñï -> ‚Ñï8
ùï´ :: ‚Ñï -> ‚Ñ§
ùï´64 :: ‚Ñï -> ‚Ñ§64
ùï´32 :: ‚Ñï -> ‚Ñ§32
ùï´16 :: ‚Ñï -> ‚Ñ§16
ùï´8 :: ‚Ñï -> ‚Ñ§8
chars :: ùïä -> [‚ÑÇ]
fromChars :: [‚ÑÇ] -> ùïä
error :: forall (r :: RuntimeRep) (a :: TYPE r). STACK => ùïä -> a
assert :: ùîπ -> a -> a
id :: a -> a
const :: a -> b -> a
(‚àò) :: (b -> c) -> (a -> b) -> a -> c
infixl 6 ‚àò
(‚àò‚àò) :: (c -> d) -> (a -> b -> c) -> a -> b -> d
flip :: (a -> b -> c) -> b -> a -> c
rotateR :: (a -> b -> c -> d) -> c -> a -> b -> d
rotateL :: (a -> b -> c -> d) -> b -> c -> a -> d
mirror :: (a -> b -> c -> d) -> c -> b -> a -> d
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
curry :: (a -> b -> c) -> (a ‚àß b) -> c
uncurry :: ((a ‚àß b) -> c) -> a -> b -> c
not :: ùîπ -> ùîπ
(‚©ì) :: ùîπ -> ùîπ -> ùîπ
infixl 5 ‚©ì
(‚©î) :: ùîπ -> ùîπ -> ùîπ
infixl 4 ‚©î
cond :: ùîπ -> a -> a -> a
streamùêø :: ùêø a -> ùëÜ a
listùêº :: ùêº a -> ùêø a
streamLL :: [a] -> ùëÜ a
lazyListùêº :: ùêº a -> [a]
foldùêº :: b -> (a -> b -> b) -> ùêº a -> b
foldkùêº :: b -> (a -> (b -> b) -> b -> b) -> ùêº a -> b
foldrùêº :: b -> (a -> b -> b) -> ùêº a -> b
mapùêº :: (a -> b) -> ùêº a -> ùêº b
iterùëÜ :: ùëÜ a -> ùêº a

-- | The kind of constraints, like <tt>Show a</tt>
data Constraint

-- | <a>otherwise</a> is defined as the value <a>True</a>. It helps to make
--   guards more readable. eg.
--   
--   <pre>
--   f x | x &lt; 0     = ...
--       | otherwise = ...
--   </pre>
otherwise :: Bool

-- | Application operator. This operator is redundant, since ordinary
--   application <tt>(f x)</tt> means the same as <tt>(f <a>$</a> x)</tt>.
--   However, <a>$</a> has low, right-associative binding precedence, so it
--   sometimes allows parentheses to be omitted; for example:
--   
--   <pre>
--   f $ g $ h x  =  f (g (h x))
--   </pre>
--   
--   It is also useful in higher-order situations, such as <tt><a>map</a>
--   (<a>$</a> 0) xs</tt>, or <tt><a>zipWith</a> (<a>$</a>) fs xs</tt>.
--   
--   Note that <tt>($)</tt> is levity-polymorphic in its result type, so
--   that foo $ True where foo :: Bool -&gt; Int# is well-typed
($) :: () => (a -> b) -> a -> b
infixr 0 $

-- | The <a>Eq</a> class defines equality (<a>==</a>) and inequality
--   (<a>/=</a>). All the basic datatypes exported by the <a>Prelude</a>
--   are instances of <a>Eq</a>, and <a>Eq</a> may be derived for any
--   datatype whose constituents are also instances of <a>Eq</a>.
--   
--   The Haskell Report defines no laws for <a>Eq</a>. However, <a>==</a>
--   is customarily expected to implement an equivalence relationship where
--   two values comparing equal are indistinguishable by "public"
--   functions, with a "public" function being one not allowing to see
--   implementation details. For example, for a type representing
--   non-normalised natural numbers modulo 100, a "public" function doesn't
--   make the difference between 1 and 201. It is expected to have the
--   following properties:
--   
--   <ul>
--   <li><i><b>Reflexivity</b></i> <tt>x == x</tt> = <a>True</a></li>
--   <li><i><b>Symmetry</b></i> <tt>x == y</tt> = <tt>y == x</tt></li>
--   <li><i><b>Transitivity</b></i> if <tt>x == y &amp;&amp; y == z</tt> =
--   <a>True</a>, then <tt>x == z</tt> = <a>True</a></li>
--   <li><i><b>Substitutivity</b></i> if <tt>x == y</tt> = <a>True</a> and
--   <tt>f</tt> is a "public" function whose return type is an instance of
--   <a>Eq</a>, then <tt>f x == f y</tt> = <a>True</a></li>
--   <li><i><b>Negation</b></i> <tt>x /= y</tt> = <tt>not (x ==
--   y)</tt></li>
--   </ul>
--   
--   Minimal complete definition: either <a>==</a> or <a>/=</a>.
class Eq a
(==) :: Eq a => a -> a -> Bool
infix 4 ==

-- | The <a>Ord</a> class is used for totally ordered datatypes.
--   
--   Instances of <a>Ord</a> can be derived for any user-defined datatype
--   whose constituent types are in <a>Ord</a>. The declared order of the
--   constructors in the data declaration determines the ordering in
--   derived <a>Ord</a> instances. The <a>Ordering</a> datatype allows a
--   single comparison to determine the precise ordering of two objects.
--   
--   The Haskell Report defines no laws for <a>Ord</a>. However,
--   <a>&lt;=</a> is customarily expected to implement a non-strict partial
--   order and have the following properties:
--   
--   <ul>
--   <li><i><b>Transitivity</b></i> if <tt>x &lt;= y &amp;&amp; y &lt;=
--   z</tt> = <a>True</a>, then <tt>x &lt;= z</tt> = <a>True</a></li>
--   <li><i><b>Reflexivity</b></i> <tt>x &lt;= x</tt> = <a>True</a></li>
--   <li><i><b>Antisymmetry</b></i> if <tt>x &lt;= y &amp;&amp; y &lt;=
--   x</tt> = <a>True</a>, then <tt>x == y</tt> = <a>True</a></li>
--   </ul>
--   
--   Note that the following operator interactions are expected to hold:
--   
--   <ol>
--   <li><tt>x &gt;= y</tt> = <tt>y &lt;= x</tt></li>
--   <li><tt>x &lt; y</tt> = <tt>x &lt;= y &amp;&amp; x /= y</tt></li>
--   <li><tt>x &gt; y</tt> = <tt>y &lt; x</tt></li>
--   <li><tt>x &lt; y</tt> = <tt>compare x y == LT</tt></li>
--   <li><tt>x &gt; y</tt> = <tt>compare x y == GT</tt></li>
--   <li><tt>x == y</tt> = <tt>compare x y == EQ</tt></li>
--   <li><tt>min x y == if x &lt;= y then x else y</tt> = <a>True</a></li>
--   <li><tt>max x y == if x &gt;= y then x else y</tt> = <a>True</a></li>
--   </ol>
--   
--   Minimal complete definition: either <a>compare</a> or <a>&lt;=</a>.
--   Using <a>compare</a> can be more efficient for complex types.
class Eq a => Ord a
compare :: Ord a => a -> a -> Ordering

-- | Conversion of values to readable <a>String</a>s.
--   
--   Derived instances of <a>Show</a> have the following properties, which
--   are compatible with derived instances of <a>Read</a>:
--   
--   <ul>
--   <li>The result of <a>show</a> is a syntactically correct Haskell
--   expression containing only constants, given the fixity declarations in
--   force at the point where the type is declared. It contains only the
--   constructor names defined in the data type, parentheses, and spaces.
--   When labelled constructor fields are used, braces, commas, field
--   names, and equal signs are also used.</li>
--   <li>If the constructor is defined to be an infix operator, then
--   <a>showsPrec</a> will produce infix applications of the
--   constructor.</li>
--   <li>the representation will be enclosed in parentheses if the
--   precedence of the top-level constructor in <tt>x</tt> is less than
--   <tt>d</tt> (associativity is ignored). Thus, if <tt>d</tt> is
--   <tt>0</tt> then the result is never surrounded in parentheses; if
--   <tt>d</tt> is <tt>11</tt> it is always surrounded in parentheses,
--   unless it is an atomic expression.</li>
--   <li>If the constructor is defined using record syntax, then
--   <a>show</a> will produce the record-syntax form, with the fields given
--   in the same order as the original declaration.</li>
--   </ul>
--   
--   For example, given the declarations
--   
--   <pre>
--   infixr 5 :^:
--   data Tree a =  Leaf a  |  Tree a :^: Tree a
--   </pre>
--   
--   the derived instance of <a>Show</a> is equivalent to
--   
--   <pre>
--   instance (Show a) =&gt; Show (Tree a) where
--   
--          showsPrec d (Leaf m) = showParen (d &gt; app_prec) $
--               showString "Leaf " . showsPrec (app_prec+1) m
--            where app_prec = 10
--   
--          showsPrec d (u :^: v) = showParen (d &gt; up_prec) $
--               showsPrec (up_prec+1) u .
--               showString " :^: "      .
--               showsPrec (up_prec+1) v
--            where up_prec = 5
--   </pre>
--   
--   Note that right-associativity of <tt>:^:</tt> is ignored. For example,
--   
--   <ul>
--   <li><tt><a>show</a> (Leaf 1 :^: Leaf 2 :^: Leaf 3)</tt> produces the
--   string <tt>"Leaf 1 :^: (Leaf 2 :^: Leaf 3)"</tt>.</li>
--   </ul>
class Show a

-- | A specialised variant of <a>showsPrec</a>, using precedence context
--   zero, and returning an ordinary <a>String</a>.
show :: Show a => a -> String
data Bool
False :: Bool
True :: Bool
data Ordering
LT :: Ordering
EQ :: Ordering
GT :: Ordering

-- | A value of type <tt><a>IO</a> a</tt> is a computation which, when
--   performed, does some I/O before returning a value of type <tt>a</tt>.
--   
--   There is really only one way to "perform" an I/O action: bind it to
--   <tt>Main.main</tt> in your program. When your program is run, the I/O
--   will be performed. It isn't possible to perform I/O from an arbitrary
--   function, unless that function is itself in the <a>IO</a> monad and
--   called at some point, directly or indirectly, from <tt>Main.main</tt>.
--   
--   <a>IO</a> is a monad, so <a>IO</a> actions can be combined using
--   either the do-notation or the <tt>&gt;&gt;</tt> and <tt>&gt;&gt;=</tt>
--   operations from the <tt>Monad</tt> class.
data IO a

-- | A special case of <a>error</a>. It is expected that compilers will
--   recognize this and insert error messages which are more appropriate to
--   the context in which <a>undefined</a> appears.
undefined :: HasCallStack => a

-- | <a>CallStack</a>s are a lightweight method of obtaining a partial
--   call-stack at any point in the program.
--   
--   A function can request its call-site with the <a>HasCallStack</a>
--   constraint. For example, we can define
--   
--   <pre>
--   putStrLnWithCallStack :: HasCallStack =&gt; String -&gt; IO ()
--   </pre>
--   
--   as a variant of <tt>putStrLn</tt> that will get its call-site and
--   print it, along with the string given as argument. We can access the
--   call-stack inside <tt>putStrLnWithCallStack</tt> with
--   <a>callStack</a>.
--   
--   <pre>
--   putStrLnWithCallStack :: HasCallStack =&gt; String -&gt; IO ()
--   putStrLnWithCallStack msg = do
--     putStrLn msg
--     putStrLn (prettyCallStack callStack)
--   </pre>
--   
--   Thus, if we call <tt>putStrLnWithCallStack</tt> we will get a
--   formatted call-stack alongside our string.
--   
--   <pre>
--   &gt;&gt;&gt; putStrLnWithCallStack "hello"
--   hello
--   CallStack (from HasCallStack):
--     putStrLnWithCallStack, called at &lt;interactive&gt;:2:1 in interactive:Ghci1
--   </pre>
--   
--   GHC solves <a>HasCallStack</a> constraints in three steps:
--   
--   <ol>
--   <li>If there is a <a>CallStack</a> in scope -- i.e. the enclosing
--   function has a <a>HasCallStack</a> constraint -- GHC will append the
--   new call-site to the existing <a>CallStack</a>.</li>
--   <li>If there is no <a>CallStack</a> in scope -- e.g. in the GHCi
--   session above -- and the enclosing definition does not have an
--   explicit type signature, GHC will infer a <a>HasCallStack</a>
--   constraint for the enclosing definition (subject to the monomorphism
--   restriction).</li>
--   <li>If there is no <a>CallStack</a> in scope and the enclosing
--   definition has an explicit type signature, GHC will solve the
--   <a>HasCallStack</a> constraint for the singleton <a>CallStack</a>
--   containing just the current call-site.</li>
--   </ol>
--   
--   <a>CallStack</a>s do not interact with the RTS and do not require
--   compilation with <tt>-prof</tt>. On the other hand, as they are built
--   up explicitly via the <a>HasCallStack</a> constraints, they will
--   generally not contain as much information as the simulated call-stacks
--   maintained by the RTS.
--   
--   A <a>CallStack</a> is a <tt>[(String, SrcLoc)]</tt>. The
--   <tt>String</tt> is the name of function that was called, the
--   <a>SrcLoc</a> is the call-site. The list is ordered with the most
--   recently called function at the head.
--   
--   NOTE: The intrepid user may notice that <a>HasCallStack</a> is just an
--   alias for an implicit parameter <tt>?callStack :: CallStack</tt>. This
--   is an implementation detail and <b>should not</b> be considered part
--   of the <a>CallStack</a> API, we may decide to change the
--   implementation in the future.
data CallStack

-- | Perform some computation without adding new entries to the
--   <a>CallStack</a>.
withFrozenCallStack :: HasCallStack => (HasCallStack -> a) -> a

-- | Return the current <a>CallStack</a>.
--   
--   Does *not* include the call-site of <a>callStack</a>.
callStack :: HasCallStack -> CallStack
instance GHC.Show.Show UVMHS.Core.Init.Nat
instance GHC.Classes.Ord UVMHS.Core.Init.Nat
instance GHC.Classes.Eq UVMHS.Core.Init.Nat
instance forall k (a :: k). GHC.Show.Show (UVMHS.Core.Init.P a)
instance forall k (a :: k). GHC.Classes.Ord (UVMHS.Core.Init.P a)
instance forall k (a :: k). GHC.Classes.Eq (UVMHS.Core.Init.P a)
instance (GHC.Classes.Ord k, GHC.Classes.Ord v) => GHC.Classes.Ord (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Eq k, GHC.Classes.Eq v) => GHC.Classes.Eq (k UVMHS.Core.Init.‚á∞ v)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÑ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÑ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùêø a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùêø a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÇ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÇ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÇ a)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a UVMHS.Core.Init.‚àß b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (a UVMHS.Core.Init.‚àß b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (a UVMHS.Core.Init.‚àß b)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a UVMHS.Core.Init.‚à® b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (a UVMHS.Core.Init.‚à® b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (a UVMHS.Core.Init.‚à® b)
instance GHC.Show.Show UVMHS.Core.Init.‚Ñù·¥æ
instance GHC.Classes.Ord UVMHS.Core.Init.‚Ñù·¥æ
instance GHC.Classes.Eq UVMHS.Core.Init.‚Ñù·¥æ
instance GHC.Show.Show UVMHS.Core.Init.‚Ñù
instance GHC.Classes.Ord UVMHS.Core.Init.‚Ñù
instance GHC.Classes.Eq UVMHS.Core.Init.‚Ñù
instance GHC.Real.Real UVMHS.Core.Init.ùîª·¥æ
instance GHC.Float.Floating UVMHS.Core.Init.ùîª·¥æ
instance GHC.Real.Fractional UVMHS.Core.Init.ùîª·¥æ
instance GHC.Num.Num UVMHS.Core.Init.ùîª·¥æ
instance GHC.Show.Show UVMHS.Core.Init.ùîª·¥æ
instance GHC.Classes.Ord UVMHS.Core.Init.ùîª·¥æ
instance GHC.Classes.Eq UVMHS.Core.Init.ùîª·¥æ
instance GHC.Classes.Eq (UVMHS.Core.Init.W c)
instance GHC.Classes.Ord (UVMHS.Core.Init.W c)
instance GHC.Show.Show (UVMHS.Core.Init.W c)
instance forall k (t :: k -> *). (forall (a :: k). GHC.Show.Show (t a)) => GHC.Show.Show (UVMHS.Core.Init.Ex t)
instance forall k (c :: k -> GHC.Types.Constraint) (t :: k -> *). (forall (a :: k). c a => GHC.Show.Show (t a)) => GHC.Show.Show (UVMHS.Core.Init.Ex_C c t)
instance (a Data.Type.Equality.~ b) => UVMHS.Core.Init.CHS a b
instance UVMHS.Core.Init.CHS UVMHS.Core.Init.‚Ñ§64 GHC.Types.Int
instance UVMHS.Core.Init.CHS a b => UVMHS.Core.Init.CHS (UVMHS.Core.Init.ùêø a) [b]
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ, UVMHS.Core.Init.CHS a‚ÇÉ b‚ÇÉ) => UVMHS.Core.Init.CHS ((a‚ÇÅ UVMHS.Core.Init.‚àß a‚ÇÇ) UVMHS.Core.Init.‚àß a‚ÇÉ) (b‚ÇÅ, b‚ÇÇ, b‚ÇÉ)
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ) => UVMHS.Core.Init.CHS (a‚ÇÅ UVMHS.Core.Init.‚àß a‚ÇÇ) (b‚ÇÅ, b‚ÇÇ)
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ) => UVMHS.Core.Init.CHS (a‚ÇÅ UVMHS.Core.Init.‚à® a‚ÇÇ) (Data.Either.Either b‚ÇÅ b‚ÇÇ)
instance UVMHS.Core.Init.CHS a b => UVMHS.Core.Init.CHS (UVMHS.Core.Init.ùëÇ a) (GHC.Maybe.Maybe b)

module UVMHS.Core.Data.Char
toLower :: ‚ÑÇ -> ‚ÑÇ
toUpper :: ‚ÑÇ -> ‚ÑÇ
isSpace :: ‚ÑÇ -> ùîπ
isAlphaNum :: ‚ÑÇ -> ùîπ
isLetter :: ‚ÑÇ -> ùîπ
isNumber :: ‚ÑÇ -> ùîπ
isDigit :: ‚ÑÇ -> ùîπ

module UVMHS.Core.Classes.Order
(‚â°) :: Eq a => a -> a -> ùîπ
infix 3 ‚â°
(‚â¢) :: Eq a => a -> a -> ùîπ
infix 3 ‚â¢
(‚ãö) :: Ord a => a -> a -> Ordering
infix 3 ‚ãö
(‚â§) :: Ord a => a -> a -> ùîπ
infix 3 ‚â§
(‚â•) :: Ord a => a -> a -> ùîπ
infix 3 ‚â•
(<) :: Ord a => a -> a -> ùîπ
infix 3 <
(>) :: Ord a => a -> a -> ùîπ
infix 3 >
(‚©é) :: Ord a => a -> a -> a
(‚©è) :: Ord a => a -> a -> a
minBy :: Ord b => (a -> b) -> a -> a -> a
maxBy :: Ord b => (a -> b) -> a -> a -> a

module UVMHS.Core.Classes.Morphism
type (m :: ‚òÖ -> ‚òÖ) ‚Üí‚Åª (n :: ‚òÖ -> ‚òÖ) = forall a. m a -> n a
infixr 2 ‚Üí‚Åª
type (t :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) ‚Üí‚Åº (u :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) = forall m. t m ‚Üí‚Åª u m
infixr 2 ‚Üí‚Åº
class a ‚áÑ b | a -> b
isoto :: (‚áÑ) a b => a -> b
isofr :: (‚áÑ) a b => b -> a
infixr 2 ‚áÑ
data Iso a b
Iso :: (a -> b) -> (b -> a) -> Iso a b
[ito] :: Iso a b -> a -> b
[ifr] :: Iso a b -> b -> a
toiso :: a ‚áÑ b => Iso a b
friso :: a ‚áÑ b => Iso b a
class t ‚áÑ‚Åª u | t -> u
isoto2 :: (‚áÑ‚Åª) t u => t ‚Üí‚Åª u
isofr2 :: (‚áÑ‚Åª) t u => u ‚Üí‚Åª t
infixr 2 ‚áÑ‚Åª
data Iso2 t u
Iso2 :: (t ‚Üí‚Åª u) -> (u ‚Üí‚Åª t) -> Iso2 t u
[ito2] :: Iso2 t u -> t ‚Üí‚Åª u
[ifr2] :: Iso2 t u -> u ‚Üí‚Åª t
toiso2 :: t ‚áÑ‚Åª u => Iso2 t u
friso2 :: t ‚áÑ‚Åª u => Iso2 u t
class v ‚áÑ‚Åº w | v -> w
isoto3 :: (‚áÑ‚Åº) v w => v ‚Üí‚Åº w
isofr3 :: (‚áÑ‚Åº) v w => w ‚Üí‚Åº v
infixr 2 ‚áÑ‚Åº
data Iso3 v w
Iso3 :: (v ‚Üí‚Åº w) -> (w ‚Üí‚Åº v) -> Iso3 v w
[ito3] :: Iso3 v w -> v ‚Üí‚Åº w
[ifr3] :: Iso3 v w -> w ‚Üí‚Åº v
toiso3 :: v ‚áÑ‚Åº w => Iso3 v w
friso3 :: v ‚áÑ‚Åº w => Iso3 w v
class Category t
refl :: Category t => t a a
(‚äö) :: Category t => t b c -> t a b -> t a c
infixl 6 ‚äö
class Symmetric t
sym :: Symmetric t => t a b -> t b a
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso3
instance UVMHS.Core.Classes.Morphism.Category (->)
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso3

module UVMHS.Core.Classes.Lattice
class POrd a
(‚äë) :: POrd a => a -> a -> ùîπ
infix 3 ‚äë
class Bot a
bot :: Bot a => a
class Join a
(‚äî) :: Join a => a -> a -> a
infixl 4 ‚äî
class (Bot a, Join a) => JoinLattice a
class Top a
top :: Top a => a
class Meet a
(‚äì) :: Meet a => a -> a -> a
infixl 5 ‚äì
class (Top a, Meet a) => MeetLattice a
class (JoinLattice a, MeetLattice a) => Lattice a
class Dual a
dual :: Dual a => a -> a
class Difference a
(‚äü) :: Difference a => a -> a -> a
infixl 4 ‚äü
data PartialOrdering
PLT :: PartialOrdering
PEQ :: PartialOrdering
PGT :: PartialOrdering
PUN :: PartialOrdering
(‚àá) :: POrd a => a -> a -> PartialOrdering
infix 3 ‚àá
(‚äí) :: POrd a => a -> a -> ùîπ
infix 3 ‚äí
(‚™§) :: POrd a => a -> a -> ùîπ
infix 3 ‚™§
lfp :: POrd a => a -> (a -> a) -> a
gfp :: POrd a => a -> (a -> a) -> a

module UVMHS.Core.Classes.Functor
class Functor (t :: ‚òÖ -> ‚òÖ)
map :: Functor t => (a -> b) -> t a -> t b
mapOn :: Functor t => t a -> (a -> b) -> t b
mapp :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
mappp :: (Functor t, Functor u, Functor v) => (a -> b) -> t (u (v a)) -> t (u (v b))
(^‚ãÖ) :: Functor t => (a -> b) -> t a -> t b
infixl 9 ^‚ãÖ
(^^‚ãÖ) :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
infixl 9 ^^‚ãÖ
(^$) :: Functor t => (a -> b) -> t a -> t b
infixr 0 ^$
(^^$) :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
infixr 0 ^^$
(^‚àò) :: Functor t => (b -> c) -> (a -> t b) -> a -> t c
infixl 6 ^‚àò
(^^‚àò) :: (Functor t, Functor u) => (b -> c) -> (a -> t (u b)) -> a -> t (u c)
infixl 6 ^^‚àò
class Functor2 (w :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
map2 :: Functor2 w => (t ‚Üí‚Åª u) -> w t ‚Üí‚Åª w u
class Functor2Iso (w :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
map2iso :: Functor2Iso w => Iso2 t u -> w t ‚Üí‚Åª w u

module UVMHS.Core.Classes.Monad
(>>=) :: Bind m => m a -> (a -> m b) -> m b
(>>) :: Bind m => m a -> m b -> m b
class Return (m :: ‚òÖ -> ‚òÖ)
return :: Return m => a -> m a
class Bind (m :: ‚òÖ -> ‚òÖ)
(‚â´=) :: Bind m => m a -> (a -> m b) -> m b
infixr 2 ‚â´=
class (Functor m, Return m, Bind m) => Monad m
class Transformer (t :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
lift :: forall m a. (Transformer t, Monad m) => m a -> t m a
(*‚ãÖ) :: Bind m => (a -> m b) -> m a -> m b
(*$) :: Bind m => (a -> m b) -> m a -> m b
infixr 0 *$
(*‚àò) :: Bind m => (b -> m c) -> (a -> m b) -> a -> m c
infixl 6 *‚àò
kreturn :: Return m => (a -> b) -> a -> m b
extend :: Bind m => (a -> m b) -> m a -> m b
(‚â´) :: Bind m => m a -> m b -> m b
infixr 2 ‚â´
void :: Functor m => m a -> m ()
mjoin :: Bind m => m (m a) -> m a
mmap :: Monad m => (a -> b) -> m a -> m b
(‚ßÜ) :: Monad m => m a -> m b -> m (a ‚àß b)
infixl 5 ‚ßÜ
(‚ä°) :: Monad m => m (a -> b) -> m a -> m b
skip :: Return m => m ()
when :: Return m => ùîπ -> (() -> m ()) -> m ()
whenùëÇ :: Return m => ùëÇ a -> (a -> m ()) -> m ()
whenM :: Monad m => m ùîπ -> (() -> m ()) -> m ()
returnùëÇ :: Return m => m a -> ùëÇ a -> m a

module UVMHS.Core.Classes.FunctorM
class FunctorM (t :: ‚òÖ -> ‚òÖ)
mapM :: (FunctorM t, Monad m) => (a -> m b) -> t a -> m (t b)
mapMOn :: (Monad m, FunctorM t) => t a -> (a -> m b) -> m (t b)

module UVMHS.Core.Classes.Constraints
class U a
class (c‚ÇÅ a, c‚ÇÇ a) => ( c‚ÇÅ :‚àß: c‚ÇÇ ) a
infixl 4 :‚àß:
class (t (u a)) => ( t :‚àò: u ) a
infixl 6 :‚àò:
class (:‚áí:) c‚ÇÅ c‚ÇÇ
impl :: (:‚áí:) c‚ÇÅ c‚ÇÇ => W c‚ÇÅ -> W c‚ÇÇ
infixr 2 :‚áí:
instance forall k1 k2 (t :: k2 -> GHC.Types.Constraint) (u :: k1 -> k2) (a :: k1). t (u a) => (UVMHS.Core.Classes.Constraints.:‚àò:) t u a
instance forall k (c‚ÇÅ :: k -> GHC.Types.Constraint) (a :: k) (c‚ÇÇ :: k -> GHC.Types.Constraint). (c‚ÇÅ a, c‚ÇÇ a) => (UVMHS.Core.Classes.Constraints.:‚àß:) c‚ÇÅ c‚ÇÇ a
instance forall k (a :: k). UVMHS.Core.Classes.Constraints.U a

module UVMHS.Core.Classes.Comonad
class Extract (w :: ‚òÖ -> ‚òÖ)
extract :: Extract w => w a -> a
class Cobind (w :: ‚òÖ -> ‚òÖ)
(=‚â´) :: Cobind w => w a -> (w a -> b) -> w b
infixr 2 =‚â´
class (Functor w, Extract w, Cobind w) => Comonad w
wextend :: Cobind w => (w a -> b) -> w a -> w b
(%‚ãÖ) :: Cobind w => (w a -> b) -> w a -> w b
(%$) :: Cobind w => (w a -> b) -> w a -> w b
(%‚àò) :: Cobind w => (w b -> c) -> (w a -> b) -> w a -> c
kextract :: Extract w => (a -> b) -> w a -> b
kextract2 :: Extract w => (a -> b -> c) -> w a -> w b -> c
siphon :: Cobind w => w a -> b -> w b
submerge :: (Functor m, Comonad w) => w (m a) -> m (w a)
wmap :: Comonad w => (a -> b) -> w a -> w b

module UVMHS.Core.Classes.Collections
class Single a t | t -> a
single :: Single a t => a -> t
class Lookup k v t | t -> k, t -> v
(‚ãï?) :: Lookup k v t => t -> k -> ùëÇ v
infixl 7 ‚ãï?
class Access k v t | t -> k, t -> v
(‚ãï) :: Access k v t => t -> k -> v
infixl 7 ‚ãï
class ToStream a t | t -> a
stream :: ToStream a t => t -> ùëÜ a
class ToIter a t | t -> a
iter :: ToIter a t => t -> ùêº a
class Sized t
size :: Sized t => t -> ‚Ñï64
(‚ãï!) :: (Lookup k v t, STACK) => t -> k -> v
infixl 7 ‚ãï!

module UVMHS.Core.Classes.DSL
class Arrow a
(‚á®) :: Arrow a => a -> a -> a
infixr 2 ‚á®
class Apply a
(‚äô) :: Apply a => a -> a -> a
infixl 6 ‚äô
class Tup a
tup :: (Tup a, ToIter a t) => t -> a
(‚äô$) :: Apply e => e -> e -> e
infixr 0 ‚äô$
(‚äô‚ãÜ) :: (Apply e, ToIter e t) => e -> t -> e
infixl 6 ‚äô‚ãÜ

module UVMHS.Core.Classes.Arithmetic
class Zero a
zero :: Zero a => a
class Plus a
(+) :: Plus a => a -> a -> a
infixl 4 +
class Minus a
(-) :: Minus a => a -> a -> a
infixl 4 -
class One a
one :: One a => a
class Times a
(√ó) :: Times a => a -> a -> a
infixl 5 √ó
class Divide a
(/) :: Divide a => a -> a -> a
infixl 5 /
class DivMod a
(‚åø) :: DivMod a => a -> a -> a
(√∑) :: DivMod a => a -> a -> a
infixl 5 √∑
infixl 5 ‚åø
class Pon a
(^^) :: Pon a => a -> ‚Ñï -> a
class Pow a
(^) :: Pow a => a -> a -> a
infixl 7 ^
class Root a
root :: Root a => a -> a
class Log a
log :: Log a => a -> a
class Efn a
efn :: Efn a => a -> a
class Sin a
sin :: Sin a => a -> a
class Cos a
cos :: Cos a => a -> a
class (Zero a, Plus a) => Additive a
class (Additive a, One a, Times a) => Multiplicative a
succ :: (One a, Plus a) => a -> a
even :: (Eq a, Additive a, One a, DivMod a) => a -> ùîπ
odd :: (Eq a, Additive a, One a, DivMod a) => a -> ùîπ
neg :: (Zero a, Minus a) => a -> a
(‚®µ) :: (Functor f, Multiplicative a) => a -> f a -> f a
infixl 5 ‚®µ
class ToNat a
nat :: ToNat a => a -> ‚Ñï
class ToNat64 a
nat64 :: ToNat64 a => a -> ‚Ñï64
class ToNat32 a
nat32 :: ToNat32 a => a -> ‚Ñï32
class ToNat16 a
nat16 :: ToNat16 a => a -> ‚Ñï16
class ToNat8 a
nat8 :: ToNat8 a => a -> ‚Ñï8
class ToNatO a
natO :: ToNatO a => a -> ùëÇ ‚Ñï
class ToNatO64 a
natO64 :: ToNatO64 a => a -> ùëÇ ‚Ñï64
class ToNatO32 a
natO32 :: ToNatO32 a => a -> ùëÇ ‚Ñï32
class ToNatO16 a
natO16 :: ToNatO16 a => a -> ùëÇ ‚Ñï16
class ToNatO8 a
natO8 :: ToNatO8 a => a -> ùëÇ ‚Ñï8
natŒ© :: (ToNatO a, STACK) => a -> ‚Ñï
natŒ©64 :: (ToNatO64 a, STACK) => a -> ‚Ñï64
natŒ©32 :: (ToNatO32 a, STACK) => a -> ‚Ñï32
natŒ©16 :: (ToNatO16 a, STACK) => a -> ‚Ñï16
natŒ©8 :: (ToNatO8 a, STACK) => a -> ‚Ñï8
class ToInt a
int :: ToInt a => a -> ‚Ñ§
class ToInt64 a
int64 :: ToInt64 a => a -> ‚Ñ§64
class ToInt32 a
int32 :: ToInt32 a => a -> ‚Ñ§32
class ToInt16 a
int16 :: ToInt16 a => a -> ‚Ñ§16
class ToInt8 a
int8 :: ToInt8 a => a -> ‚Ñ§8
class ToIntO a
intO :: ToIntO a => a -> ùëÇ ‚Ñ§
class ToIntO64 a
intO64 :: ToIntO64 a => a -> ùëÇ ‚Ñ§64
class ToIntO32 a
intO32 :: ToIntO32 a => a -> ùëÇ ‚Ñ§32
class ToIntO16 a
intO16 :: ToIntO16 a => a -> ùëÇ ‚Ñ§16
class ToIntO8 a
intO8 :: ToIntO8 a => a -> ùëÇ ‚Ñ§8
intŒ© :: (ToIntO a, STACK) => a -> ‚Ñ§
intŒ©64 :: (ToIntO64 a, STACK) => a -> ‚Ñ§64
intŒ©32 :: (ToIntO32 a, STACK) => a -> ‚Ñ§32
intŒ©16 :: (ToIntO16 a, STACK) => a -> ‚Ñ§16
intŒ©8 :: (ToIntO8 a, STACK) => a -> ‚Ñ§8
class ToRational a
rat :: ToRational a => a -> ‚Ñö
class ToRationalO a
ratO :: ToRationalO a => a -> ùëÇ ‚Ñö
class ToRational·¥æ a
rat·¥æ :: ToRational·¥æ a => a -> ‚Ñö·¥æ
class ToRational·¥æO a
rat·¥æO :: ToRational·¥æO a => a -> ùëÇ ‚Ñö·¥æ
class ToDouble a
dbl :: ToDouble a => a -> ùîª
class ToDoubleO a
dblO :: ToDoubleO a => a -> ùëÇ ùîª
class ToDouble·¥æ a
dbl·¥æ :: ToDouble·¥æ a => a -> ùîª·¥æ
class ToDouble·¥æO a
dbl·¥æO :: ToDouble·¥æO a => a -> ùëÇ ùîª·¥æ
class ToNumber a
num :: ToNumber a => a -> ‚Ñù
class ToNumber·¥æ a
num·¥æ :: ToNumber·¥æ a => a -> ‚Ñù·¥æ
class ToNumber·¥æO a
num·¥æO :: ToNumber·¥æO a => a -> ùëÇ ‚Ñù·¥æ
ratŒ© :: (ToRationalO a, STACK) => a -> ‚Ñö
rat·¥æŒ© :: (ToRational·¥æO a, STACK) => a -> ‚Ñö·¥æ
dblŒ© :: (ToDoubleO a, STACK) => a -> ùîª
dbl·¥æŒ© :: (ToDouble·¥æO a, STACK) => a -> ùîª·¥æ
num·¥æŒ© :: (ToNumber·¥æO a, STACK) => a -> ‚Ñù·¥æ

module UVMHS.Core.Classes.All
class All a
all :: All a => ùêº a

module UVMHS.Core.Classes

module UVMHS.Core.Data.Unit
instance UVMHS.Core.Classes.Monoid.Null ()
instance UVMHS.Core.Classes.Monoid.Append ()
instance UVMHS.Core.Classes.Monoid.Monoid ()
instance UVMHS.Core.Classes.Arithmetic.Zero ()
instance UVMHS.Core.Classes.Arithmetic.Plus ()
instance UVMHS.Core.Classes.Arithmetic.Additive ()

module UVMHS.Core.Data.Pair
fst :: (a ‚àß b) -> a
snd :: (a ‚àß b) -> b
mapPair :: (a‚ÇÅ -> a‚ÇÇ) -> (b‚ÇÅ -> b‚ÇÇ) -> (a‚ÇÅ ‚àß b‚ÇÅ) -> a‚ÇÇ ‚àß b‚ÇÇ
mapFst :: (a‚ÇÅ -> a‚ÇÇ) -> (a‚ÇÅ ‚àß b) -> a‚ÇÇ ‚àß b
mapSnd :: (b‚ÇÅ -> b‚ÇÇ) -> (a ‚àß b‚ÇÅ) -> a ‚àß b‚ÇÇ
instance (UVMHS.Core.Classes.Lattice.POrd a, UVMHS.Core.Classes.Lattice.POrd b) => UVMHS.Core.Classes.Lattice.POrd (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Bot b) => UVMHS.Core.Classes.Lattice.Bot (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Join b) => UVMHS.Core.Classes.Lattice.Join (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Top b) => UVMHS.Core.Classes.Lattice.Top (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Meet a, UVMHS.Core.Classes.Lattice.Meet b) => UVMHS.Core.Classes.Lattice.Meet (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Dual a, UVMHS.Core.Classes.Lattice.Dual b) => UVMHS.Core.Classes.Lattice.Dual (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Difference a, UVMHS.Core.Classes.Lattice.Difference b) => UVMHS.Core.Classes.Lattice.Difference (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.JoinLattice b) => UVMHS.Core.Classes.Lattice.JoinLattice (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.MeetLattice a, UVMHS.Core.Classes.Lattice.MeetLattice b) => UVMHS.Core.Classes.Lattice.MeetLattice (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Lattice a, UVMHS.Core.Classes.Lattice.Lattice b) => UVMHS.Core.Classes.Lattice.Lattice (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Null a, UVMHS.Core.Classes.Monoid.Null b) => UVMHS.Core.Classes.Monoid.Null (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Append b) => UVMHS.Core.Classes.Monoid.Append (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Monoid a, UVMHS.Core.Classes.Monoid.Monoid b) => UVMHS.Core.Classes.Monoid.Monoid (a UVMHS.Core.Init.‚àß b)
instance UVMHS.Core.Classes.Functor.Functor ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monad.Return ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monad.Bind ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monad.Monad ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.FunctorM.FunctorM ((UVMHS.Core.Init.‚àß) a)

module UVMHS.Core.Data.Option
elimùëÇ :: b -> (a -> b) -> ùëÇ a -> b
isNone :: ùëÇ a -> ùîπ
isSome :: ùëÇ a -> ùîπ
ifNone :: a -> ùëÇ a -> a
first :: ùëÇ a -> ùëÇ a -> ùëÇ a
last :: ùëÇ a -> ùëÇ a -> ùëÇ a
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Init.ùëÇ a UVMHS.Core.Classes.Morphism.‚áÑ (() UVMHS.Core.Init.‚à® a)

module UVMHS.Core.Data.LazyList
emptyLL :: [a]
singleLL :: a -> [a]
consLL :: a -> [a] -> [a]
snocLL :: [a] -> a -> [a]
appendLL :: [a] -> [a] -> [a]
mapLL :: (a -> b) -> [a] -> [b]
bindLL :: [a] -> (a -> [b]) -> [b]
mapMLL :: Monad m => (a -> m b) -> [a] -> m [b]
instance UVMHS.Core.Classes.Monoid.Null [a]
instance UVMHS.Core.Classes.Monoid.Append [a]
instance UVMHS.Core.Classes.Monoid.Monoid [a]
instance UVMHS.Core.Classes.Functor.Functor []
instance UVMHS.Core.Classes.Monad.Return []
instance UVMHS.Core.Classes.Monad.Bind []
instance UVMHS.Core.Classes.Monad.Monad []
instance UVMHS.Core.Classes.FunctorM.FunctorM []
instance UVMHS.Core.Classes.Collections.Single a [a]
instance UVMHS.Core.Classes.Collections.ToStream a [a]
instance UVMHS.Core.Classes.Collections.ToIter a [a]

module UVMHS.Core.Data.List
emptyùêø :: ùêø a
singleùêø :: a -> ùêø a
consùêø :: a -> ùêø a -> ùêø a
snocùêø :: ùêø a -> a -> ùêø a
appendùêø :: ùêø a -> ùêø a -> ùêø a
mapùêø :: (a -> b) -> ùêø a -> ùêø b
bindùêø :: ùêø a -> (a -> ùêø b) -> ùêø b
mapMùêø :: Monad m => (a -> m b) -> ùêø a -> m (ùêø b)
cart :: ùêø (ùêø a) -> ùêø (ùêø a)
swivelL :: ùêø a -> a -> a ‚àß ùêø a
swivelR :: a -> ùêø a -> ùêø a ‚àß a
iswivelL :: ùêø (a ‚àß i) -> a -> a ‚àß ùêø (i ‚àß a)
iswivelR :: a -> ùêø (i ‚àß a) -> ùêø (a ‚àß i) ‚àß a
zipSameLength :: ùêø a -> ùêø b -> ùëÇ (ùêø (a ‚àß b))
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùêø a)

module UVMHS.Core.Data.Function
instance UVMHS.Core.Classes.Functor.Functor ((->) r)
instance UVMHS.Core.Classes.Monad.Return ((->) r)
instance UVMHS.Core.Classes.Monad.Bind ((->) r)
instance UVMHS.Core.Classes.Monad.Monad ((->) r)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (r -> a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (r -> a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (r -> a)

module UVMHS.Core.Data.Choice
elimChoice :: (a -> c) -> (b -> c) -> (a ‚à® b) -> c
mapChoice :: (a‚ÇÅ -> a‚ÇÇ) -> (b‚ÇÅ -> b‚ÇÇ) -> (a‚ÇÅ ‚à® b‚ÇÅ) -> a‚ÇÇ ‚à® b‚ÇÇ
mapInl :: (a‚ÇÅ -> a‚ÇÇ) -> (a‚ÇÅ ‚à® b) -> a‚ÇÇ ‚à® b
mapInr :: (b‚ÇÅ -> b‚ÇÇ) -> (a ‚à® b‚ÇÅ) -> a ‚à® b‚ÇÇ
instance UVMHS.Core.Classes.Functor.Functor ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Monad.Return ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Monad.Bind ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Monad.Monad ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.FunctorM.FunctorM ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Monoid.Null b => UVMHS.Core.Classes.Monoid.Null (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Append b) => UVMHS.Core.Classes.Monoid.Append (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Monoid b) => UVMHS.Core.Classes.Monoid.Monoid (a UVMHS.Core.Init.‚à® b)

module UVMHS.Core.Data.Bool
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.POrd UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Lattice UVMHS.Core.Init.ùîπ

module UVMHS.Core.Data.Arithmetic
numberBOp :: (‚Ñ§ -> ‚Ñ§ -> ‚Ñù) -> (‚Ñö -> ‚Ñö -> ‚Ñù) -> (ùîª -> ùîª -> ‚Ñù) -> ‚Ñù -> ‚Ñù -> ‚Ñù
numberBOp·¥æ :: (‚Ñï -> ‚Ñï -> ‚Ñù·¥æ) -> (‚Ñö·¥æ -> ‚Ñö·¥æ -> ‚Ñù·¥æ) -> (ùîª·¥æ -> ùîª·¥æ -> ‚Ñù·¥æ) -> ‚Ñù·¥æ -> ‚Ñù·¥æ -> ‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat16 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat16 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat8 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt8 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Efn UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Sin UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Cos UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Efn UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Sin UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Cos UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Efn UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Sin UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Cos UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñù·¥æ

module UVMHS.Core.Data.String
emptyùïä :: ùïä -> ùîπ
singleùïä :: ‚ÑÇ -> ùïä
buildùïä :: ToIter ‚ÑÇ t => t -> ùïä
buildùïäC :: ToIter ùïä t => t -> ùïä
buildùïäN :: ToIter ‚ÑÇ t => ‚Ñï64 -> t -> ùïä
buildùïäCN :: ToIter ùïä t => ‚Ñï64 -> t -> ùïä
showùïä :: Show a => a -> ùïä
readùïä :: Read a => ùïä -> a
lowerùïä :: ùïä -> ùïä
upperùïä :: ùïä -> ùïä
isEmptyùïä :: ùïä -> ùîπ
splitOnùïä :: ùïä -> ùïä -> ùëÜ ùïä
lengthùïä :: ùïä -> ‚Ñï
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.Single UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.ToStream UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.ToIter UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä

module UVMHS.Core.Data.Iter
emptyùêº :: ùêº a
singleùêº :: a -> ùêº a
consùêº :: a -> ùêº a -> ùêº a
snocùêº :: ùêº a -> a -> ùêº a
appendùêº :: ùêº a -> ùêº a -> ùêº a
mjoinùêº :: ùêº (ùêº a) -> ùêº a
bindùêº :: ùêº a -> (a -> ùêº b) -> ùêº b
mapMùêº :: Monad m => (a -> m b) -> ùêº a -> m (ùêº b)
fold :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldFromWith :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldFromOn :: ToIter a t => b -> t -> (a -> b -> b) -> b
foldOnFrom :: ToIter a t => t -> b -> (a -> b -> b) -> b
foldOnWith :: ToIter a t => t -> (a -> b -> b) -> b -> b
foldWithOn :: ToIter a t => (a -> b -> b) -> t -> b -> b
foldWithFrom :: ToIter a t => (a -> b -> b) -> b -> t -> b
foldk :: ToIter a t => b -> (a -> (b -> b) -> b -> b) -> t -> b
foldkFromWith :: ToIter a t => b -> (a -> (b -> b) -> b -> b) -> t -> b
foldkFromOn :: ToIter a t => b -> t -> (a -> (b -> b) -> b -> b) -> b
foldkOnFrom :: ToIter a t => t -> b -> (a -> (b -> b) -> b -> b) -> b
foldkOnWith :: ToIter a t => t -> (a -> (b -> b) -> b -> b) -> b -> b
foldkWithOn :: ToIter a t => (a -> (b -> b) -> b -> b) -> t -> b -> b
foldkWithFrom :: ToIter a t => (a -> (b -> b) -> b -> b) -> b -> t -> b
foldr :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldrFromWith :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldrFromOn :: ToIter a t => b -> t -> (a -> b -> b) -> b
foldrOnFrom :: ToIter a t => t -> b -> (a -> b -> b) -> b
foldrOnWith :: ToIter a t => t -> (a -> b -> b) -> b -> b
foldrWithOn :: ToIter a t => (a -> b -> b) -> t -> b -> b
foldrWithFrom :: ToIter a t => (a -> b -> b) -> b -> t -> b
mfold :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldFromWith :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldFromOn :: (Monad m, ToIter a t) => b -> t -> (a -> b -> m b) -> m b
mfoldOnFrom :: (Monad m, ToIter a t) => t -> b -> (a -> b -> m b) -> m b
mfoldOnWith :: (Monad m, ToIter a t) => t -> (a -> b -> m b) -> b -> m b
mfoldWithOn :: (Monad m, ToIter a t) => (a -> b -> m b) -> t -> b -> m b
mfoldWithFrom :: (Monad m, ToIter a t) => (a -> b -> m b) -> b -> t -> m b
mfoldr :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldrFromWith :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldrFromOn :: (Monad m, ToIter a t) => b -> t -> (a -> b -> m b) -> m b
mfoldrOnFrom :: (Monad m, ToIter a t) => t -> b -> (a -> b -> m b) -> m b
mfoldrOnWith :: (Monad m, ToIter a t) => t -> (a -> b -> m b) -> b -> m b
mfoldrWithOn :: (Monad m, ToIter a t) => (a -> b -> m b) -> t -> b -> m b
mfoldrWithFrom :: (Monad m, ToIter a t) => (a -> b -> m b) -> b -> t -> m b
eachWith :: (Monad m, ToIter a t) => (a -> m ()) -> t -> m ()
eachOn :: (Monad m, ToIter a t) => t -> (a -> m ()) -> m ()
exec :: (Monad m, ToIter (m ()) t) => t -> m ()
sum :: (ToIter a t, Additive a) => t -> a
product :: (ToIter a t, Multiplicative a) => t -> a
concat :: (Monoid a, ToIter a t) => t -> a
sequence :: (Seqoid a, ToIter a t) => t -> a
compose :: ToIter (a -> a) t => t -> a -> a
mcompose :: Monad m => ToIter (a -> m a) t => t -> a -> m a
wcompose :: Comonad w => ToIter (w a -> a) t => t -> w a -> a
joins :: (JoinLattice a, ToIter a t) => t -> a
meets :: (MeetLattice a, ToIter a t) => t -> a
or :: ToIter ùîπ t => t -> ùîπ
and :: ToIter ùîπ t => t -> ùîπ
count :: ToIter a t => t -> ‚Ñï
countWith :: ToIter a t => (a -> ùîπ) -> t -> ‚Ñï
reverse :: ToIter a t => t -> ùêº a
repeatI :: ‚Ñï -> (‚Ñï -> a) -> ùêº a
repeat :: ‚Ñï -> a -> ùêº a
build :: forall a. ‚Ñï -> a -> (a -> a) -> ùêº a
upTo :: ‚Ñï -> ùêº ‚Ñï
withIndex :: ToIter a t => t -> ùêº (‚Ñï ‚àß a)
withFirst :: ToIter a t => t -> ùêº (ùîπ ‚àß a)
mapFirst :: ToIter a t => (a -> a) -> t -> ùêº a
mapAfterFirst :: ToIter a t => (a -> a) -> t -> ùêº a
withLast :: ToIter a t => t -> ùêº (ùîπ ‚àß a)
mapLast :: ToIter a t => (a -> a) -> t -> ùêº a
mapBeforeLast :: ToIter a t => (a -> a) -> t -> ùêº a
filterMap :: ToIter a t => (a -> ùëÇ b) -> t -> ùêº b
filter :: ToIter a t => (a -> ùîπ) -> t -> ùêº a
filterOn :: ToIter a t => t -> (a -> ùîπ) -> ùêº a
inbetween :: ToIter a t => a -> t -> ùêº a
execN :: Monad m => ‚Ñï -> m () -> m ()
applyN :: ‚Ñï -> b -> (b -> b) -> b
appendN :: Monoid a => ‚Ñï -> a -> a
alignLeftFill :: ‚ÑÇ -> ‚Ñï -> ùïä -> ùïä
alignLeft :: ‚Ñï -> ùïä -> ùïä
alignRightFill :: ‚ÑÇ -> ‚Ñï -> ùïä -> ùïä
alignRight :: ‚Ñï -> ùïä -> ùïä
list :: ToIter a t => t -> ùêø a
lazyList :: ToIter a t => t -> [a]
string :: ToIter ‚ÑÇ t => t -> ùïä
stringC :: ToIter ùïä t => t -> ùïä
stringS :: (ToIter ‚ÑÇ t, Sized t) => t -> ùïä
stringCS :: (ToIter ùïä t, Sized t) => t -> ùïä
showCollection :: ToIter a t => ùïä -> ùïä -> ùïä -> (a -> ùïä) -> t -> ùïä
showWithùêº :: (a -> ùïä) -> ùêº a -> ùïä
firstMaxByLT :: ToIter a t => (a -> a -> ùîπ) -> t -> ùëÇ a
foldbp :: ToIter a t => b -> c -> (a -> b -> b ‚àß (c -> c)) -> t -> b ‚àß c
foldbpOnFrom :: ToIter a t => t -> b -> c -> (a -> b -> b ‚àß (c -> c)) -> b ‚àß c
sortWith :: ToIter a t => (a -> a -> Ordering) -> t -> ùêø a
sortOn :: (ToIter a t, Ord b) => (a -> b) -> t -> ùêø a
sort :: (ToIter a t, Ord a) => t -> ùêø a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùêº a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Init.ùïä UVMHS.Core.Classes.Morphism.‚áÑ UVMHS.Core.Init.ùêº UVMHS.Core.Init.‚ÑÇ
instance UVMHS.Core.Classes.All.All UVMHS.Core.Init.ùîπ
instance (UVMHS.Core.Classes.All.All a, UVMHS.Core.Classes.All.All b) => UVMHS.Core.Classes.All.All (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.All.All a, UVMHS.Core.Classes.All.All b) => UVMHS.Core.Classes.All.All (a UVMHS.Core.Init.‚àß b)

module UVMHS.Core.Data.Stream
emptyùëÜ :: ùëÜ a
singleùëÜ :: a -> ùëÜ a
appendùëÜ :: ùëÜ a -> ùëÜ a -> ùëÜ a
mapùëÜ :: (a -> b) -> ùëÜ a -> ùëÜ b
mjoinùëÜ :: forall a. ùëÜ (ùëÜ a) -> ùëÜ a
bindùëÜ :: ùëÜ a -> (a -> ùëÜ b) -> ùëÜ b
unconsùëÜ :: ùëÜ a -> ùëÇ (a ‚àß ùëÜ a)
uncons :: ToStream a t => t -> ùëÇ (a ‚àß ùëÜ a)
eqByùëÜ :: (a -> a -> ùîπ) -> ùëÜ a -> ùëÜ a -> ùîπ
compareByùëÜ :: (a -> a -> Ordering) -> ùëÜ a -> ùëÜ a -> Ordering
showWithùëÜ :: (a -> ùïä) -> ùëÜ a -> ùïä
isEmpty :: ToStream a t => t -> ùîπ
naturals :: ùëÜ ‚Ñï
zipWith :: (ToStream a t‚ÇÅ, ToStream b t‚ÇÇ) => (a -> b -> c) -> t‚ÇÅ -> t‚ÇÇ -> ùëÜ c
zip :: (ToStream a t‚ÇÅ, ToStream b t‚ÇÇ) => t‚ÇÅ -> t‚ÇÇ -> ùëÜ (a ‚àß b)
zip3With :: (ToStream a t‚ÇÅ, ToStream b t‚ÇÇ, ToStream c t‚ÇÉ) => (a -> b -> c -> d) -> t‚ÇÅ -> t‚ÇÇ -> t‚ÇÉ -> ùëÜ d
zip3 :: (ToStream a t‚ÇÅ, ToStream b t‚ÇÇ, ToStream c t‚ÇÉ) => t‚ÇÅ -> t‚ÇÇ -> t‚ÇÉ -> ùëÜ ((a ‚àß b) ‚àß c)
firstN :: ToStream a t => ‚Ñï -> t -> ùëÜ a
lastN :: ToStream a t => ‚Ñï -> t -> ùêº a
skipN :: ToStream a t => ‚Ñï -> t -> ùëÜ a
stripPrefixùëÜ :: (Eq a, ToStream a t‚ÇÅ, ToStream a t‚ÇÇ) => t‚ÇÅ -> t‚ÇÇ -> ùëÇ (ùëÜ a)
prefixBeforeùëÜ :: ToStream a t => (a -> ùîπ) -> t -> ùëÜ a
prefixBeforeNùëÜ :: ToStream a t => ‚Ñï -> (a -> ‚Ñï) -> t -> ùëÜ a
postfixAfterùëÜ :: ToStream a t => (a -> ùîπ) -> t -> ùëÜ a
inbetweenùëÜ :: ToStream a t => a -> t -> ùëÜ a
coredata_stream_e1 :: ùëÜ ‚Ñï
split :: ToStream (a ‚àß b) t => t -> ùëÜ a ‚àß ùëÜ b
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÜ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÜ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Init.ùëÜ
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Init.ùëÜ
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Init.ùëÜ
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÜ a)

module UVMHS.Core.Data.Set
p√∏ :: ùëÉ a
singleùëÉ :: Ord a => a -> ùëÉ a
(‚àà) :: Ord a => a -> ùëÉ a -> ùîπ
(‚àâ) :: Ord a => a -> ùëÉ a -> ùîπ
(‚äÜ) :: Ord a => ùëÉ a -> ùëÉ a -> ùîπ
(‚äá) :: Ord a => ùëÉ a -> ùëÉ a -> ùîπ
(‚à™) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
(‚à©) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
(‚àñ) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
psize :: ùëÉ a -> ‚Ñï
pmin :: ùëÉ a -> ùëÇ (a ‚àß ùëÉ a)
pmax :: ùëÉ a -> ùëÇ (a ‚àß ùëÉ a)
pmap :: Ord b => (a -> b) -> ùëÉ a -> ùëÉ b
streamùëÉ :: ùëÉ a -> ùëÜ a
powùêº :: Ord a => ùêº a -> ùëÉ a
pow :: (Ord a, ToIter a t) => t -> ùëÉ a
uniques :: (Ord a, ToIter a t) => t -> ùêº a
unions :: (Ord a, ToIter (ùëÉ a) t) => t -> ùëÉ a
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Unit (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Cross (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Prodoid (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Arithmetic.Additive (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÉ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÉ a)

module UVMHS.Core.Data.Sequence
q√∏ :: ùëÑ a
consùëÑ :: a -> ùëÑ a -> ùëÑ a
unconsùëÑ :: ùëÑ a -> ùëÇ (a ‚àß ùëÑ a)
snocùëÑ :: ùëÑ a -> a -> ùëÑ a
unsnocùëÑ :: ùëÑ a -> ùëÇ (ùëÑ a ‚àß a)
singleùëÑ :: a -> ùëÑ a
appendùëÑ :: ùëÑ a -> ùëÑ a -> ùëÑ a
mapùëÑ :: (a -> b) -> ùëÑ a -> ùëÑ b
bindùëÑ :: ùëÑ a -> (a -> ùëÑ b) -> ùëÑ b
streamùëÑ :: ùëÑ a -> ùëÜ a
seqùêº :: ùêº a -> ùëÑ a
seq :: ToIter a t => t -> ùëÑ a
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÑ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÑ a)

module UVMHS.Core.Data.Dict
lookupùê∑ :: Ord k => (k ‚á∞ v) -> k -> ùëÇ v
singleùê∑ :: (k ‚àß v) -> k ‚á∞ v
d√∏ :: k ‚á∞ v
(‚Ü¶) :: Ord k => k -> v -> k ‚á∞ v
infixr 2 ‚Ü¶
(‚ãµ) :: Ord k => k -> (k ‚á∞ v) -> ùîπ
(‚©å) :: Ord k => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
(‚©ç) :: Ord k => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
delete :: Ord k => k -> (k ‚á∞ v) -> k ‚á∞ v
dsize :: Ord k => (k ‚á∞ v) -> ‚Ñï
subDictBy :: Ord k => (v -> v -> ùîπ) -> (k ‚á∞ v) -> (k ‚á∞ v) -> ùîπ
unionWith :: Ord k => (v -> v -> v) -> (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
(‚äé) :: (Ord k, Additive v) => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
unionsWith :: (Ord k, ToIter (k ‚á∞ v) t) => (v -> v -> v) -> t -> k ‚á∞ v
interWith :: Ord k => (v‚ÇÅ -> v‚ÇÇ -> v‚ÇÉ) -> (k ‚á∞ v‚ÇÅ) -> (k ‚á∞ v‚ÇÇ) -> k ‚á∞ v‚ÇÉ
dminView :: (k ‚á∞ v) -> ùëÇ ((k ‚àß v) ‚àß (k ‚á∞ v))
dmaxView :: (k ‚á∞ v) -> ùëÇ ((k ‚àß v) ‚àß (k ‚á∞ v))
dminKey :: (k ‚á∞ v) -> ùëÇ k
dmaxKey :: (k ‚á∞ v) -> ùëÇ k
dview :: Ord k => k -> (k ‚á∞ v) -> ùëÇ (v ‚àß (k ‚á∞ v))
without :: Ord k => ùëÉ k -> (k ‚á∞ v) -> k ‚á∞ v
restrict :: Ord k => ùëÉ k -> (k ‚á∞ v) -> k ‚á∞ v
keys :: Ord k => (k ‚á∞ v) -> ùëÉ k
values :: (k ‚á∞ v) -> ùêº v
mapùê∑ :: (v‚ÇÅ -> v‚ÇÇ) -> (k ‚á∞ v‚ÇÅ) -> k ‚á∞ v‚ÇÇ
mapKùê∑ :: Ord k => (k -> v‚ÇÅ -> v‚ÇÇ) -> (k ‚á∞ v‚ÇÅ) -> k ‚á∞ v‚ÇÇ
streamùê∑ :: (k ‚á∞ v) -> ùëÜ (k ‚àß v)
dictùêº :: Ord k => ùêº (k ‚àß v) -> k ‚á∞ v
dict :: (Ord k, ToIter (k ‚á∞ v) t) => t -> k ‚á∞ v
assoc :: (Ord k, ToIter (k ‚àß v) t) => t -> k ‚á∞ v
djoin :: (Ord k, Ord v‚ÇÅ, Ord v‚ÇÇ) => (k ‚á∞ ùëÉ v‚ÇÅ) -> (k ‚á∞ ùëÉ v‚ÇÇ) -> k ‚á∞ ùëÉ (v‚ÇÅ ‚àß v‚ÇÇ)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Lookup k v (k UVMHS.Core.Init.‚á∞ v)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Single (k UVMHS.Core.Init.‚àß v) (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.POrd v) => UVMHS.Core.Classes.Lattice.POrd (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Core.Classes.Monoid.Null (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append v) => UVMHS.Core.Classes.Monoid.Append (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append v) => UVMHS.Core.Classes.Monoid.Monoid (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Null k, UVMHS.Core.Classes.Monoid.Null v) => UVMHS.Core.Classes.Monoid.Unit (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append k, UVMHS.Core.Classes.Monoid.Append v, UVMHS.Core.Classes.Monoid.Cross v) => UVMHS.Core.Classes.Monoid.Cross (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Monoid k, UVMHS.Core.Classes.Monoid.Prodoid v) => UVMHS.Core.Classes.Monoid.Prodoid (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Core.Classes.Arithmetic.Zero (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus v) => UVMHS.Core.Classes.Arithmetic.Plus (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus v) => UVMHS.Core.Classes.Arithmetic.Additive (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Zero k, UVMHS.Core.Classes.Arithmetic.Zero v) => UVMHS.Core.Classes.Arithmetic.One (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus k, UVMHS.Core.Classes.Arithmetic.Plus v, UVMHS.Core.Classes.Arithmetic.Times v) => UVMHS.Core.Classes.Arithmetic.Times (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Additive k, UVMHS.Core.Classes.Arithmetic.Multiplicative v) => UVMHS.Core.Classes.Arithmetic.Multiplicative (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Core.Classes.Lattice.Bot (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join v) => UVMHS.Core.Classes.Lattice.Join (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join v) => UVMHS.Core.Classes.Lattice.JoinLattice (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Core.Classes.Lattice.Top (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Meet v) => UVMHS.Core.Classes.Lattice.Meet (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Meet v) => UVMHS.Core.Classes.Lattice.MeetLattice (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Core.Classes.Functor.Functor ((UVMHS.Core.Init.‚á∞) k)
instance UVMHS.Core.Classes.Collections.ToStream (k UVMHS.Core.Init.‚àß v) (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Core.Classes.Collections.ToIter (k UVMHS.Core.Init.‚àß v) (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Show.Show k, GHC.Show.Show v) => GHC.Show.Show (k UVMHS.Core.Init.‚á∞ v)

module UVMHS.Core.Data

module UVMHS.Core.Lens
newtype a ‚ü¢ b
Lens :: (a -> b ‚àß (b -> a)) -> (‚ü¢) a b
[runLens] :: (‚ü¢) a b -> a -> b ‚àß (b -> a)
infixr 2 ‚ü¢
data a ‚å≤ b
Prism :: (b -> a) -> (a -> ùëÇ b) -> (‚å≤) a b
[construct] :: (‚å≤) a b -> b -> a
[view] :: (‚å≤) a b -> a -> ùëÇ b
infixr 2 ‚å≤
class Alter (t :: ‚òÖ -> ‚òÖ -> ‚òÖ)
alter :: Alter t => t a b -> (b -> b) -> a -> a
class AlterM (t :: ‚òÖ -> ‚òÖ -> ‚òÖ)
alterM :: (AlterM t, Monad m) => t a b -> (b -> m b) -> a -> m a
update :: Alter t => t a b -> b -> a -> a
updateM :: (AlterM t, Monad m) => t a b -> m b -> a -> m a
lens :: (a -> b) -> (a -> b -> a) -> a ‚ü¢ b
isoLens :: (a -> b) -> (b -> a) -> a ‚ü¢ b
access :: (a ‚ü¢ b) -> a -> b
prism :: (b -> a) -> (a -> ùëÇ b) -> a ‚å≤ b
isoPrism :: (b -> a) -> (a -> b) -> a ‚å≤ b
unsafeView :: (a ‚å≤ b) -> a -> b
shape :: (a ‚å≤ b) -> a -> ùîπ
leftL :: (a ‚à® b) ‚å≤ a
rightL :: (a ‚à® b) ‚å≤ b
fstL :: (a ‚àß b) ‚ü¢ a
sndL :: (a ‚àß b) ‚ü¢ b
nothingL :: ùëÇ a ‚å≤ ()
justL :: ùëÇ a ‚å≤ a
singleL :: ùêø a ‚å≤ a
unconsL :: ùêø a ‚å≤ (a ‚àß ùêø a)
class HasPrism a b
hasPrism :: HasPrism a b => a ‚å≤ b
class HasLens a b
hasLens :: HasLens a b => a ‚ü¢ b
Œπ :: HasPrism a b => b -> a
Œπview :: forall b a. HasPrism a b => a -> ùëÇ b
œÄ :: HasLens a b => a -> b
instance UVMHS.Core.Lens.HasLens a a
instance UVMHS.Core.Lens.HasPrism a a
instance UVMHS.Core.Lens.AlterM (UVMHS.Core.Lens.‚ü¢)
instance UVMHS.Core.Lens.Alter (UVMHS.Core.Lens.‚ü¢)
instance UVMHS.Core.Lens.Alter (UVMHS.Core.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Lens.‚ü¢)

module UVMHS.Core.Effects
class MonadIO (m :: ‚òÖ -> ‚òÖ)
io :: MonadIO m => IO a -> m a
class LiftIO t
liftIO :: forall m. (LiftIO t, Monad m) => (forall a. IO a -> m a) -> forall a. IO a -> t m a
class MonadReader r m | m -> r
ask :: MonadReader r m => m r
local :: forall a. MonadReader r m => r -> m a -> m a
class LiftReader t
liftAsk :: forall m r. (LiftReader t, Monad m) => m r -> t m r
liftLocal :: forall m r. (LiftReader t, Monad m) => (forall a. r -> m a -> m a) -> forall a. r -> t m a -> t m a
class MonadWriter o m | m -> o
tell :: MonadWriter o m => o -> m ()
hijack :: forall a. MonadWriter o m => m a -> m (o ‚àß a)
class LiftWriter t
liftTell :: forall m o. (LiftWriter t, Monad m) => (o -> m ()) -> o -> t m ()
liftHijack :: forall m o. (LiftWriter t, Monad m) => (forall a. m a -> m (o ‚àß a)) -> forall a. t m a -> t m (o ‚àß a)
class MonadState s m | m -> s
get :: MonadState s m => m s
put :: MonadState s m => s -> m ()
class LiftState t
liftGet :: forall m s. (LiftState t, Monad m) => m s -> t m s
liftPut :: forall m s. (LiftState t, Monad m) => (s -> m ()) -> s -> t m ()
class MonadFail m
abort :: forall a. MonadFail m => m a
(‚éÖ) :: forall a. MonadFail m => m a -> m a -> m a
infixl 4 ‚éÖ
class LiftFail t
liftAbort :: forall m. (LiftFail t, Monad m) => (forall a. m a) -> forall a. t m a
liftTry :: forall m. (LiftFail t, Monad m) => (forall a. m a -> m a -> m a) -> forall a. t m a -> t m a -> t m a
class MonadError e m | m -> e
throw :: forall a. MonadError e m => e -> m a
catch :: forall a. MonadError e m => m a -> (e -> m a) -> m a
class LiftError t
liftThrow :: forall m e. (LiftError t, Monad m) => (forall a. e -> m a) -> forall a. e -> t m a
liftCatch :: forall m e. (LiftError t, Monad m) => (forall a. m a -> (e -> m a) -> m a) -> forall a. t m a -> (e -> t m a) -> t m a
class MonadNondet m
mzero :: forall a. MonadNondet m => m a
(‚äû) :: forall a. MonadNondet m => m a -> m a -> m a
infixl 4 ‚äû
class LiftNondet t
liftMzero :: forall m. (LiftNondet t, Monad m) => (forall a. m a) -> forall a. t m a
liftMplus :: forall m. (LiftNondet t, Monad m) => (forall a. m a -> m a -> m a) -> forall a. t m a -> t m a -> t m a
class MonadTop m
mtop :: forall a. MonadTop m => m a
class LiftTop t
liftMtop :: forall m. (LiftTop t, Monad m) => (forall a. m a) -> forall a. t m a
class MonadCont r m | m -> r
callCC :: forall a. MonadCont r m => ((a -> m r) -> m r) -> m a
withC :: forall a. MonadCont r m => (a -> m r) -> m a -> m r
class LiftCont t
liftCallCC :: forall m r. (LiftCont t, Monad m) => (forall a. ((a -> m r) -> m r) -> m a) -> forall a. ((a -> t m r) -> t m r) -> t m a
liftWithC :: forall m r. (LiftCont t, Monad m) => (forall a. (a -> m r) -> m a -> m r) -> forall a. (a -> t m r) -> t m a -> t m r
askL :: (Monad m, MonadReader r m) => (r ‚ü¢ a) -> m a
mapEnv :: (Monad m, MonadReader r m) => (r -> r) -> m a -> m a
localL :: (Monad m, MonadReader r‚ÇÅ m) => (r‚ÇÅ ‚ü¢ r‚ÇÇ) -> r‚ÇÇ -> m a -> m a
mapEnvL :: (Monad m, MonadReader r‚ÇÅ m) => (r‚ÇÅ ‚ü¢ r‚ÇÇ) -> (r‚ÇÇ -> r‚ÇÇ) -> m a -> m a
tellL :: (Monoid o‚ÇÅ, Monad m, MonadWriter o‚ÇÅ m) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> o‚ÇÇ -> m ()
hijackL :: (Monad m, MonadWriter o‚ÇÅ m, Monoid o‚ÇÇ) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> m a -> m (o‚ÇÇ ‚àß a)
mapOut :: (Monad m, MonadWriter o m) => (o -> o) -> m a -> m a
retOut :: forall o m a. (Monad m, MonadWriter o m) => m a -> m o
getL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> m a
putL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> a -> m ()
modify :: (Monad m, MonadState s m) => (s -> s) -> m ()
modifyL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> (a -> a) -> m ()
getput :: (Monad m, MonadState s m) => s -> m s
getputL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m s‚ÇÇ
next :: (Monad m, MonadState s m, Multiplicative s) => m s
nextL :: (Monad m, MonadState s m, Multiplicative a) => (s ‚ü¢ a) -> m a
bump :: (Monad m, MonadState s m, Multiplicative s) => m ()
bumpL :: (Monad m, MonadState s m, Multiplicative a) => (s ‚ü¢ a) -> m ()
localize :: (Monad m, MonadState s m) => s -> m a -> m (s ‚àß a)
localizeL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m a -> m (s‚ÇÇ ‚àß a)
localState :: (Monad m, MonadState s m) => s -> m a -> m a
localStateL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m a -> m a
retState :: forall s m a. (Monad m, MonadState s m) => m a -> m s
abortùëÇ :: (Monad m, MonadFail m) => ùëÇ a -> m a
tries :: (Monad m, MonadFail m, ToIter (m a) t) => t -> m a
guard :: (Monad m, MonadFail m) => ùîπ -> m ()
oneOrMoreSplit :: (Monad m, MonadFail m) => m a -> m (a ‚àß ùêø a)
oneOrMore :: (Monad m, MonadFail m) => m a -> m (ùêø a)
many :: (Monad m, MonadFail m) => m a -> m (ùêø a)
throwùëÇ :: (Monad m, MonadError e m) => e -> ùëÇ a -> m a
mconcat :: (MonadNondet m, ToIter (m a) t) => t -> m a
from :: (Monad m, MonadNondet m, ToIter a t) => t -> m a
oneOrMoreSplitNT :: (Monad m, MonadNondet m) => m a -> m (a ‚àß ùêø a)
oneOrMoreNT :: (Monad m, MonadNondet m) => m a -> m (ùêø a)
manyNT :: (Monad m, MonadNondet m) => m a -> m (ùêø a)
twoOrMoreSplitNT :: (Monad m, MonadNondet m) => m a -> m ((a ‚àß a) ‚àß ùêø a)
manySepBy :: (Monad m, MonadNondet m) => m () -> m a -> m (ùêø a)
manyPrefBy :: (Monad m, MonadNondet m) => m () -> m a -> m (ùêø a)
mzeroùëÇ :: (Monad m, MonadNondet m) => ùëÇ a -> m a
returnùëÉ :: forall m a. (Monad m, MonadNondet m) => ùëÉ a -> m a
reset :: (Monad m, MonadCont r m) => m r -> m r
modifyC :: (Monad m, MonadCont r m) => (r -> m r) -> m a -> m a
withCOn :: (Monad m, MonadCont r m) => m a -> (a -> m r) -> m r
deriveAsk :: forall m‚ÇÅ m‚ÇÇ r. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadReader r m‚ÇÇ) => m‚ÇÅ r
deriveLocal :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadReader r m‚ÇÇ) => r -> m‚ÇÅ a -> m‚ÇÅ a
deriveTell :: forall m‚ÇÅ m‚ÇÇ o. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadWriter o m‚ÇÇ) => o -> m‚ÇÅ ()
deriveHijack :: forall m‚ÇÅ m‚ÇÇ o a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadWriter o m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ (o ‚àß a)
deriveGet :: forall m‚ÇÅ m‚ÇÇ s. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadState s m‚ÇÇ) => m‚ÇÅ s
derivePut :: forall m‚ÇÅ m‚ÇÇ s. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadState s m‚ÇÇ) => s -> m‚ÇÅ ()
deriveAbort :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadFail m‚ÇÇ) => m‚ÇÅ a
deriveTry :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadFail m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ a -> m‚ÇÅ a
deriveThrow :: forall m‚ÇÅ m‚ÇÇ e a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadError e m‚ÇÇ) => e -> m‚ÇÅ a
deriveCatch :: forall m‚ÇÅ m‚ÇÇ e a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadError e m‚ÇÇ) => m‚ÇÅ a -> (e -> m‚ÇÅ a) -> m‚ÇÅ a
deriveMzero :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadNondet m‚ÇÇ) => m‚ÇÅ a
deriveMplus :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadNondet m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ a -> m‚ÇÅ a
deriveMtop :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadTop m‚ÇÇ) => m‚ÇÅ a
deriveCallCC :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadCont r m‚ÇÇ) => ((a -> m‚ÇÅ r) -> m‚ÇÅ r) -> m‚ÇÅ a
deriveWithC :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadCont r m‚ÇÇ) => (a -> m‚ÇÅ r) -> m‚ÇÅ a -> m‚ÇÅ r
instance UVMHS.Core.Effects.MonadNondet UVMHS.Core.Init.ùêº
instance UVMHS.Core.Effects.MonadNondet UVMHS.Core.Init.ùêø
instance UVMHS.Core.Effects.MonadNondet UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Effects.MonadError e ((UVMHS.Core.Init.‚à®) e)
instance UVMHS.Core.Effects.MonadFail UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.MonadWriter o ((UVMHS.Core.Init.‚àß) o)
instance UVMHS.Core.Effects.MonadReader r ((->) r)

module UVMHS.Core.LensDerivedInstances

module UVMHS.Core.Pointed
data AddNull a
Null :: AddNull a
AddNull :: a -> AddNull a
elimAddNull :: b -> (a -> b) -> AddNull a -> b
data AddBot a
Bot :: AddBot a
AddBot :: a -> AddBot a
elimAddBot :: b -> (a -> b) -> AddBot a -> b
data AddTop a
Top :: AddTop a
AddTop :: a -> AddTop a
elimAddTop :: b -> (a -> b) -> AddTop a -> b
data AddBT a
BotBT :: AddBT a
TopBT :: AddBT a
AddBT :: a -> AddBT a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddBT a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddBT a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddBT a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddTop a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddTop a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddTop a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddBot a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddBot a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddBot a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddNull a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddNull a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddBT a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.JoinLattice a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddTop a)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.MeetLattice a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddBot a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.MeetLattice a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddNull

module UVMHS.Core.TH
class MonadQ (m :: ‚òÖ -> ‚òÖ)
qio :: MonadQ m => Q a -> m a
thString :: ùïä -> Exp
thConNames :: Con -> ùêø Name
thTyVarBndrName :: TyVarBndr -> Name
thSingleClause :: ùêø Pat -> Exp -> Clause
thSingleMatch :: Pat -> Exp -> Match
thViewSimpleCon :: Con -> ùëÇ (Name ‚àß ùêø Type)
thTyConIL :: Info ‚å≤ Dec
thDataDL :: Dec ‚å≤ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß ùêø Con) ‚àß ùêø DerivClause)
thNewtypeDL :: Dec ‚å≤ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß Con) ‚àß ùêø DerivClause)
thViewADT :: Dec -> ùëÇ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß ùêø Con) ‚àß ùêø DerivClause)
thViewSingleConADT :: Dec -> ùëÇ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß Con) ‚àß ùêø DerivClause)
thRecCL :: Con ‚å≤ (Name ‚àß ùêø VarStrictType)
instance UVMHS.Core.TH.MonadQ Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Functor.Functor Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Monad.Return Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Monad.Bind Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Monad.Monad Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Effects.MonadIO Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.DSL.Apply Language.Haskell.TH.Syntax.Exp
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Exp
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Pat
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Type
instance UVMHS.Core.Classes.DSL.Apply Language.Haskell.TH.Syntax.Type
instance UVMHS.Core.Classes.DSL.Arrow Language.Haskell.TH.Syntax.Type

module UVMHS.Core.Time
type Time = UTCTime
type TimeD = NominalDiffTime
secondsTimeD :: TimeD -> ùîª
(‚®∫) :: Time -> Time -> TimeD
infixl 3 ‚®∫
(‚®π) :: Time -> TimeD -> Time
infixl 3 ‚®π
now :: IO Time
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Time.TimeD

module UVMHS.Core.Transformers
newtype (‚ä°) (t‚ÇÅ :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ)) (t‚ÇÇ :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ)) m a
Compose2 :: t‚ÇÅ (t‚ÇÇ m) a -> (‚ä°) m a
[unCompose2] :: (‚ä°) m a -> t‚ÇÅ (t‚ÇÇ m) a
infixr 6 ‚ä°
deriveLiftIO :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftIO t‚ÇÇ) => (forall a. IO a -> m a) -> forall a. IO a -> t‚ÇÅ m a
deriveLiftAsk :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftReader t‚ÇÇ) => m r -> t‚ÇÅ m r
deriveLiftLocal :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftReader t‚ÇÇ) => (forall a. r -> m a -> m a) -> forall a. r -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftTell :: forall t‚ÇÅ t‚ÇÇ m o. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftWriter t‚ÇÇ) => (o -> m ()) -> o -> t‚ÇÅ m ()
deriveLiftHijack :: forall t‚ÇÅ t‚ÇÇ m o. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftWriter t‚ÇÇ) => (forall a. m a -> m (o ‚àß a)) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m (o ‚àß a)
deriveLiftGet :: forall t‚ÇÅ t‚ÇÇ m s. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftState t‚ÇÇ) => m s -> t‚ÇÅ m s
deriveLiftPut :: forall t‚ÇÅ t‚ÇÇ m s. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftState t‚ÇÇ) => (s -> m ()) -> s -> t‚ÇÅ m ()
deriveLiftAbort :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftFail t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftTry :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftFail t‚ÇÇ) => (forall a. m a -> m a -> m a) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftThrow :: forall t‚ÇÅ t‚ÇÇ m e. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftError t‚ÇÇ) => (forall a. e -> m a) -> forall a. e -> t‚ÇÅ m a
deriveLiftCatch :: forall t‚ÇÅ t‚ÇÇ m e. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftError t‚ÇÇ) => (forall a. m a -> (e -> m a) -> m a) -> forall a. t‚ÇÅ m a -> (e -> t‚ÇÅ m a) -> t‚ÇÅ m a
deriveLiftMzero :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftNondet t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftMplus :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftNondet t‚ÇÇ) => (forall a. m a -> m a -> m a) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftMtop :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftTop t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftCallCC :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftCont t‚ÇÇ) => (forall a. ((a -> m r) -> m r) -> m a) -> forall a. ((a -> t‚ÇÅ m r) -> t‚ÇÅ m r) -> t‚ÇÅ m a
deriveLiftWithC :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftCont t‚ÇÇ) => (forall a. (a -> m r) -> m a -> m r) -> forall a. (a -> t‚ÇÅ m r) -> t‚ÇÅ m a -> t‚ÇÅ m r
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Functor.Functor ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Monad.Return ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Monad.Bind ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Monad.Monad ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (UVMHS.Core.Classes.Functor.Functor2 t‚ÇÅ, UVMHS.Core.Classes.Functor.Functor2 t‚ÇÇ) => UVMHS.Core.Classes.Functor.Functor2 (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftIO t‚ÇÅ, UVMHS.Core.Effects.LiftIO t‚ÇÇ) => UVMHS.Core.Effects.LiftIO (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftReader t‚ÇÅ, UVMHS.Core.Effects.LiftReader t‚ÇÇ) => UVMHS.Core.Effects.LiftReader (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftWriter t‚ÇÅ, UVMHS.Core.Effects.LiftWriter t‚ÇÇ) => UVMHS.Core.Effects.LiftWriter (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftState t‚ÇÅ, UVMHS.Core.Effects.LiftState t‚ÇÇ) => UVMHS.Core.Effects.LiftState (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftFail t‚ÇÅ, UVMHS.Core.Effects.LiftFail t‚ÇÇ) => UVMHS.Core.Effects.LiftFail (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftError t‚ÇÅ, UVMHS.Core.Effects.LiftError t‚ÇÇ) => UVMHS.Core.Effects.LiftError (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftNondet t‚ÇÅ, UVMHS.Core.Effects.LiftNondet t‚ÇÇ) => UVMHS.Core.Effects.LiftNondet (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftTop t‚ÇÅ, UVMHS.Core.Effects.LiftTop t‚ÇÇ) => UVMHS.Core.Effects.LiftTop (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftCont t‚ÇÅ, UVMHS.Core.Effects.LiftCont t‚ÇÇ) => UVMHS.Core.Effects.LiftCont (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadIO m, UVMHS.Core.Effects.LiftIO t) => UVMHS.Core.Effects.MonadIO (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadReader r m, UVMHS.Core.Effects.LiftReader t) => UVMHS.Core.Effects.MonadReader r (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadWriter o m, UVMHS.Core.Effects.LiftWriter t) => UVMHS.Core.Effects.MonadWriter o (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadState s m, UVMHS.Core.Effects.LiftState t) => UVMHS.Core.Effects.MonadState s (t m)
instance forall k (m :: * -> *) (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadFail m, UVMHS.Core.Effects.LiftFail t) => UVMHS.Core.Effects.MonadFail (t m)
instance forall k (m :: * -> *) e (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadError e m, UVMHS.Core.Effects.LiftError t) => UVMHS.Core.Effects.MonadError e (t m)
instance forall k (m :: * -> *) (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadNondet m, UVMHS.Core.Effects.LiftNondet t) => UVMHS.Core.Effects.MonadNondet (t m)
instance forall k (m :: * -> *) (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadTop m, UVMHS.Core.Effects.LiftTop t) => UVMHS.Core.Effects.MonadTop (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont r m, UVMHS.Core.Effects.LiftCont t) => UVMHS.Core.Effects.MonadCont r (t m)
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftIO t‚ÇÇ) => UVMHS.Core.Effects.LiftIO t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftReader t‚ÇÇ) => UVMHS.Core.Effects.LiftReader t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftWriter t‚ÇÇ) => UVMHS.Core.Effects.LiftWriter t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftState t‚ÇÇ) => UVMHS.Core.Effects.LiftState t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftFail t‚ÇÇ) => UVMHS.Core.Effects.LiftFail t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftError t‚ÇÇ) => UVMHS.Core.Effects.LiftError t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftNondet t‚ÇÇ) => UVMHS.Core.Effects.LiftNondet t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftTop t‚ÇÇ) => UVMHS.Core.Effects.LiftTop t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftCont t‚ÇÇ) => UVMHS.Core.Effects.LiftCont t‚ÇÅ

module UVMHS.Core.Monads
newtype ID a
ID :: a -> ID a
[unID] :: ID a -> a
newtype ReaderT r m a
ReaderT :: (r -> m a) -> ReaderT r m a
[unReaderT] :: ReaderT r m a -> r -> m a
runReaderT :: forall r m a. r -> ReaderT r m a -> m a
newtype WriterT o m a
WriterT :: m (o ‚àß a) -> WriterT o m a
[unWriterT] :: WriterT o m a -> m (o ‚àß a)
evalWriterT :: forall o m a. Functor m => WriterT o m a -> m a
newtype StateT s m a
StateT :: (s -> m (s ‚àß a)) -> StateT s m a
[unStateT] :: StateT s m a -> s -> m (s ‚àß a)
runStateT :: forall s m a. s -> StateT s m a -> m (s ‚àß a)
evalStateT :: forall s m a. Functor m => s -> StateT s m a -> m a
type State s = StateT s ID
runState :: s -> State s a -> s ‚àß a
evalState :: s -> State s a -> a
newtype FailT m a
FailT :: m (ùëÇ a) -> FailT m a
[unFailT] :: FailT m a -> m (ùëÇ a)
newtype ErrorT e m a
ErrorT :: m (e ‚à® a) -> ErrorT e m a
[unErrorT] :: ErrorT e m a -> m (e ‚à® a)
newtype NondetT m a
NondetT :: m (ùëÑ a) -> NondetT m a
[unNondetT] :: NondetT m a -> m (ùëÑ a)
newtype ContT r m a
ContT :: ((a -> m r) -> m r) -> ContT r m a
[unContT] :: ContT r m a -> (a -> m r) -> m r
runContT :: (a -> m r) -> ContT r m a -> m r
newtype RWST r o s m a
RWST :: ReaderT r (WriterT o (StateT s m)) a -> RWST r o s m a
[unRWST] :: RWST r o s m a -> ReaderT r (WriterT o (StateT s m)) a
mkRWST :: forall r o s m a. Monad m => (r -> s -> m ((s ‚àß o) ‚àß a)) -> RWST r o s m a
runRWST :: forall r o s m a. Monad m => r -> s -> RWST r o s m a -> m ((s ‚àß o) ‚àß a)
evalRWST :: forall r o s m a. Monad m => r -> s -> RWST r o s m a -> m a
type RWS r o s = RWST r o s ID
mkRWS :: forall r o s a. (r -> s -> (s ‚àß o) ‚àß a) -> RWS r o s a
runRWS :: forall r o s a. r -> s -> RWS r o s a -> (s ‚àß o) ‚àß a
evalRWS :: forall r o s a. r -> s -> RWS r o s a -> a
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Return m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.RWST r o s m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.RWST r o s m)
instance UVMHS.Core.Classes.Lattice.Difference a => UVMHS.Core.Classes.Lattice.Difference (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Dual a => UVMHS.Core.Classes.Lattice.Dual (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Monoid.Null a, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (s UVMHS.Core.Init.‚àß (o UVMHS.Core.Init.‚àß r')) m) => UVMHS.Core.Effects.MonadCont r' (UVMHS.Core.Monads.RWST r o s m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null s, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.RWST r o s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append o, UVMHS.Core.Classes.Monoid.Append s, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.RWST r o s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monoid.Monoid s, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.RWST r o s m a)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.RWST r o s)
instance UVMHS.Core.Monads.RWST r o s UVMHS.Core.Classes.Morphism.‚áÑ‚Åº (UVMHS.Core.Monads.ReaderT r UVMHS.Core.Transformers.‚ä° (UVMHS.Core.Monads.WriterT o UVMHS.Core.Transformers.‚ä° UVMHS.Core.Monads.StateT s))
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.ContT r m)
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.ContT r m)
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.ContT r m)
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.ContT r m)
instance UVMHS.Core.Classes.Functor.Functor2Iso (UVMHS.Core.Monads.ContT r)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.ContT r m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null r) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ContT r m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append r) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ContT r m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid r) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ContT r m a)
instance UVMHS.Core.Classes.Monad.Transformer (UVMHS.Core.Monads.ContT r)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ContT r)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ContT r)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.ContT (o UVMHS.Core.Init.‚àß r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.ContT (s UVMHS.Core.Init.‚àß r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.ContT (UVMHS.Core.Init.ùëÇ r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ContT (e UVMHS.Core.Init.‚à® r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.ContT r m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.ContT r m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Monad.Bind m, forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a')) => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Monad.Monad m, forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a')) => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.NondetT m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a')) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Monad.Transformer UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Monad.Monad m, forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Effects.MonadCont (UVMHS.Core.Init.ùëÑ r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ErrorT e m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ErrorT e m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ErrorT e m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ErrorT e m a)
instance UVMHS.Core.Classes.Monad.Transformer (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (e UVMHS.Core.Init.‚à® r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functor.Functor2 UVMHS.Core.Monads.FailT
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.FailT m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.FailT m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.FailT m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.FailT m a)
instance UVMHS.Core.Classes.Monad.Transformer UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (UVMHS.Core.Init.ùëÇ r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Monad.Bind m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.StateT s m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null s, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.StateT s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append s, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.StateT s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid s, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.StateT s m a)
instance UVMHS.Core.Classes.Monad.Transformer (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (s UVMHS.Core.Init.‚àß r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monad.Return m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.WriterT o m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.WriterT o m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append o, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.WriterT o m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.WriterT o m a)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Classes.Monad.Transformer (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (o UVMHS.Core.Init.‚àß r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Monad.Bind m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.ReaderT r m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ReaderT r m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ReaderT r m a)
instance UVMHS.Core.Classes.Monad.Transformer (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftCont (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Extract UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Cobind UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Comonad UVMHS.Core.Monads.ID
instance UVMHS.Core.Effects.MonadIO GHC.Types.IO
instance UVMHS.Core.Classes.Functor.Functor GHC.Types.IO
instance UVMHS.Core.Classes.Monad.Return GHC.Types.IO
instance UVMHS.Core.Classes.Monad.Bind GHC.Types.IO
instance UVMHS.Core.Classes.Monad.Monad GHC.Types.IO

module UVMHS.Core.IO
initUVMHS :: IO ()
owrite :: ùïä -> IO ()
out :: ùïä -> IO ()
outs :: ToIter ùïä t => t -> IO ()
oflush :: IO ()
shout :: Show a => a -> IO ()
trace :: ùïä -> ()
traceM :: Monad m => ùïä -> m ()
ewrite :: ùïä -> IO ()
err :: ùïä -> IO ()
eflush :: IO ()
iread :: IO ùïä
iargs :: IO (ùêø ùïä)
ilocalArgs :: ùêø ùïä -> IO a -> IO a
abortIO :: IO a
failIO :: ùïä -> IO a
fread :: ùïä -> IO ùïä
fwrite :: ùïä -> ùïä -> IO ()
fappend :: ùïä -> ùïä -> IO ()
fcopy :: ùïä -> ùïä -> IO ()
dfilesAll :: IO (ùêø ùïä)
dfiles :: IO (ùêø ùïä)
din :: ùïä -> IO a -> IO a
dtouch :: ùïä -> IO ()
drremove :: ùïä -> IO ()
pexists :: ùïä -> IO ùîπ
pfilename :: ùïä -> ùïä
pbasename :: ùïä -> ùïä
pdirectory :: ùïä -> ùïä
pextension :: ùïä -> ùïä
shell :: ùïä -> IO ((ùîπ ‚àß ùïä) ‚àß ùïä)
shellOK :: ùïä -> IO ùïä
shelll :: ùïä -> IO ((ùîπ ‚àß ùïä) ‚àß ùïä)
shelllOK :: ùïä -> IO ùïä
gc :: IO ()
time :: (() -> a) -> IO (a ‚àß TimeD)
rtime :: ùïä -> (() -> a) -> IO a
timeIO :: IO a -> IO (a ‚àß TimeD)
rtimeIO :: ùïä -> IO a -> IO a
profile :: (() -> a) -> IO (TimeD ‚àß ùîª)
ioUNSAFE :: IO a -> a

module UVMHS.Core.Matrix
type T‚Ñï = Nat
type Tùïä = Symbol
type (m :: T‚Ñï) + (n :: T‚Ñï) = m + n
type (m :: T‚Ñï) √ó (n :: T‚Ñï) = m * n
type (m :: T‚Ñï) ^ (n :: T‚Ñï) = m ^ n
type (m :: T‚Ñï) - (n :: T‚Ñï) = m - n
type (m :: T‚Ñï) / (n :: T‚Ñï) = m `Div` n
type (m :: T‚Ñï) % (n :: T‚Ñï) = m `Mod` n
type Log2 (n :: T‚Ñï) = Log2 n
type (m :: T‚Ñï) ‚ãö? (n :: T‚Ñï) = CmpNat m n
type (m :: T‚Ñï) < (n :: T‚Ñï) = (m ‚ãö? n) ~  'LT
type (m :: T‚Ñï) ‚â° (n :: T‚Ñï) = (m ‚ãö? n) ~  'EQ
type (m :: T‚Ñï) > (n :: T‚Ñï) = (m ‚ãö? n) ~  'GT
data (m :: T‚Ñï) :<: (n :: T‚Ñï)
TRUSTME_LT :: (:<:)
newtype S‚Ñï (n :: T‚Ñï)
TRUSTME_S‚Ñï :: ‚Ñï -> S‚Ñï
[unS‚Ñï] :: S‚Ñï -> ‚Ñï
newtype S‚Ñï32 (n :: T‚Ñï)
TRUSTME_S‚Ñï32 :: ‚Ñï32 -> S‚Ñï32
[unS‚Ñï32] :: S‚Ñï32 -> ‚Ñï32
newtype Sùïä (s :: Tùïä)
TRUSTME_Sùïä :: ùïä -> Sùïä
[unSùïä] :: Sùïä -> ùïä
class (KnownNat n) => R‚Ñï (n :: T‚Ñï)
reify‚Ñï :: R‚Ñï n => P n -> ‚Ñï
class (KnownNat n) => R‚Ñï32 (n :: T‚Ñï)
reify‚Ñï32 :: R‚Ñï32 n => P n -> ‚Ñï32
class (KnownSymbol s) => Rùïä (s :: Tùïä)
reifyùïä :: Rùïä s => P s -> ùïä
compareT‚Ñï :: forall (a :: T‚Ñï) (b :: T‚Ñï). (R‚Ñï a, R‚Ñï b) => ùëÇ (a ‚âü b)
sùïü :: forall n. R‚Ñï n => S‚Ñï n
dùïü :: ‚Ñï -> (forall n. R‚Ñï n => S‚Ñï n -> a) -> a
sùïü32 :: forall n. R‚Ñï32 n => S‚Ñï32 n
dùïü32 :: ‚Ñï32 -> (forall n. R‚Ñï32 n => S‚Ñï32 n -> a) -> a
sùï§ :: forall s. KnownSymbol s => Sùïä s
dùï§ :: ùïä -> (forall s. Rùïä s => Sùïä s -> a) -> a
data Sùêø (a :: sa -> ‚òÖ) :: [sa] -> ‚òÖ
[SNil] :: Sùêø a '[]
[:&&] :: a x -> Sùêø a xs -> Sùêø a (x : xs)
infixr 8 :&&
mapSùêø :: forall (a :: sa -> ‚òÖ) (b :: sa -> ‚òÖ) (xs :: [sa]). (forall (x :: sa). a x -> b x) -> Sùêø a xs -> Sùêø b xs
newtype Const (a :: ‚òÖ) (b :: k)
Const :: a -> Const
[unConst] :: Const -> a
type family (xs :: [a]) ‚ß∫ (ys :: [a]) :: [a]
data ùïÄ32 (n :: T‚Ñï)
[ùïÄ32] :: S‚Ñï32 m -> (m :<: n) -> ùïÄ32 n
unùïÄ32 :: ùïÄ32 n -> ‚Ñï32
sùïö :: forall m n. (R‚Ñï32 m, m < n) => P m -> ùïÄ32 n
dùïö :: S‚Ñï32 m -> ‚Ñï32 -> ùëÇ (ùïÄ32 m)
data B·¥ç (m :: T‚Ñï) (n :: T‚Ñï) a
[B·¥ç] :: (R‚Ñï m, R‚Ñï n) => {rowsB·¥ç :: S‚Ñï32 m, colsB·¥ç :: S‚Ñï32 n, dataB·¥ç :: Array V ((Z :. Int) :. Int) a} -> B·¥ç m n a
data U·¥ç (m :: T‚Ñï) (n :: T‚Ñï) a
[U·¥ç] :: (R‚Ñï m, R‚Ñï n, Unbox a) => {rowsU·¥ç :: S‚Ñï32 m, colsU·¥ç :: S‚Ñï32 n, dataU·¥ç :: Array U ((Z :. Int) :. Int) a} -> U·¥ç m n a
data V·¥ç (m :: T‚Ñï) (n :: T‚Ñï) a
[V·¥ç] :: (R‚Ñï m, R‚Ñï n) => {rowsV·¥ç :: S‚Ñï32 m, colsV·¥ç :: S‚Ñï32 n, dataV·¥ç :: Array D ((Z :. Int) :. Int) a} -> V·¥ç m n a
class Matrix t
xrows :: Matrix t => t m n a -> S‚Ñï32 m
xcols :: Matrix t => t m n a -> S‚Ñï32 n
(ùÑ™) :: Matrix t => t m n a -> (ùïÄ32 m, ùïÄ32 n) -> a
xvirt :: Matrix t => t m n a -> V·¥ç m n a
infixl 7 ùÑ™
indexB·¥ç :: ùïÄ32 m -> ùïÄ32 n -> B·¥ç m n a -> a
virtB·¥ç :: B·¥ç m n a -> V·¥ç m n a
indexU·¥ç :: ùïÄ32 m -> ùïÄ32 n -> U·¥ç m n a -> a
virtU·¥ç :: U·¥ç m n a -> V·¥ç m n a
indexV·¥ç :: ùïÄ32 m -> ùïÄ32 n -> V·¥ç m n a -> a
matrix :: (R‚Ñï m, R‚Ñï n) => S‚Ñï32 m -> S‚Ñï32 n -> (ùïÄ32 m -> ùïÄ32 n -> a) -> V·¥ç m n a
xconst :: (R‚Ñï m, R‚Ñï n) => S‚Ñï32 m -> S‚Ñï32 n -> a -> V·¥ç m n a
xbs :: V·¥ç m n a -> B·¥ç m n a
xbp :: V·¥ç m n a -> B·¥ç m n a
xus :: Unbox a => V·¥ç m n a -> U·¥ç m n a
xup :: Unbox a => V·¥ç m n a -> U·¥ç m n a
xiter :: V·¥ç m n a -> ùêº a
xtranspose :: V·¥ç m n a -> V·¥ç n m a
xmap :: (a -> b) -> V·¥ç m n a -> V·¥ç m n b
xmap2 :: (a -> b -> c) -> V·¥ç m n a -> V·¥ç m n b -> V·¥ç m n c
xmeld :: R‚Ñï n => S‚Ñï32 n -> V·¥ç m 1 (V·¥ç 1 n a) -> V·¥ç m n a
xsplit :: V·¥ç m n a -> V·¥ç m 1 (V·¥ç 1 n a)
xrow :: ùïÄ32 m -> V·¥ç m n a -> V·¥ç 1 n a
xcol :: ùïÄ32 n -> V·¥ç m n a -> V·¥ç 1 m a
xproduct :: (Additive a, Times a) => V·¥ç m n a -> V·¥ç n o a -> V·¥ç m o a
xbmapM :: Monad m => (a -> m b) -> V·¥ç n o a -> m (B·¥ç n o b)
xumapM :: (Monad m, Unbox a, Unbox b) => (a -> m b) -> V·¥ç n o a -> m (U·¥ç n o b)
xindirect :: V·¥ç m n a -> V·¥ç 1 o (ùïÄ32 m) -> V·¥ç o n a
xiter2 :: V·¥ç m n a -> ùêº (ùêº a)
xlist2 :: V·¥ç m n a -> ùêø (ùêø a)
xbùêº :: ùêº (ùêº a) -> (forall m n. (R‚Ñï m, R‚Ñï n) => B·¥ç m n a -> b) -> b
xb :: (ToIter a t, ToIter t u) => u -> (forall m n. (R‚Ñï m, R‚Ñï n) => B·¥ç m n a -> b) -> b
xuùêº :: Unbox a => ùêº (ùêº a) -> (forall m n. (R‚Ñï m, R‚Ñï n) => U·¥ç m n a -> b) -> b
xu :: (Unbox a, ToIter a t, ToIter t u) => u -> (forall m n. (R‚Ñï m, R‚Ñï n) => U·¥ç m n a -> b) -> b
(‚úñ) :: (Additive a, Times a) => V·¥ç m n a -> V·¥ç n o a -> V·¥ç m o a
testMatrix1 :: IO ()
instance UVMHS.Core.Matrix.Matrix UVMHS.Core.Matrix.B·¥ç
instance UVMHS.Core.Matrix.Matrix UVMHS.Core.Matrix.U·¥ç
instance UVMHS.Core.Matrix.Matrix UVMHS.Core.Matrix.V·¥ç
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Matrix.B·¥ç m n a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Matrix.U·¥ç m n a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Matrix.V·¥ç m n a)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Matrix.V·¥ç m n)
instance UVMHS.Core.Classes.Arithmetic.Times a => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.Matrix.V·¥ç m n a)
instance GHC.TypeLits.KnownSymbol s => UVMHS.Core.Matrix.Rùïä s
instance GHC.TypeNats.KnownNat n => UVMHS.Core.Matrix.R‚Ñï32 n
instance GHC.TypeNats.KnownNat n => UVMHS.Core.Matrix.R‚Ñï n

module UVMHS.Core.LensDeriving
makeLensLogic :: Cxt -> Name -> ùêø TyVarBndr -> Name -> Type -> Q (ùêø Dec)
makeLenses :: Name -> Q [Dec]
makePrismLogic :: Cxt -> Name -> ùêø TyVarBndr -> Name -> ùêø Type -> ‚Ñï -> Q (ùêø Dec)
makePrisms :: Name -> Q [Dec]

module UVMHS.Core.Vector
newtype ùïç a
ùïç :: Array ‚Ñï64 a -> ùïç a
vecN :: ToIter a t => ‚Ñï64 -> t -> ùïç a
vecS :: (ToIter a t, Sized t) => t -> ùïç a
vec :: ToIter a t => t -> ùïç a
vecF :: ‚Ñï64 -> (‚Ñï64 -> a) -> ùïç a
vecD :: (‚Ñï64 ‚á∞ a) -> ùïç a
idxOKùïç :: ùïç a -> ‚Ñï64 -> ùîπ
idxùïç :: ùïç a -> ‚Ñï64 -> a
idxùïçùëÇ :: ùïç a -> ‚Ñï64 -> ùëÇ a
streamùïç :: ùïç a -> ùëÜ a
sizeùïç :: ùïç a -> ‚Ñï64
mapùïç :: (a -> b) -> ùïç a -> ùïç b
setùïç :: ‚Ñï64 -> a -> ùïç a -> ùïç a
skipChunk :: Monad m => m ‚Ñï8 -> ‚Ñï64 -> m ()
emptyChunk :: ‚Ñï64 -> ùêº ‚Ñï8
joinBytes :: (‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8) -> ‚Ñï64
splitBytes :: ‚Ñï64 -> (‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8)
class Chunky a
chunkSize :: Chunky a => P a -> ‚Ñï64
fromChunk :: forall m. (Chunky a, Monad m) => m ‚Ñï8 -> m a
toChunk :: Chunky a => a -> ùêº ‚Ñï8
chunkIOBytes :: UArray ‚Ñï64 ‚Ñï8 -> State ‚Ñï64 ‚Ñï8
newtype ùïå a
ùïå :: UArray ‚Ñï64 ‚Ñï8 -> ùïå a
uvecN :: forall t a. (ToIter a t, Chunky a) => ‚Ñï64 -> t -> ùïå a
uvec :: (ToIter a t, Chunky a) => t -> ùïå a
idxOKùïå :: forall a. Chunky a => ùïå a -> ‚Ñï64 -> ùîπ
rawIdxùïå :: Chunky a => P a -> ‚Ñï64 -> ‚Ñï64
idxùïå :: forall a. Chunky a => ùïå a -> ‚Ñï64 -> a
idxùïåùëÇ :: Chunky a => ùïå a -> ‚Ñï64 -> ùëÇ a
streamùïå :: forall a. Chunky a => ùïå a -> ùëÜ a
showWithùïå :: Chunky a => (a -> ùïä) -> ùïå a -> ùïä
streamBytesùïå :: ùïå a -> ùëÜ ‚Ñï8
corelib_vector_e1 :: ùïå (‚Ñï64 ‚à® (‚Ñï64 ‚àß ‚Ñï64))
corelib_vector_e2 :: ùïå ‚ÑÇ
corelib_vector_e3 :: ùïå ùîπ
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Vector.ùïå a)
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Vector.ùïå a)
instance (UVMHS.Core.Vector.Chunky a, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Core.Vector.ùïå a)
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï64 a (UVMHS.Core.Vector.ùïå a)
instance forall k (a :: k). UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Vector.ùïå a)
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Vector.ùïå a)
instance (UVMHS.Core.Vector.Chunky a, GHC.Classes.Eq a) => GHC.Classes.Eq (UVMHS.Core.Vector.ùïå a)
instance (UVMHS.Core.Vector.Chunky a, GHC.Classes.Ord a) => GHC.Classes.Ord (UVMHS.Core.Vector.ùïå a)
instance (UVMHS.Core.Vector.Chunky b, a UVMHS.Core.Classes.Morphism.‚áÑ b) => UVMHS.Core.Vector.Chunky a
instance UVMHS.Core.Vector.Chunky ()
instance UVMHS.Core.Vector.Chunky UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Vector.Chunky UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Vector.Chunky UVMHS.Core.Init.‚ÑÇ
instance UVMHS.Core.Vector.Chunky UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Vector.Chunky UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Vector.Chunky UVMHS.Core.Init.ùîª
instance (UVMHS.Core.Vector.Chunky a, UVMHS.Core.Vector.Chunky b) => UVMHS.Core.Vector.Chunky (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Vector.Chunky a, UVMHS.Core.Vector.Chunky b) => UVMHS.Core.Vector.Chunky (a UVMHS.Core.Init.‚à® b)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Vector.ùïç a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï64 a (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Vector.ùïç a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Vector.ùïç a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Collections.Sized (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Vector.ùïç

module UVMHS.Core.VectorSparse
data ùëä a
ùëä :: IntMap a -> ùëä a
[unùëä] :: ùëä a -> IntMap a
lookupùëä :: ùëä a -> ‚Ñ§64 -> ùëÇ a
singleùëä :: (‚Ñ§64 ‚àß a) -> ùëä a
subDictByùëä :: (a -> a -> ùîπ) -> ùëä a -> ùëä a -> ùîπ
w√∏ :: ùëä a
unionWithùëä :: (a -> a -> a) -> ùëä a -> ùëä a -> ùëä a
(‚Ü¶‚ôÆ) :: ‚Ñ§64 -> a -> ùëä a
(‚ãµ‚ôÆ) :: ‚Ñ§64 -> ùëä a -> ùîπ
(‚©å‚ôÆ) :: ùëä a -> ùëä a -> ùëä a
(‚©ç‚ôÆ) :: ùëä a -> ùëä a -> ùëä a
deleteùëä :: ‚Ñ§64 -> ùëä a -> ùëä a
sizeùëä :: ùëä a -> ‚Ñï
(‚äé‚ôÆ) :: Additive a => ùëä a -> ùëä a -> ùëä a
unionsWithùëä :: ToIter (ùëä a) t => (a -> a -> a) -> t -> ùëä a
interWithùëä :: (a -> b -> c) -> ùëä a -> ùëä b -> ùëä c
minViewùëä :: ùëä a -> ùëÇ ((‚Ñ§64 ‚àß a) ‚àß ùëä a)
maxViewùëä :: ùëä a -> ùëÇ ((‚Ñ§64 ‚àß a) ‚àß ùëä a)
minKeyùëä :: ùëä a -> ùëÇ ‚Ñ§64
maxKeyùëä :: ùëä a -> ùëÇ ‚Ñ§64
viewùëä :: ‚Ñ§64 -> ùëä a -> ùëÇ (a ‚àß ùëä a)
withoutùëä :: ùëÉ ‚Ñ§64 -> ùëä a -> ùëä a
restrictùëä :: ùëÉ ‚Ñ§64 -> ùëä a -> ùëä a
keysùëä :: ùëä a -> ùêº ‚Ñ§64
valuesùëä :: ùëä a -> ùêº a
mapùëä :: (a -> b) -> ùëä a -> ùëä b
mapKùëä :: (‚Ñ§64 -> a -> b) -> ùëä a -> ùëä b
streamùëä :: ùëä a -> ùëÜ (‚Ñ§64 ‚àß a)
spvecùêº :: ùêº (‚Ñ§64 ‚àß a) -> ùëä a
spvec :: ToIter (ùëä a) t => t -> ùëä a
assocùëä :: ToIter (‚Ñ§64 ‚àß a) t => t -> ùëä a
joinùëä :: (Ord a, Ord b) => ùëä (ùëÉ a) -> ùëä (ùëÉ b) -> ùëä (ùëÉ (a ‚àß b))
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.VectorSparse.ùëä a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñ§64 a (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Collections.Single (UVMHS.Core.Init.‚Ñ§64 UVMHS.Core.Init.‚àß a) (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.POrd a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Unit (UVMHS.Core.VectorSparse.ùëä a)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Cross a) => UVMHS.Core.Classes.Monoid.Cross (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Monoid.Prodoid a => UVMHS.Core.Classes.Monoid.Prodoid (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Additive (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Arithmetic.Zero a => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Core.VectorSparse.ùëä a)
instance (UVMHS.Core.Classes.Arithmetic.Plus a, UVMHS.Core.Classes.Arithmetic.Times a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Arithmetic.Multiplicative a => UVMHS.Core.Classes.Arithmetic.Multiplicative (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.VectorSparse.ùëä
instance UVMHS.Core.Classes.Collections.ToStream (UVMHS.Core.Init.‚Ñ§64 UVMHS.Core.Init.‚àß a) (UVMHS.Core.VectorSparse.ùëä a)
instance UVMHS.Core.Classes.Collections.ToIter (UVMHS.Core.Init.‚Ñ§64 UVMHS.Core.Init.‚àß a) (UVMHS.Core.VectorSparse.ùëä a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.VectorSparse.ùëä a)

module UVMHS.Core

module UVMHS.Lib.ATree
data ùê¥ o i j a
Leafùê¥ :: o -> i -> j -> a -> ùê¥ o i j a
Appendùê¥ :: o -> i -> j -> ùê¥ o i j a -> ùêº (ùê¥ o i j a) -> ùê¥ o i j a -> ùê¥ o i j a
annoi :: Append i => i -> ùê¥ o i j a -> ùê¥ o i j a
annoj :: Append j => j -> ùê¥ o i j a -> ùê¥ o i j a
summary :: ùê¥ o i j a -> o
mapSummary :: (o -> o') -> ùê¥ o i j a -> ùê¥ o' i j a
resummary :: Monoid o => (i -> j -> a -> o) -> ùê¥ o' i j a -> ùê¥ o i j a
homMapùê¥ :: (o -> o') -> (a -> b) -> ùê¥ o i j a -> ùê¥ o' i j b
instance (GHC.Show.Show o, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Lib.ATree.ùê¥ o i j a)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null i, UVMHS.Core.Classes.Monoid.Null j, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.ATree.ùê¥ o i j a)
instance (UVMHS.Core.Classes.Monoid.Append o, GHC.Classes.Eq i, UVMHS.Core.Classes.Monoid.Null i, UVMHS.Core.Classes.Monoid.Append i, GHC.Classes.Eq j, UVMHS.Core.Classes.Monoid.Null j, UVMHS.Core.Classes.Monoid.Append j, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.ATree.ùê¥ o i j a)
instance (UVMHS.Core.Classes.Monoid.Monoid o, GHC.Classes.Eq i, UVMHS.Core.Classes.Monoid.Monoid i, GHC.Classes.Eq j, UVMHS.Core.Classes.Monoid.Monoid j, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.ATree.ùê¥ o i j a)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.ATree.ùê¥ () i j)

module UVMHS.Lib.IterS
data ùêºS a
ùêºS :: ‚Ñï64 -> ùêº a -> ùêºS a
[ùëñSSize] :: ùêºS a -> ‚Ñï64
[ùëñSIter] :: ùêºS a -> ùêº a
iterS :: (ToIter a t, Sized t) => t -> ùêºS a
data ùêºSùïä
ùêºSùïä :: ‚Ñï64 -> ùêº ùïä -> ùêºSùïä
[ùï§SSize] :: ùêºSùïä -> ‚Ñï64
[ùï§SIter] :: ùêºSùïä -> ùêº ùïä
instance GHC.Show.Show UVMHS.Lib.IterS.ùêºSùïä
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.IterS.ùêºSùïä
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.IterS.ùêºSùïä
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.IterS.ùêºSùïä
instance UVMHS.Core.Classes.Collections.ToIter UVMHS.Core.Init.ùïä UVMHS.Lib.IterS.ùêºSùïä
instance UVMHS.Core.Classes.Collections.Single UVMHS.Core.Init.ùïä UVMHS.Lib.IterS.ùêºSùïä
instance UVMHS.Core.Classes.Collections.Sized UVMHS.Lib.IterS.ùêºSùïä
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Core.Classes.Collections.Sized (UVMHS.Lib.IterS.ùêºS a)

module UVMHS.Lib.Pretty.Annotation
data Color3Bit
Black :: Color3Bit
Red :: Color3Bit
Green :: Color3Bit
Yellow :: Color3Bit
Blue :: Color3Bit
Magenta :: Color3Bit
Cyan :: Color3Bit
White :: Color3Bit
data Color
Color :: Color3Bit -> Color
Color8 :: ‚Ñï8 -> Color
Color24 :: ‚Ñï8 -> ‚Ñï8 -> ‚Ñï8 -> Color
black :: Color
darkRed :: Color
darkGreen :: Color
darkYellow :: Color
darkBlue :: Color
darkPink :: Color
darkTeal :: Color
gray :: Color
darkGray :: Color
red :: Color
green :: Color
yellow :: Color
blue :: Color
pink :: Color
teal :: Color
lightGray :: Color
white :: Color
highlight :: Color
data Format
FG :: Color -> Format
NOFG :: Format
BG :: Color -> Format
NOBG :: Format
UL :: Format
NOUL :: Format
BD :: Format
NOBD :: Format
IT :: Format
NOIT :: Format
data Formats
Formats :: ùëÇ (ùëÇ Color) -> ùëÇ (ùëÇ Color) -> ùëÇ ùîπ -> ùëÇ ùîπ -> ùëÇ ùîπ -> Formats
[fgFormats] :: Formats -> ùëÇ (ùëÇ Color)
[bgFormats] :: Formats -> ùëÇ (ùëÇ Color)
[ulFormats] :: Formats -> ùëÇ ùîπ
[bdFormats] :: Formats -> ùëÇ ùîπ
[itFormats] :: Formats -> ùëÇ ùîπ
format :: Format -> Formats
formats :: ToIter Format t => t -> Formats
override :: ùêø Format
data Annotation
Annotation :: Formats -> ùëÇ (‚ÑÇ ‚àß Formats) -> Annotation
[annotationFormats] :: Annotation -> Formats
[annotationUndertag] :: Annotation -> ùëÇ (‚ÑÇ ‚àß Formats)
formatAnnotation :: Formats -> Annotation
undertagAnnotation :: ‚ÑÇ -> Formats -> Annotation
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Annotation
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Annotation
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Annotation
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Formats
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Formats
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Formats
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Format
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Format
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Format
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Color
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Color
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Color
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Color3Bit
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Color3Bit
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Color3Bit
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Annotation.Formats
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Annotation.Formats
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Annotation.Formats

module UVMHS.Lib.Pretty.Core
data IChunk
RawIChunk :: ‚Ñï64 -> ùïä -> IChunk
NewlineIChunk :: ‚Ñï64 -> IChunk
data OChunk
RawOChunk :: ‚Ñï64 -> ùïä -> OChunk
NewlineOChunk :: ‚Ñï64 -> OChunk
PaddingOChunk :: ‚Ñï64 -> OChunk
data PrettyMode
NullMode :: PrettyMode
AMode :: PrettyMode
GMode :: PrettyMode
AGMode :: PrettyMode
data MultiShape
MultiShape :: ùîπ -> ‚Ñï64 -> ‚Ñï64 -> ‚Ñï64 -> ‚Ñï64 -> MultiShape
[multiShapeAligned] :: MultiShape -> ùîπ
[multiShapeFirstLength] :: MultiShape -> ‚Ñï64
[multiShapeMidMaxLength] :: MultiShape -> ‚Ñï64
[multiShapeLastLength] :: MultiShape -> ‚Ñï64
[multiShapeLines] :: MultiShape -> ‚Ñï64
data Shape
SShape :: ‚Ñï64 -> Shape
MShape :: MultiShape -> Shape
mShapeL :: (‚å≤) Shape MultiShape
sShapeL :: (‚å≤) Shape ‚Ñï64
alignShape :: Shape -> Shape
getShapeAligned :: Shape -> ùîπ
data Summary
Summary :: Shape -> ùêº (RDoc IChunk) -> Summary
[summaryShape] :: Summary -> Shape
[summaryContents] :: Summary -> ùêº (RDoc IChunk)
type LDoc = ùê¥ Summary () PrettyMode (Shape ‚àß ùêº (RDoc IChunk))
type RDoc a = ùê¥ () Annotation () (ùêº a)
type SDoc = ùê¥ () Formats () (ùêº OChunk)
summaryContentsL :: (‚ü¢) Summary (ùêº (RDoc IChunk))
summaryShapeL :: (‚ü¢) Summary Shape
ichunkShape :: IChunk -> Shape
rawIChunkùïä :: ùïä -> IChunk
splitIChunksùïä :: ùïä -> ùêº IChunk
renderIChunksùïä :: Shape -> ùêº IChunk -> ùêº (RDoc IChunk)
stringCChunk :: ùïä -> LDoc
stringCChunkModal :: ùïä -> ùïä -> LDoc
data LDocEnv
LDocEnv :: ùëÇ ‚Ñï64 -> ùëÇ ‚Ñï64 -> ‚Ñï64 -> LDocEnv
[ldocEnvMaxLineWidth] :: LDocEnv -> ùëÇ ‚Ñï64
[ldocEnvMaxRibbonWidth] :: LDocEnv -> ùëÇ ‚Ñï64
[ldocEnvNest] :: LDocEnv -> ‚Ñï64
ldocEnvNestL :: (‚ü¢) LDocEnv ‚Ñï64
ldocEnvMaxRibbonWidthL :: (‚ü¢) LDocEnv (ùëÇ ‚Ñï64)
ldocEnvMaxLineWidthL :: (‚ü¢) LDocEnv (ùëÇ ‚Ñï64)
ldocEnv‚ÇÄ :: LDocEnv
data LDocState
LDocState :: ‚Ñï64 -> ‚Ñï64 -> ‚Ñï64 -> LDocState
[ldocStateRib] :: LDocState -> ‚Ñï64
[ldocStateRow] :: LDocState -> ‚Ñï64
[ldocStateCol] :: LDocState -> ‚Ñï64
ldocStateColL :: (‚ü¢) LDocState ‚Ñï64
ldocStateRowL :: (‚ü¢) LDocState ‚Ñï64
ldocStateRibL :: (‚ü¢) LDocState ‚Ñï64
ldocState‚ÇÄ :: LDocState
type LDocM = RWS LDocEnv (ùêº (RDoc IChunk)) LDocState
renderRDoc :: Shape -> ùêº (RDoc IChunk) -> LDocM ()
alignLDoc :: LDocM a -> LDocM a
groupLDoc :: Shape -> ùêº (RDoc IChunk) -> LDocM () -> LDocM ()
modeLDoc :: Shape -> ùêº (RDoc IChunk) -> PrettyMode -> LDocM () -> LDocM ()
compileLDoc :: LDoc -> LDocM ()
execLDocWith :: (LDocM () -> LDocM ()) -> LDoc -> RDoc IChunk
execLDoc :: LDoc -> RDoc IChunk
data RDocEnv
RDocEnv :: ùëÇ (‚ÑÇ ‚àß Formats) -> RDocEnv
[rdocEnvUnderFormat] :: RDocEnv -> ùëÇ (‚ÑÇ ‚àß Formats)
rdocEnvUnderFormatL :: (‚ü¢) RDocEnv (ùëÇ ((‚àß) ‚ÑÇ Formats))
rdocEnv‚ÇÄ :: RDocEnv
data RDocState
RDocState :: ‚Ñï64 -> ùêº (((‚Ñï64 ‚àß ‚Ñï64) ‚àß ‚ÑÇ) ‚àß Formats) -> RDocState
[rdocStateCol] :: RDocState -> ‚Ñï64
[rdocStateUnders] :: RDocState -> ùêº (((‚Ñï64 ‚àß ‚Ñï64) ‚àß ‚ÑÇ) ‚àß Formats)
rdocStateUndersL :: (‚ü¢) RDocState (ùêº ((‚àß) ((‚àß) ((‚àß) ‚Ñï64 ‚Ñï64) ‚ÑÇ) Formats))
rdocStateColL :: (‚ü¢) RDocState ‚Ñï64
rdocState‚ÇÄ :: RDocState
type RDocM = RWS RDocEnv SDoc RDocState
buildUndertags :: ‚Ñï64 -> RDocM ()
renderNewline :: ‚Ñï64 -> RDocM ()
renderRaw :: ‚Ñï64 -> ùïä -> RDocM ()
renderPadding :: ‚Ñï64 -> RDocM ()
renderUndertags :: RDocM ()
renderChunk :: IChunk -> RDocM ()
formatRDoc :: Formats -> RDocM () -> RDocM ()
annotateRDoc :: Annotation -> RDocM () -> RDocM ()
compileRDoc :: RDoc IChunk -> RDocM ()
execRDoc :: RDoc IChunk -> SDoc
data PrettyParams
PrettyParams :: Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> ‚Ñï64 -> PrettyParams
[punctuationFormat] :: PrettyParams -> Formats
[keywordPunctuationFormat] :: PrettyParams -> Formats
[keywordFormat] :: PrettyParams -> Formats
[constructorFormat] :: PrettyParams -> Formats
[operatorFormat] :: PrettyParams -> Formats
[binderFormat] :: PrettyParams -> Formats
[literalFormat] :: PrettyParams -> Formats
[highlightFormat] :: PrettyParams -> Formats
[headerFormat] :: PrettyParams -> Formats
[errorFormat] :: PrettyParams -> Formats
[lineNumberFormat] :: PrettyParams -> Formats
[appLevel] :: PrettyParams -> ‚Ñï64
appLevelL :: (‚ü¢) PrettyParams ‚Ñï64
lineNumberFormatL :: (‚ü¢) PrettyParams Formats
errorFormatL :: (‚ü¢) PrettyParams Formats
headerFormatL :: (‚ü¢) PrettyParams Formats
highlightFormatL :: (‚ü¢) PrettyParams Formats
literalFormatL :: (‚ü¢) PrettyParams Formats
binderFormatL :: (‚ü¢) PrettyParams Formats
operatorFormatL :: (‚ü¢) PrettyParams Formats
constructorFormatL :: (‚ü¢) PrettyParams Formats
keywordFormatL :: (‚ü¢) PrettyParams Formats
keywordPunctuationFormatL :: (‚ü¢) PrettyParams Formats
punctuationFormatL :: (‚ü¢) PrettyParams Formats
prettyParams‚ÇÄ :: PrettyParams
data DocEnv
DocEnv :: PrettyParams -> ‚Ñï64 -> ùîπ -> DocEnv
[docEnvPrettyParams] :: DocEnv -> PrettyParams
[docEnvPrecLevel] :: DocEnv -> ‚Ñï64
[docEnvPrecBumped] :: DocEnv -> ùîπ
docEnvPrecBumpedL :: (‚ü¢) DocEnv ùîπ
docEnvPrecLevelL :: (‚ü¢) DocEnv ‚Ñï64
docEnvPrettyParamsL :: (‚ü¢) DocEnv PrettyParams
docEnv‚ÇÄ :: DocEnv
type DocM = RWS DocEnv LDoc ()
newtype Doc
Doc :: DocM () -> Doc
[unDoc] :: Doc -> DocM ()
execDoc :: Doc -> LDoc
onDoc :: (DocM () -> DocM ()) -> Doc -> Doc
ppAnnotate :: Annotation -> Doc -> Doc
ppFormat :: Formats -> Doc -> Doc
ppFormatParam :: (PrettyParams ‚ü¢ Formats) -> Doc -> Doc
ppUndertag :: ‚ÑÇ -> Formats -> Doc -> Doc
ppGroup :: Doc -> Doc
ppAlign :: Doc -> Doc
ppGA :: Doc -> Doc
ppString :: ùïä -> Doc
ppStringModal :: ùïä -> ùïä -> Doc
ppFG :: Color -> Doc -> Doc
ppBG :: Color -> Doc -> Doc
ppUL :: Doc -> Doc
ppBD :: Doc -> Doc
ppUT :: ‚ÑÇ -> Color -> Doc -> Doc
ppPun :: ùïä -> Doc
ppKeyPun :: ùïä -> Doc
ppKey :: ùïä -> Doc
ppCon :: ùïä -> Doc
ppOp :: ùïä -> Doc
ppBdr :: ùïä -> Doc
ppLit :: ùïä -> Doc
ppHl :: ùïä -> Doc
ppHeader :: ùïä -> Doc
ppErr :: ùïä -> Doc
ppSpace :: ‚Ñï64 -> Doc
ppNewline :: Doc
ppSpaceIfBreak :: Doc
ppNewlineIfBreak :: Doc
ppSpaceNewlineIfBreak :: Doc
ppHorizontal :: ToIter Doc t => t -> Doc
ppVertical :: ToIter Doc t => t -> Doc
ppSeparated :: ToIter Doc t => t -> Doc
ppSetLevel :: ‚Ñï64 -> Doc -> Doc
ppSetBotLevel :: Doc -> Doc
ppBump :: Doc -> Doc
ppClosed :: Doc -> Doc -> Doc -> Doc
ppParens :: Doc -> Doc
ppLevel :: ‚Ñï64 -> Doc -> Doc
ppInf :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfl :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfr :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppPre :: ‚Ñï64 -> Doc -> Doc -> Doc
ppPost :: ‚Ñï64 -> Doc -> Doc -> Doc
ppApp :: ToIter Doc t => Doc -> t -> Doc
ppCollection :: ToIter Doc t => Doc -> Doc -> Doc -> t -> Doc
ppRecord :: ToIter (Doc ‚àß Doc) t => Doc -> t -> Doc
class Pretty a
pretty :: Pretty a => a -> Doc
escape :: ‚ÑÇ -> ùêº ‚ÑÇ
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Core.Doc
instance UVMHS.Lib.Pretty.Core.Pretty ()
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîπ
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï64
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï32
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï16
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï8
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñö
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîª
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñù
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Time.Time
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚ÑÇ
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùïä
instance (UVMHS.Lib.Pretty.Core.Pretty a, UVMHS.Lib.Pretty.Core.Pretty b) => UVMHS.Lib.Pretty.Core.Pretty (a, b)
instance (UVMHS.Lib.Pretty.Core.Pretty a, UVMHS.Lib.Pretty.Core.Pretty b) => UVMHS.Lib.Pretty.Core.Pretty (a UVMHS.Core.Init.‚àß b)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùêø a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty [a]
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùêº a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.IterS.ùêºS a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÉ a)
instance (UVMHS.Lib.Pretty.Core.Pretty k, UVMHS.Lib.Pretty.Core.Pretty v) => UVMHS.Lib.Pretty.Core.Pretty (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Lib.Pretty.Core.Pretty GHC.Stack.Types.CallStack
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Core.Doc
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Core.Doc
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Core.Doc
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.DocEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.DocEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.DocEnv
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.PrettyParams
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.PrettyParams
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.PrettyParams
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.LDocState
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.LDocState
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.LDocState
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.LDocEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.LDocEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.LDocEnv
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.Summary
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Core.Summary
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Core.Summary
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Core.Summary
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Core.Shape
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Core.Shape
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Core.Shape
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.Shape
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.Shape
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.Shape
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.MultiShape
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.MultiShape
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.MultiShape
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.PrettyMode
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.PrettyMode
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.PrettyMode
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.OChunk
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.OChunk
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.OChunk
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.IChunk
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.IChunk
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.IChunk
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Core.PrettyMode
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Core.PrettyMode
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Core.PrettyMode

module UVMHS.Lib.Pretty.Deriving
makePrettySumLogic :: Cxt -> Name -> ùêø TyVarBndr -> ùêø (Name ‚àß ùêø Type) -> Q (ùêø Dec)
makePrettySum :: Name -> Q [Dec]
makePrettyUnionLogic :: Cxt -> Name -> ùêø TyVarBndr -> ùêø (Name ‚àß ùêø Type) -> Q (ùêø Dec)
makePrettyUnion :: Name -> Q [Dec]
makePrettyRecordLogic :: Cxt -> Name -> ùêø TyVarBndr -> Name -> ùêø (Name ‚àß Type) -> Q (ùêø Dec)
makePrettyRecord :: Name -> Q [Dec]

module UVMHS.Lib.Pretty.DerivedInstances
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÇ (UVMHS.Core.Init.ùëÇ UVMHS.Lib.Pretty.Annotation.Color)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÇ UVMHS.Core.Init.ùîπ)) => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Annotation.Formats
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Annotation.Color3Bit, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï8) => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Annotation.Color
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Annotation.Color3Bit
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Monads.ID a)
instance (UVMHS.Lib.Pretty.Core.Pretty a, UVMHS.Lib.Pretty.Core.Pretty b) => UVMHS.Lib.Pretty.Core.Pretty (a UVMHS.Core.Init.‚à® b)
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÇ a)

module UVMHS.Lib.Pretty.RenderANSI
data ANSIEnv
ANSIEnv :: ùîπ -> Formats -> ANSIEnv
[ansiEnvDoFormat] :: ANSIEnv -> ùîπ
[ansiEnvFormats] :: ANSIEnv -> Formats
ansiEnvFormatsL :: (‚ü¢) ANSIEnv Formats
ansiEnvDoFormatL :: (‚ü¢) ANSIEnv ùîπ
ansiEnv‚ÇÄ :: ANSIEnv
type RenderANSIM = RWS ANSIEnv ùêºSùïä ()
sgrLeader :: ùïä
sgrCloser :: ùïä
sgrReset :: ùïä
sgrFg :: ùëÇ Color -> ùïä
sgrBg :: ùëÇ Color -> ùïä
sgrUl :: ùîπ -> ùïä
sgrBd :: ùîπ -> ùïä
sgrIt :: ùîπ -> ùïä
sgrFormat :: Formats -> ùêºSùïä
tellSgrFormat :: RenderANSIM ()
localFormat :: Formats -> RenderANSIM () -> RenderANSIM ()
renderChunk' :: OChunk -> ùêºSùïä
formatSDoc :: Formats -> RenderANSIM () -> RenderANSIM ()
compileSDoc :: SDoc -> RenderANSIM ()
execSDocWith :: (RenderANSIM () -> RenderANSIM ()) -> SDoc -> ùïä
execSDoc :: SDoc -> ùïä
ppRender :: Doc -> ùïä
ppRenderNofmt :: Doc -> ùïä
ppRenderWide :: Doc -> ùïä
ppRenderNofmtWide :: Doc -> ùïä
ppshow :: Pretty a => a -> ùïä
pprint :: Pretty a => a -> IO ()
pptrace :: Pretty a => a -> b -> b
pptraceM :: (Monad m, Pretty a) => a -> m ()
ioError :: Pretty e => (e ‚à® a) -> IO a
instance GHC.Show.Show UVMHS.Lib.Pretty.RenderANSI.ANSIEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.RenderANSI.ANSIEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.RenderANSI.ANSIEnv

module UVMHS.Lib.Pretty

module UVMHS.Lib.Parser.Loc
data Loc
Loc :: ‚Ñï64 -> ‚Ñï64 -> ‚Ñï64 -> Loc
[locPos] :: Loc -> ‚Ñï64
[locRow] :: Loc -> ‚Ñï64
[locCol] :: Loc -> ‚Ñï64
locColL :: (‚ü¢) Loc ‚Ñï64
locRowL :: (‚ü¢) Loc ‚Ñï64
locPosL :: (‚ü¢) Loc ‚Ñï64
bumpRow :: Loc -> Loc
bumpCol :: Loc -> Loc
data LocRange
LocRange :: Loc -> Loc -> LocRange
[locRangeBegin] :: LocRange -> Loc
[locRangeEnd] :: LocRange -> Loc
locRangeEndL :: (‚ü¢) LocRange Loc
locRangeBeginL :: (‚ü¢) LocRange Loc
locRange‚ÇÄ :: LocRange
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.Loc.Loc => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Classes.Ord UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Classes.Eq UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï64 => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.Loc.Loc
instance GHC.Classes.Eq UVMHS.Lib.Parser.Loc.Loc
instance GHC.Classes.Ord UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Lib.Parser.Loc.Loc

module UVMHS.Lib.Binders
data ùïè
ùïè :: ùïä -> ùëÇ ‚Ñï -> ùïè
[ùï©name] :: ùïè -> ùïä
[ùï©Gen] :: ùïè -> ùëÇ ‚Ñï
var :: ùïä -> ùïè
ùï©GenL :: (‚ü¢) ùïè (ùëÇ ‚Ñï)
ùï©nameL :: (‚ü¢) ùïè ùïä
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Binders.ùïè
instance GHC.Show.Show UVMHS.Lib.Binders.ùïè
instance GHC.Classes.Ord UVMHS.Lib.Binders.ùïè
instance GHC.Classes.Eq UVMHS.Lib.Binders.ùïè

module UVMHS.Lib.Annotated
data Annotated e a
Annotated :: e -> a -> Annotated e a
[annotatedTag] :: Annotated e a -> e
[annotatedElem] :: Annotated e a -> a
annotatedElemL :: forall (e_a2IRS :: Type) (a_a2IRT :: Type). (‚ü¢) (Annotated e_a2IRS a_a2IRT) a_a2IRT
annotatedTagL :: forall (e_a2IRS :: Type) (a_a2IRT :: Type). (‚ü¢) (Annotated e_a2IRS a_a2IRT) e_a2IRS
instance (UVMHS.Lib.Pretty.Core.Pretty e, UVMHS.Lib.Pretty.Core.Pretty a) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Annotated.Annotated e a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.Annotated.Annotated t a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.Annotated.Annotated t a)
instance UVMHS.Core.Classes.Comonad.Extract (UVMHS.Lib.Annotated.Annotated t)
instance UVMHS.Core.Classes.Comonad.Cobind (UVMHS.Lib.Annotated.Annotated t)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Annotated.Annotated t)
instance UVMHS.Core.Classes.Comonad.Comonad (UVMHS.Lib.Annotated.Annotated t)
instance (GHC.Show.Show e, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Lib.Annotated.Annotated e a)

module UVMHS.Lib.Window
data WindowL i a
ZerWindowL :: a -> WindowL i a
OneWindowL :: ùîπ -> a -> i -> a -> WindowL i a
eWindowL :: a -> WindowL i a
iWindowL :: Null a => i -> WindowL i a
overflowL :: WindowL i a -> ùîπ
mapWindowL :: (i -> j) -> (a -> b) -> WindowL i a -> WindowL j b
data WindowR i a
ZerWindowR :: a -> WindowR i a
OneWindowR :: ùîπ -> a -> i -> a -> WindowR i a
eWindowR :: a -> WindowR i a
iWindowR :: Null a => i -> WindowR i a
overflowR :: WindowR i a -> ùîπ
mapWindowR :: (i -> j) -> (a -> b) -> WindowR i a -> WindowR j b
renderWindowL :: WindowL Doc Doc -> Doc
renderWindowR :: WindowR Doc Doc -> Doc
instance (UVMHS.Lib.Pretty.Core.Pretty a, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Core.Pretty i) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowR i a)
instance (UVMHS.Lib.Pretty.Core.Pretty a, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Core.Pretty i) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Window.WindowR a a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Window.WindowL a a)

module UVMHS.Lib.Parser.ParserError
data ParserErrorInfo
ParserErrorInfo :: WindowR Doc Doc -> WindowR Doc Doc -> ùïä -> ùêº ùïä -> ParserErrorInfo
[parserErrorInfoPrefix] :: ParserErrorInfo -> WindowR Doc Doc
[parserErrorInfoContext] :: ParserErrorInfo -> WindowR Doc Doc
[parserErrorInfoStackHead] :: ParserErrorInfo -> ùïä
[parserErrorInfoStackTail] :: ParserErrorInfo -> ùêº ùïä
data ParserError t
ParserError :: AddBot Loc -> WindowR Doc Doc -> WindowL Doc Doc -> ùêº ParserErrorInfo -> ParserError t
[parserErrorTokenLoc] :: ParserError t -> AddBot Loc
[parserErrorTokenContext] :: ParserError t -> WindowR Doc Doc
[parserErrorTokenSuffix] :: ParserError t -> WindowL Doc Doc
[parserErrorFailures] :: ParserError t -> ùêº ParserErrorInfo
data ParserErrorStackTraces
ParserErrorStackTraces :: ùëÉ ùïä -> (ùïä ‚á∞ ParserErrorStackTraces) -> ParserErrorStackTraces
[parserErrorStackTracesMessages] :: ParserErrorStackTraces -> ùëÉ ùïä
[parserErrorStackTracesChain] :: ParserErrorStackTraces -> ùïä ‚á∞ ParserErrorStackTraces
parserErrorStackTracesChainL :: (‚ü¢) ParserErrorStackTraces ((‚á∞) ùïä ParserErrorStackTraces)
parserErrorStackTracesMessagesL :: (‚ü¢) ParserErrorStackTraces (ùëÉ ùïä)
stackTraces :: ùïä -> ùêº ùïä -> ParserErrorStackTraces
parserErrorFailuresMap :: ùêº ParserErrorInfo -> (ùïä ‚àß ùîπ) ‚á∞ ((WindowR Doc Doc ‚àß WindowR Doc Doc) ‚àß ParserErrorStackTraces)
displaySourceError :: ùïä -> AddNull (ParserError t) -> Doc
displayErrorTraces :: ParserErrorStackTraces -> Doc
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÉ UVMHS.Core.Init.ùïä), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùïä UVMHS.Core.Init.‚á∞ UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces)) => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance forall k (t :: k). UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.ParserError.ParserError t)

module UVMHS.Lib.Parser.ParserContext
data ParserContext
ParserContext :: AddBot LocRange -> WindowL Doc Doc -> WindowR Doc Doc -> WindowR Doc Doc -> ParserContext
[parserContextLocRange] :: ParserContext -> AddBot LocRange
[parserContextDisplayL] :: ParserContext -> WindowL Doc Doc
[parserContextDisplayR] :: ParserContext -> WindowR Doc Doc
[parserContextError] :: ParserContext -> WindowR Doc Doc
parserContextErrorL :: (‚ü¢) ParserContext (WindowR Doc Doc)
parserContextDisplayRL :: (‚ü¢) ParserContext (WindowR Doc Doc)
parserContextDisplayLL :: (‚ü¢) ParserContext (WindowL Doc Doc)
parserContextLocRangeL :: (‚ü¢) ParserContext (AddBot LocRange)
formatParserContext :: Formats -> ParserContext -> ParserContext
data FullContext
FullContext :: WindowR Doc Doc -> WindowL Doc Doc -> WindowL Doc Doc -> FullContext
[fullContextPrefix] :: FullContext -> WindowR Doc Doc
[fullContextContext] :: FullContext -> WindowL Doc Doc
[fullContextSuffix] :: FullContext -> WindowL Doc Doc
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.ParserContext.FullContext
instance GHC.Show.Show UVMHS.Lib.Parser.ParserContext.FullContext
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Pointed.AddBot UVMHS.Lib.Parser.Loc.LocRange), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowL UVMHS.Lib.Pretty.Core.Doc UVMHS.Lib.Pretty.Core.Doc), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowR UVMHS.Lib.Pretty.Core.Doc UVMHS.Lib.Pretty.Core.Doc)) => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ParserContext

module UVMHS.Lib.Parser.ParserInput
data ParserToken t
ParserToken :: t -> ùîπ -> ParserContext -> WindowL Doc Doc -> ParserToken t
[parserTokenValue] :: ParserToken t -> t
[parserTokenSkip] :: ParserToken t -> ùîπ
[parserTokenContext] :: ParserToken t -> ParserContext
[parserTokenSuffix] :: ParserToken t -> WindowL Doc Doc
parserTokenSuffixL :: forall (t_a2OKU :: Type). (‚ü¢) (ParserToken t_a2OKU) (WindowL Doc Doc)
parserTokenContextL :: forall (t_a2OKU :: Type). (‚ü¢) (ParserToken t_a2OKU) ParserContext
parserTokenSkipL :: forall (t_a2OKU :: Type). (‚ü¢) (ParserToken t_a2OKU) ùîπ
parserTokenValueL :: forall (t_a2OKU :: Type). (‚ü¢) (ParserToken t_a2OKU) t_a2OKU
renderNLDisplay :: Doc
renderNLError :: Doc
renderEOFDisplay :: Doc
renderEOFError :: Doc
eofContext :: AddBot Loc -> ParserContext
nlContext :: Loc -> ParserContext
charContext :: Loc -> ‚ÑÇ -> ParserContext
tokens :: ùïä -> ùïç (ParserToken ‚ÑÇ)
data ParserInput t
ParserInput :: ùëÜ (ParserToken t) -> AddBot Loc -> ParserInput t
[parserInputStream] :: ParserInput t -> ùëÜ (ParserToken t)
[parserInputEndPos] :: ParserInput t -> AddBot Loc
parserInputEndPosL :: forall (t_a2ONK :: Type). (‚ü¢) (ParserInput t_a2ONK) (AddBot Loc)
parserInputStreamL :: forall (t_a2ONK :: Type). (‚ü¢) (ParserInput t_a2ONK) (ùëÜ (ParserToken t_a2ONK))
parserInput‚ÇÄ :: ùëÜ (ParserToken t) -> ParserInput t
advanceInput :: ParserInput t -> ùëÇ (ParserToken t ‚àß ParserInput t)
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÜ (UVMHS.Lib.Parser.ParserInput.ParserToken t)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Pointed.AddBot UVMHS.Lib.Parser.Loc.Loc)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.ParserInput.ParserInput t)
instance (UVMHS.Lib.Pretty.Core.Pretty t, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowL UVMHS.Lib.Pretty.Core.Doc UVMHS.Lib.Pretty.Core.Doc)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.ParserInput.ParserToken t)

module UVMHS.Lib.Parser.Regex
class Classified c t | t -> c
classify :: Classified c t => t -> c
data RegexResult o u
RegexResult :: ‚Ñï64 -> Formats -> ùëÇ o -> u -> RegexResult o u
[regexResultLevel] :: RegexResult o u -> ‚Ñï64
[regexResultFormats] :: RegexResult o u -> Formats
[regexResultOutput] :: RegexResult o u -> ùëÇ o
[regexResultUpdate] :: RegexResult o u -> u
newtype RegexInfo o u
RegexInfo :: ùëÇ (RegexResult o u) -> RegexInfo o u
[regexInfoResult] :: RegexInfo o u -> ùëÇ (RegexResult o u)
type Regex c t o u = Annotated (RegexInfo o u) (RegexU c t o u)
data RegexU c t o u
NullR :: RegexU c t o u
ResR :: RegexResult o u -> RegexU c t o u
AtomR :: RegexResult o u -> RegexAtom c t o u -> RegexU c t o u
SumsR :: ùëÉ (Regex c t o u) -> RegexU c t o u
SeqsR :: ùêø (Regex c t o u) -> RegexU c t o u
StarR :: RegexResult o u -> Regex c t o u -> RegexU c t o u
data RegexAtom c t o u
TokRA :: t -> RegexAtom c t o u
NTokRA :: ùëÉ t -> RegexAtom c t o u
ClassRA :: c -> RegexAtom c t o u
nullRegex :: Zero u => Regex c t o u
resRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => RegexResult o u -> Regex c t o u
epsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => Regex c t o u
retRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ‚Ñï64 -> Formats -> ùëÇ o -> u -> Regex c t o u
outRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ‚Ñï64 -> Formats -> o -> Regex c t o u
lepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ‚Ñï64 -> Regex c t o u
fepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => Formats -> Regex c t o u
oepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => o -> Regex c t o u
uepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => u -> Regex c t o u
atomRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => RegexAtom c t o u -> Regex c t o u
tokRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => t -> Regex c t o u
ntokRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ùëÉ t -> Regex c t o u
classRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => c -> Regex c t o u
consEpsRegex :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> Regex c t o u -> Regex c t o u
consEpsRegexU :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> RegexU c t o u -> RegexU c t o u
snocEpsRegex :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> Regex c t o u -> Regex c t o u
snocEpsRegexU :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> RegexU c t o u -> RegexU c t o u
sumRegex :: (Ord c, Ord t, Ord o, Ord u, Plus u) => Regex c t o u -> Regex c t o u -> Regex c t o u
seqRegex :: (Ord c, Ord t, Ord o, Ord u, Additive u) => Regex c t o u -> Regex c t o u -> Regex c t o u
starRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => Regex c t o u -> Regex c t o u
derRegex :: (Ord c, Ord t, Classified c t, Ord o, Ord u, Additive u) => (t ‚à® c) -> Regex c t o u -> Regex c t o u
derRegexAtom :: (Ord c, Ord t, Classified c t, Ord o, Ord u, Additive u) => (t ‚à® c) -> RegexAtom c t o u -> Regex c t o u
derRegexSequence :: (Ord t, Ord c, Classified c t, Ord o, Ord u, Additive u) => (t ‚à® c) -> ùêø (Regex c t o u) -> Regex c t o u
regexLits :: Ord t => Regex c t o u -> ùëÉ t
regexLitsAtom :: Ord t => RegexAtom c t o u -> ùëÉ t
data RegexState c t o u
RegexState :: ‚Ñï64 -> (Regex c t o u ‚á∞ ‚Ñï64) -> ((t ‚à® c) ‚á∞ (‚Ñï64 ‚á∞ ‚Ñï64)) -> (‚Ñï64 ‚á∞ ùëÇ (RegexResult o u)) -> (‚Ñï64 ‚á∞ ùîπ) -> RegexState c t o u
[regexStateNextID] :: RegexState c t o u -> ‚Ñï64
[regexStateMap] :: RegexState c t o u -> Regex c t o u ‚á∞ ‚Ñï64
[regexStateTransitions] :: RegexState c t o u -> (t ‚à® c) ‚á∞ (‚Ñï64 ‚á∞ ‚Ñï64)
[regexStateResults] :: RegexState c t o u -> ‚Ñï64 ‚á∞ ùëÇ (RegexResult o u)
[regexStateDead] :: RegexState c t o u -> ‚Ñï64 ‚á∞ ùîπ
regexStateDeadL :: forall (c_a2R58 :: Type) (t_a2R59 :: Type) (o_a2R5a :: Type) (u_a2R5b :: Type). (‚ü¢) (RegexState c_a2R58 t_a2R59 o_a2R5a u_a2R5b) ((‚á∞) ‚Ñï64 ùîπ)
regexStateResultsL :: forall (c_a2R58 :: Type) (t_a2R59 :: Type) (o_a2R5a :: Type) (u_a2R5b :: Type). (‚ü¢) (RegexState c_a2R58 t_a2R59 o_a2R5a u_a2R5b) ((‚á∞) ‚Ñï64 (ùëÇ (RegexResult o_a2R5a u_a2R5b)))
regexStateTransitionsL :: forall (c_a2R58 :: Type) (t_a2R59 :: Type) (o_a2R5a :: Type) (u_a2R5b :: Type). (‚ü¢) (RegexState c_a2R58 t_a2R59 o_a2R5a u_a2R5b) ((‚á∞) ((‚à®) t_a2R59 c_a2R58) ((‚á∞) ‚Ñï64 ‚Ñï64))
regexStateMapL :: forall (c_a2R58 :: Type) (t_a2R59 :: Type) (o_a2R5a :: Type) (u_a2R5b :: Type). (‚ü¢) (RegexState c_a2R58 t_a2R59 o_a2R5a u_a2R5b) ((‚á∞) (Regex c_a2R58 t_a2R59 o_a2R5a u_a2R5b) ‚Ñï64)
regexStateNextIDL :: forall (c_a2R58 :: Type) (t_a2R59 :: Type) (o_a2R5a :: Type) (u_a2R5b :: Type). (‚ü¢) (RegexState c_a2R58 t_a2R59 o_a2R5a u_a2R5b) ‚Ñï64
regexState‚ÇÄ :: RegexState c t o u
data DFA c t o u
DFA :: ùëÉ t -> ‚Ñï64 -> ((t ‚à® c) ‚á∞ ùïç ‚Ñï64) -> ùïç (ùëÇ (RegexResult o u)) -> ùïç ùîπ -> DFA c t o u
[dfaLits] :: DFA c t o u -> ùëÉ t
[dfaStart] :: DFA c t o u -> ‚Ñï64
[dfaTransitions] :: DFA c t o u -> (t ‚à® c) ‚á∞ ùïç ‚Ñï64
[dfaSuccess] :: DFA c t o u -> ùïç (ùëÇ (RegexResult o u))
[dfaDead] :: DFA c t o u -> ùïç ùîπ
compileRegex :: forall c t o u. (Pretty c, Pretty t, Pretty o, Pretty u, Ord c, Ord t, Classified c t, All c, Ord o, Ord u, Additive u) => Regex c t o u -> DFA c t o u
data LexDFAState t
LexDFAState :: WindowR Doc Doc -> ParserContext -> ParserInput t -> ùêºS t -> LexDFAState t
[lexDFAStatePrefix] :: LexDFAState t -> WindowR Doc Doc
[lexDFAStateContext] :: LexDFAState t -> ParserContext
[lexDFAStateInput] :: LexDFAState t -> ParserInput t
[lexDFAStateTokens] :: LexDFAState t -> ùêºS t
data Lexer c t o u w
Lexer :: (u -> DFA c t o u) -> (ùêºS t -> ùëÇ o -> ùîπ ‚àß w) -> u -> Lexer c t o u w
[lexerDFA] :: Lexer c t o u w -> u -> DFA c t o u
[lexerMkToken] :: Lexer c t o u w -> ùêºS t -> ùëÇ o -> ùîπ ‚àß w
[lexerInitState] :: Lexer c t o u w -> u
tokenize :: forall c t o u w. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u) => Lexer c t o u w -> ùïä -> ùïç (ParserToken t) -> Doc ‚à® ùïç (ParserToken w)
tokenizeIO :: forall c t o u w. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u) => Lexer c t o u w -> ùïä -> ùïç (ParserToken t) -> IO (ùïç (ParserToken w))
tokenizeIOMain :: forall c t o u w. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u, Pretty w) => Lexer c t o u w -> ùïä -> ùïç (ParserToken t) -> IO ()
data CharClass
LetterClass :: CharClass
NumberClass :: CharClass
SpaceClass :: CharClass
OtherClass :: CharClass
lWord :: (Zero u, Ord o, Ord u, Additive u) => ùïä -> Regex CharClass ‚ÑÇ o u
lSpace :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lName :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lNatPre :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lNat :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lNatCoded :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lIntPre :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lInt :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lDbl :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lString :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lComment :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLOpen :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLBodyOpen :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLBodyClose :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLBody :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
data TokenClassBasic
SpaceCBasic :: TokenClassBasic
CommentCBasic :: TokenClassBasic
SyntaxCBasic :: TokenClassBasic
StringCBasic :: TokenClassBasic
NameCBasic :: TokenClassBasic
NaturalCBasic :: TokenClassBasic
IntegerCBasic :: TokenClassBasic
DoubleCBasic :: TokenClassBasic
doubleCBasicL :: (‚å≤) TokenClassBasic ()
integerCBasicL :: (‚å≤) TokenClassBasic ()
naturalCBasicL :: (‚å≤) TokenClassBasic ()
nameCBasicL :: (‚å≤) TokenClassBasic ()
stringCBasicL :: (‚å≤) TokenClassBasic ()
syntaxCBasicL :: (‚å≤) TokenClassBasic ()
commentCBasicL :: (‚å≤) TokenClassBasic ()
spaceCBasicL :: (‚å≤) TokenClassBasic ()
data TokenBasic
SpaceTBasic :: ùïä -> TokenBasic
CommentTBasic :: ùïä -> TokenBasic
SyntaxTBasic :: ùïä -> TokenBasic
StringTBasic :: ùïä -> TokenBasic
NameTBasic :: ùïä -> TokenBasic
NaturalTBasic :: ‚Ñï -> TokenBasic
IntegerTBasic :: ‚Ñ§ -> TokenBasic
DoubleTBasic :: ùîª -> TokenBasic
doubleTBasicL :: (‚å≤) TokenBasic ùîª
integerTBasicL :: (‚å≤) TokenBasic ‚Ñ§
naturalTBasicL :: (‚å≤) TokenBasic ‚Ñï
nameTBasicL :: (‚å≤) TokenBasic ùïä
stringTBasicL :: (‚å≤) TokenBasic ùïä
syntaxTBasicL :: (‚å≤) TokenBasic ùïä
commentTBasicL :: (‚å≤) TokenBasic ùïä
spaceTBasicL :: (‚å≤) TokenBasic ùïä
mkTokenBasic :: ùêºS ‚ÑÇ -> ùëÇ TokenClassBasic -> ùîπ ‚àß TokenBasic
lSyntaxBasic :: (Ord u, Additive u) => ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassBasic u
lTokenBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassBasic ‚Ñï64
lCommentMLBasic :: Regex CharClass ‚ÑÇ TokenClassBasic ‚Ñï64
dfaBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ‚Ñï64 -> DFA CharClass ‚ÑÇ TokenClassBasic ‚Ñï64
lexerBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùïä, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîª) => UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.Regex.TokenBasic
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.TokenBasic
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.TokenBasic
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.TokenBasic
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.Regex.TokenClassBasic
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.TokenClassBasic
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.TokenClassBasic
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.TokenClassBasic
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.Regex.CharClass
instance UVMHS.Core.Classes.All.All UVMHS.Lib.Parser.Regex.CharClass
instance UVMHS.Lib.Parser.Regex.Classified UVMHS.Lib.Parser.Regex.CharClass UVMHS.Core.Init.‚ÑÇ
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.CharClass
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.CharClass
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.CharClass
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowR UVMHS.Lib.Pretty.Core.Doc UVMHS.Lib.Pretty.Core.Doc), UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.ParserInput.ParserInput t), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.IterS.ùêºS t)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.LexDFAState t)
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÉ t), UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï64, UVMHS.Lib.Pretty.Core.Pretty ((t UVMHS.Core.Init.‚à® c) UVMHS.Core.Init.‚á∞ UVMHS.Core.Vector.ùïç UVMHS.Core.Init.‚Ñï64), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Vector.ùïç (UVMHS.Core.Init.ùëÇ (UVMHS.Lib.Parser.Regex.RegexResult o u))), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Vector.ùïç UVMHS.Core.Init.ùîπ)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.DFA c t o u)
instance forall k1 k2 t c (o :: k2) (u :: k1). (UVMHS.Lib.Pretty.Core.Pretty t, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÉ t), UVMHS.Lib.Pretty.Core.Pretty c) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Plus u) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Star (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Kleene (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.RegexResult o u), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.RegexAtom c t o u), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÉ (UVMHS.Lib.Parser.Regex.Regex c t o u)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùêø (UVMHS.Lib.Parser.Regex.Regex c t o u)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.Regex c t o u)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance (GHC.Show.Show o, GHC.Show.Show u, GHC.Show.Show t, GHC.Show.Show c) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u, GHC.Classes.Ord t, GHC.Classes.Ord c) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u, GHC.Classes.Eq t, GHC.Classes.Eq c) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance forall c t k1 (o :: k1) k2 (u :: k2). (GHC.Show.Show t, GHC.Show.Show c) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance forall c t k1 (o :: k1) k2 (u :: k2). (GHC.Classes.Ord t, GHC.Classes.Ord c) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance forall c t k1 (o :: k1) k2 (u :: k2). (GHC.Classes.Eq t, GHC.Classes.Eq c) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÇ (UVMHS.Lib.Parser.Regex.RegexResult o u)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance GHC.Classes.Ord u => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Plus u) => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Show.Show o, GHC.Show.Show u) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñï64, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Annotation.Formats, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùëÇ o), UVMHS.Lib.Pretty.Core.Pretty u) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance GHC.Classes.Ord u => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Plus u) => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Show.Show o, GHC.Show.Show u) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexResult o u)

module UVMHS.Lib.Parser.Core
data ParserEnv t
ParserEnv :: ùîπ -> Formats -> (ùïä ‚àß ùêº ùïä) -> ParserEnv t
[parserEnvReportErrors] :: ParserEnv t -> ùîπ
[parserEnvRenderFormat] :: ParserEnv t -> Formats
[parserEnvErrorStack] :: ParserEnv t -> ùïä ‚àß ùêº ùïä
parserEnvErrorStackL :: forall (t_a3dAt :: k_a3dAu). (‚ü¢) (ParserEnv t_a3dAt) ((‚àß) ùïä (ùêº ùïä))
parserEnvRenderFormatL :: forall (t_a3dAt :: k_a3dAu). (‚ü¢) (ParserEnv t_a3dAt) Formats
parserEnvReportErrorsL :: forall (t_a3dAt :: k_a3dAu). (‚ü¢) (ParserEnv t_a3dAt) ùîπ
parserEnv‚ÇÄ :: ParserEnv t
type ParserOut t = AddNull (ParserError t)
data ParserState t
ParserState :: WindowR Doc Doc -> ParserContext -> ParserContext -> WindowL Doc Doc -> ParserInput t -> ParserState t
[parserStatePrefix] :: ParserState t -> WindowR Doc Doc
[parserStateSkipContext] :: ParserState t -> ParserContext
[parserStateContext] :: ParserState t -> ParserContext
[parserStateSuffix] :: ParserState t -> WindowL Doc Doc
[parserStateInput] :: ParserState t -> ParserInput t
parserStateInputL :: forall (t_a3dDt :: Type). (‚ü¢) (ParserState t_a3dDt) (ParserInput t_a3dDt)
parserStateSuffixL :: forall (t_a3dDt :: Type). (‚ü¢) (ParserState t_a3dDt) (WindowL Doc Doc)
parserStateContextL :: forall (t_a3dDt :: Type). (‚ü¢) (ParserState t_a3dDt) ParserContext
parserStateSkipContextL :: forall (t_a3dDt :: Type). (‚ü¢) (ParserState t_a3dDt) ParserContext
parserStatePrefixL :: forall (t_a3dDt :: Type). (‚ü¢) (ParserState t_a3dDt) (WindowR Doc Doc)
parserState‚ÇÄ :: ParserInput t -> ParserState t
newtype Parser t a
Parser :: ReaderT (ParserEnv t) (StateT (ParserState t) (FailT ((‚àß) (ParserOut t)))) a -> Parser t a
[unParser] :: Parser t a -> ReaderT (ParserEnv t) (StateT (ParserState t) (FailT ((‚àß) (ParserOut t)))) a
runParser :: ParserEnv t -> ParserState t -> Parser t a -> ParserOut t ‚àß ùëÇ (ParserState t ‚àß a)
pNewExpressionContext :: Parser t a -> Parser t a
pGetContext :: Parser t ((WindowR Doc Doc ‚àß ParserContext) ‚àß WindowL Doc Doc)
pGetContextRendered :: Parser t FullContext
pWithContext :: Parser t a -> Parser t (((WindowR Doc Doc ‚àß ParserContext) ‚àß WindowL Doc Doc) ‚àß a)
pFail :: ParserContext -> WindowL Doc Doc -> Parser t a
pErr :: ùïä -> Parser t a -> Parser t a
pNewErrContext :: ùïä -> Parser t a -> Parser t a
pNewContext :: ùïä -> Parser t a -> Parser t a
pWithContextRendered :: Parser t a -> Parser t (Annotated FullContext a)
pRender :: Formats -> Parser t a -> Parser t a
pAdvance :: Parser t (AddBot Loc ‚à® ParserToken t)
pPluck :: Parser t (ParserToken t)
pRecord :: ParserToken t -> Parser t ()
pEnd :: Parser t ()
pFinal :: Parser t a -> Parser t a
pAny :: Parser t t
pShaped :: (t -> ùëÇ a) -> Parser t a
pSatisfies :: (t -> ùîπ) -> Parser t t
pDie :: Parser t a
pToken :: Eq t => t -> Parser t t
pOptional :: Parser t a -> Parser t (ùëÇ a)
pMany :: Parser t a -> Parser t (ùêø a)
pOneOrMore :: Parser t a -> Parser t (ùêø a)
pManySepBy :: Parser t () -> Parser t a -> Parser t (ùêø a)
pOneOrMoreSepBy :: Parser t () -> Parser t a -> Parser t (ùêø a)
pWord :: forall s t. (Eq t, s ‚áÑ ùêº t) => s -> Parser t s
dep__tokenize :: forall t ts a. ToStream (ParserToken t) ts => ùêø (Parser t a) -> ùêø (Parser t a) -> ts -> Doc ‚à® ùïç (ParserToken a)
dep__tokenizeR :: ToStream (ParserToken t) ts => ùêø (Parser t a) -> ts -> Doc ‚à® ùïç (ParserToken a)
dep__tokenizeIO :: ToStream (ParserToken t) ts => ùêø (Parser t a) -> ùêø (Parser t a) -> ts -> IO (ùïç (ParserToken a))
dep__tokenizeRIO :: ToStream (ParserToken t) ts => ùêø (Parser t a) -> ts -> IO (ùïç (ParserToken a))
dep__tokenizeIOMain :: (Pretty a, ToStream (ParserToken t) ts) => ùêø (Parser t a) -> ùêø (Parser t a) -> ts -> IO ()
dep__tokenizeRIOMain :: (Pretty a, ToStream (ParserToken t) ts) => ùêø (Parser t a) -> ts -> IO ()
instance UVMHS.Core.Effects.MonadState (UVMHS.Lib.Parser.Core.ParserState t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadWriter (UVMHS.Lib.Parser.Core.ParserOut t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadReader (UVMHS.Lib.Parser.Core.ParserEnv t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadFail (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Monad.Monad (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Monad.Bind (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Monad.Return (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Parser.Core.Parser t)
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowR UVMHS.Lib.Pretty.Core.Doc UVMHS.Lib.Pretty.Core.Doc), UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Window.WindowL UVMHS.Lib.Pretty.Core.Doc UVMHS.Lib.Pretty.Core.Doc), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.ParserInput.ParserInput t)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Core.ParserState t)
instance forall k (t :: k). (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Pretty.Annotation.Formats, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùïä UVMHS.Core.Init.‚àß UVMHS.Core.Init.ùêº UVMHS.Core.Init.ùïä)) => UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Lib.Parser.Core.ParserEnv t)

module UVMHS.Lib.Parser.CParser
data CParser t a
CParser :: (t ‚á∞ CParser t a) -> Parser t a -> CParser t a
[cParserNext] :: CParser t a -> t ‚á∞ CParser t a
[cParserFallback] :: CParser t a -> Parser t a
onCParser :: (Parser t a -> Parser t a) -> CParser t a -> CParser t a
toCParser :: Parser t a -> CParser t a
frCParser :: Ord t => CParser t a -> Parser t a
cpRender :: Ord t => Formats -> CParser t a -> CParser t a
cpErr :: Ord t => ùïä -> CParser t a -> CParser t a
cpToken :: Ord t => t -> CParser t ()
cpFinal :: Ord t => CParser t a -> CParser t a
cpShaped :: (t -> ùëÇ a) -> CParser t a
cpSatisfies :: (t -> ùîπ) -> CParser t t
cpAny :: CParser t t
cpWord :: forall s t. (Eq t, s ‚áÑ ùêº t) => s -> CParser t s
cpOptional :: Ord t => CParser t a -> CParser t (ùëÇ a)
cpMany :: Ord t => CParser t a -> CParser t (ùêø a)
cpOneOrMore :: Ord t => CParser t a -> CParser t (ùêø a)
cpManySepBy :: Ord t => CParser t () -> CParser t a -> CParser t (ùêø a)
cpOneOrMoreSepBy :: Ord t => CParser t () -> CParser t a -> CParser t (ùêø a)
cpSyntax :: ùïä -> CParser TokenBasic ()
cpName :: CParser TokenBasic ùïè
cpNatural :: CParser TokenBasic ‚Ñï
cpInteger :: CParser TokenBasic ‚Ñ§
cpDouble :: CParser TokenBasic ùîª
cpString :: CParser TokenBasic ùïä
cpNewExpressionContext :: Ord t => CParser t a -> CParser t a
cpNewContext :: Ord t => ùïä -> CParser t a -> CParser t a
cpWithContextRendered :: Ord t => CParser t a -> CParser t (Annotated FullContext a)
cpNewWithContextRendered :: Ord t => ùïä -> CParser t a -> CParser t (Annotated FullContext a)
cpGetContextRendered :: CParser t FullContext
cpNewGetContextRendered :: Ord t => CParser t FullContext
cpManyContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t a -> CParser t (ùêø (f a))
cpOneOrMoreContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t a -> CParser t (ùêø (f a))
cpManySepByContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t () -> CParser t a -> CParser t (ùêø (f a))
cpOneOrMoreSepByContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t () -> CParser t a -> CParser t (ùêø (f a))
runParser‚ÇÄ :: (ToStream (ParserToken t) ts, Ord t) => ts -> CParser t a -> ParserOut t ‚àß ùëÇ (ParserState t ‚àß a)
parse :: (Pretty a, ToStream (ParserToken t) ts, Ord t) => CParser t a -> ùïä -> ts -> Doc ‚à® a
parseIO :: (Pretty a, ToStream (ParserToken t) ts, Ord t) => CParser t a -> ùïä -> ts -> IO a
parseIOMain :: (Pretty a, ToStream (ParserToken t) ts, Ord t) => CParser t a -> ùïä -> ts -> IO ()
instance UVMHS.Core.Classes.Monad.Return (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monad.Bind (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monad.Monad (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Effects.MonadFail (UVMHS.Lib.Parser.CParser.CParser t)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.CParser.CParser t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.CParser.CParser t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.CParser.CParser t a)
instance UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.CParser.CParser t ())
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.CParser.CParser t ())
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.CParser.CParser t ())

module UVMHS.Lib.Parser.Mixfix
pLAM :: ‚Ñï64
pCOMMA :: ‚Ñï64
pLET :: ‚Ñï64
pARR :: ‚Ñï64
pOR :: ‚Ñï64
pAND :: ‚Ñï64
pCMP :: ‚Ñï64
pSUM :: ‚Ñï64
pPROD :: ‚Ñï64
pNEG :: ‚Ñï64
pPOW :: ‚Ñï64
pFAC :: ‚Ñï64
pAPP :: ‚Ñï64
data MixesF t f a
MixesF :: CParser t (f a -> a) -> CParser t (f a -> a) -> CParser t (f a -> f a -> a) -> CParser t (f a -> f a -> a) -> CParser t (f a -> f a -> a) -> MixesF t f a
[mixesFPrefix] :: MixesF t f a -> CParser t (f a -> a)
[mixesFPostfix] :: MixesF t f a -> CParser t (f a -> a)
[mixesFInfix] :: MixesF t f a -> CParser t (f a -> f a -> a)
[mixesFInfixL] :: MixesF t f a -> CParser t (f a -> f a -> a)
[mixesFInfixR] :: MixesF t f a -> CParser t (f a -> f a -> a)
data MixfixF t f a
MixfixF :: CParser t a -> (‚Ñï64 ‚á∞ MixesF t f a) -> MixfixF t f a
[mixfixFTerminals] :: MixfixF t f a -> CParser t a
[mixfixFLevels] :: MixfixF t f a -> ‚Ñï64 ‚á∞ MixesF t f a
fmixPrefix :: ‚Ñï64 -> CParser t (f a -> a) -> MixfixF t f a
fmixPostfix :: ‚Ñï64 -> CParser t (f a -> a) -> MixfixF t f a
fmixInfix :: ‚Ñï64 -> CParser t (f a -> f a -> a) -> MixfixF t f a
fmixInfixL :: ‚Ñï64 -> CParser t (f a -> f a -> a) -> MixfixF t f a
fmixInfixR :: ‚Ñï64 -> CParser t (f a -> f a -> a) -> MixfixF t f a
fmixTerminal :: CParser t a -> MixfixF t f a
fmixfix :: forall t f a. (Ord t, Comonad f) => (CParser t (f a) -> CParser t (f a)) -> (CParser t (f a) -> CParser t (f a)) -> (CParser t a -> CParser t (f a)) -> MixfixF t f a -> CParser t (f a)
fmixfixWithContext :: forall t a. Ord t => ùïä -> MixfixF t (Annotated FullContext) a -> CParser t (Annotated FullContext a)
data Mixes t a
Mixes :: CParser t (a -> a) -> CParser t (a -> a) -> CParser t (a -> a -> a) -> CParser t (a -> a -> a) -> CParser t (a -> a -> a) -> Mixes t a
[mixesPrefix] :: Mixes t a -> CParser t (a -> a)
[mixesPostfix] :: Mixes t a -> CParser t (a -> a)
[mixesInfix] :: Mixes t a -> CParser t (a -> a -> a)
[mixesInfixL] :: Mixes t a -> CParser t (a -> a -> a)
[mixesInfixR] :: Mixes t a -> CParser t (a -> a -> a)
data Mixfix t a
Mixfix :: CParser t a -> (‚Ñï64 ‚á∞ Mixes t a) -> Mixfix t a
[mixfixTerminals] :: Mixfix t a -> CParser t a
[mixfixLevels] :: Mixfix t a -> ‚Ñï64 ‚á∞ Mixes t a
mixPrefix :: ‚Ñï64 -> CParser t (a -> a) -> Mixfix t a
mixPostfix :: ‚Ñï64 -> CParser t (a -> a) -> Mixfix t a
mixInfix :: ‚Ñï64 -> CParser t (a -> a -> a) -> Mixfix t a
mixInfixL :: ‚Ñï64 -> CParser t (a -> a -> a) -> Mixfix t a
mixInfixR :: ‚Ñï64 -> CParser t (a -> a -> a) -> Mixfix t a
mixTerminal :: CParser t a -> Mixfix t a
mixesPure :: Ord t => Mixes t a -> MixesF t ID a
mixfixPure :: Ord t => Mixfix t a -> MixfixF t ID a
mixfix :: Ord t => Mixfix t a -> CParser t a
mixfixWithContext :: Ord t => ùïä -> Mixfix t a -> CParser t (Annotated FullContext a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.MixesF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.MixesF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.MixesF t f a)

module UVMHS.Lib.Parser.Examples
testParsingSmall :: IO ()
testParsingMultiline :: IO ()
testParsingBranching :: IO ()
testParsingGreedy :: IO ()
testParsingGreedyAmbiguity :: IO ()
testParsingSuccess :: IO ()
testParsingErrorNewline :: IO ()
testParsingErrorEof :: IO ()
testTokenizeSimple :: IO ()
testTokenize :: IO ()
testTokenizeFailure1 :: IO ()
testTokenizeFailure2 :: IO ()

module UVMHS.Lib.Parser

module UVMHS

module UVMHS.Lib.ZerInf
data AddZer a
Zer :: AddZer a
AddZer :: a -> AddZer a
elimAddZer :: b -> (a -> b) -> AddZer a -> b
data AddInf a
Inf :: AddInf a
AddInf :: a -> AddInf a
elimAddInf :: b -> (a -> b) -> AddInf a -> b
data AddZI a
ZerZI :: AddZI a
InfZI :: AddZI a
AddZI :: a -> AddZI a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.ZerInf.AddZI a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.ZerInf.AddZI a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.ZerInf.AddZI a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.ZerInf.AddInf a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.ZerInf.AddInf a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.ZerInf.AddInf a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.ZerInf.AddZer a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.ZerInf.AddZer a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Lib.ZerInf.AddZI a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Monad.Return UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.JoinLattice a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Monad.Return UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Arithmetic.Zero a => UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.One a => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.Times a => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Divide a, UVMHS.Core.Classes.Arithmetic.Zero a, GHC.Classes.Eq a) => UVMHS.Core.Classes.Arithmetic.Divide (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.DivMod a, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.DivMod (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Pon a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Pon (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Pow a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Pow (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.Root a => UVMHS.Core.Classes.Arithmetic.Root (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Log a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Arithmetic.Minus a) => UVMHS.Core.Classes.Arithmetic.Log (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Efn a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Efn (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.MeetLattice a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.MeetLattice a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Monad.Return UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.One a => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Times a => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Divide a, UVMHS.Core.Classes.Lattice.Top a) => UVMHS.Core.Classes.Arithmetic.Divide (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.DivMod a, UVMHS.Core.Classes.Lattice.Top a) => UVMHS.Core.Classes.Arithmetic.DivMod (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Pon a => UVMHS.Core.Classes.Arithmetic.Pon (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Pow a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Pow (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Root a => UVMHS.Core.Classes.Arithmetic.Root (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Log a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Arithmetic.Minus a) => UVMHS.Core.Classes.Arithmetic.Log (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Efn a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Efn (UVMHS.Lib.ZerInf.AddZer a)

module UVMHSContrib.Lang.Arith
lexer :: Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
testTokenizerSuccess :: IO ()
data Lit
IntegerL :: ‚Ñ§ -> Lit
DoubleL :: ùîª -> Lit
StringL :: ùïä -> Lit
data Atom
LitA :: Lit -> Atom
NameA :: ùïä -> Atom
type Exp = Annotated FullContext ExpPre
data ExpPre
AtomE :: Atom -> ExpPre
PlusE :: Exp -> Exp -> ExpPre
TimesE :: Exp -> Exp -> ExpPre
ExpoE :: Exp -> Exp -> ExpPre
FactE :: Exp -> ExpPre
NegateE :: Exp -> ExpPre
EqualE :: Exp -> Exp -> ExpPre
equalEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
negateEL :: (‚å≤) ExpPre Exp
factEL :: (‚å≤) ExpPre Exp
expoEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
timesEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
plusEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
atomEL :: (‚å≤) ExpPre Atom
cpLit :: CParser TokenBasic Lit
cpAtom :: CParser TokenBasic Atom
cpExp :: CParser TokenBasic Exp
testParserSuccess :: IO ()
testParserFailure1 :: IO ()
testParserFailure2 :: IO ()
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.Arith.Atom, UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.Arith.Exp) => UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.Arith.ExpPre
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.Arith.Lit, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.Arith.Atom
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.Arith.Lit

module UVMHSContrib.Lang.SExp
lexer :: Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
testSExpTokenizerSuccess :: IO ()
testSExpTokenizerFailure1 :: IO ()
testSExpTokenizerFailure2 :: IO ()
data Lit
IntegerL :: ‚Ñ§ -> Lit
DoubleL :: ùîª -> Lit
StringL :: ùïä -> Lit
data Atom
LitA :: Lit -> Atom
NameA :: ùïä -> Atom
KeyA :: Atom
PrimA :: Atom
PlusA :: Atom
type Exp = Annotated FullContext ExpPre
data ExpPre
AtomE :: Atom -> ExpPre
ListE :: ùêø Exp -> ExpPre
cpLit :: CParser TokenBasic Lit
cpAtom :: CParser TokenBasic Atom
cpExpPre :: CParser TokenBasic ExpPre
cpList :: CParser TokenBasic (ùêø Exp)
cpExp :: CParser TokenBasic Exp
testSExpParserSuccess :: IO ()
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.SExp.Atom, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.ùêø UVMHSContrib.Lang.SExp.Exp)) => UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.SExp.ExpPre
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.SExp.Lit, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.SExp.Atom
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Core.Pretty UVMHSContrib.Lang.SExp.Lit

module UVMHSMain
main :: IO ()
