-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package psl
@version 0.1.0.0

module AddToUVMHS
data AddBTD a
BotBTD :: AddBTD a
TopBTD :: AddBTD a
AddBTD :: a -> AddBTD a
logBase :: 𝔻 -> 𝔻 -> 𝔻
instance GHC.Show.Show a => GHC.Show.Show (AddToUVMHS.AddBTD a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (AddToUVMHS.AddBTD a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (AddToUVMHS.AddBTD a)
instance UVMHS.Core.Classes.Lattice.Bot (AddToUVMHS.AddBTD a)
instance GHC.Classes.Eq a => UVMHS.Core.Classes.Lattice.Join (AddToUVMHS.AddBTD a)
instance UVMHS.Core.Classes.Lattice.Top (AddToUVMHS.AddBTD a)
instance GHC.Classes.Eq a => UVMHS.Core.Classes.Lattice.Meet (AddToUVMHS.AddBTD a)
instance GHC.Classes.Eq a => UVMHS.Core.Classes.Lattice.JoinLattice (AddToUVMHS.AddBTD a)
instance GHC.Classes.Eq a => UVMHS.Core.Classes.Lattice.MeetLattice (AddToUVMHS.AddBTD a)
instance GHC.Classes.Eq a => UVMHS.Core.Classes.Lattice.Lattice (AddToUVMHS.AddBTD a)
instance UVMHS.Core.Classes.Functor.Functor AddToUVMHS.AddBTD
instance UVMHS.Core.Classes.Monad.Return AddToUVMHS.AddBTD
instance UVMHS.Core.Classes.Monad.Bind AddToUVMHS.AddBTD
instance UVMHS.Core.Classes.Monad.Monad AddToUVMHS.AddBTD
instance UVMHS.Core.Classes.FunctorM.FunctorM AddToUVMHS.AddBTD
instance UVMHS.Lib.Pretty.Core.Pretty a => UVMHS.Lib.Pretty.Core.Pretty (AddToUVMHS.AddBTD a)

module PSL.Interpreter.PrettyFuture

module PSL.Syntax
data Kind
TypeK :: Kind
PrinK :: Kind
PrinsK :: Kind
type Prin = 𝕊
data PrinVal
SinglePV :: Prin -> PrinVal
AccessPV :: Prin -> ℕ -> PrinVal
VirtualPV :: Prin -> PrinVal
data PrinExpVal
ValPEV :: PrinVal -> PrinExpVal
PowPEV :: 𝑃 PrinVal -> PrinExpVal
SetPEV :: ℕ -> Prin -> PrinExpVal
data PrinExp
VarPE :: 𝕏 -> PrinExp
AccessPE :: 𝕏 -> ℕ -> PrinExp
StarPE :: 𝕏 -> PrinExp
ThisPE :: PrinExp
data PrinDecl
SinglePD :: Prin -> PrinDecl
ArrayPD :: Prin -> ℕ -> PrinDecl
data PrinKind
SinglePK :: PrinKind
SetPK :: ℕ -> PrinKind
VirtualPK :: PrinKind
data Constr
SubsetC :: 𝐿 PrinExp -> 𝐿 PrinExp -> Constr
data Mode
SecM :: 𝑃 PrinVal -> Mode
TopM :: Mode
topML :: (⌲) Mode ()
secML :: (⌲) Mode (𝑃 PrinVal)
data EMode
SecEM :: 𝐿 PrinExp -> EMode

-- | SSecEM (𝐿 PrinExp) -- (𝑃 PrinVal)
TopEM :: EMode
topEML :: (⌲) EMode ()
secEML :: (⌲) EMode (𝐿 PrinExp)
data Effect
Effect :: 𝑃 PrinExp -> 𝑃 PrinExp -> EMode -> Effect
[effectInput] :: Effect -> 𝑃 PrinExp
[effectReveal] :: Effect -> 𝑃 PrinExp
[effectMode] :: Effect -> EMode
effectModeL :: (⟢) Effect EMode
effectRevealL :: (⟢) Effect (𝑃 PrinExp)
effectInputL :: (⟢) Effect (𝑃 PrinExp)
type TVar = 𝕏
data Prot
YaoP :: Prot
BGWP :: Prot
GMWP :: Prot
BGVP :: Prot
SPDZP :: Prot
AutoP :: Prot
data IPrecision
InfIPr :: IPrecision
FixedIPr :: ℕ -> ℕ -> IPrecision
iprDefault :: IPrecision
data FPrecision
FixedFPr :: ℕ -> ℕ -> FPrecision
fprDefault :: FPrecision
data Type
VarT :: TVar -> Type
UnitT :: Type
𝔹T :: Type
𝕊T :: Type
ℙT :: Type
ℙsT :: Type
ℕT :: IPrecision -> Type
ℤT :: IPrecision -> Type
𝔽T :: FPrecision -> Type
(:+:) :: Type -> Type -> Type
(:×:) :: Type -> Type -> Type
ListT :: Type -> Type
RefT :: Type -> Type
ArrT :: Type -> Type
(:→:) :: Type -> (Effect ∧ Type) -> Type
(:→†:) :: ((𝕏 ∧ Type) ∧ 𝐿 Constr) -> (Effect ∧ Type) -> Type
ForallT :: 𝐿 (TVar ∧ Kind) -> 𝐿 Constr -> Type -> Type
SecT :: 𝐿 PrinExp -> Type -> Type

-- | SSecT (𝐿 PrinExp) Type -- τ{ssec:P} / τ{ssec:P}
ISecT :: 𝐿 PrinExp -> Type -> Type
ShareT :: Prot -> 𝐿 PrinExp -> Type -> Type
NizkTestT :: 𝐿 PrinExp -> Type -> Type
NizkVerifyT :: 𝐿 PrinExp -> Type -> Type
type Var = 𝕏
data Pat
VarP :: Var -> Pat
BulP :: Pat
LP :: Pat -> Pat
RP :: Pat -> Pat
TupP :: Pat -> Pat -> Pat
NilP :: Pat
ConsP :: Pat -> Pat -> Pat
EmptyP :: Pat
BundleP :: 𝕏 -> Pat -> Pat -> Pat
EmptySetP :: Pat
SetP :: 𝕏 -> Pat -> Pat
AscrP :: Pat -> Type -> Pat
WildP :: Pat
wildPL :: (⌲) Pat ()
ascrPL :: (⌲) Pat ((∧) Pat Type)
setPL :: (⌲) Pat ((∧) 𝕏 Pat)
emptySetPL :: (⌲) Pat ()
bundlePL :: (⌲) Pat ((∧) ((∧) 𝕏 Pat) Pat)
emptyPL :: (⌲) Pat ()
consPL :: (⌲) Pat ((∧) Pat Pat)
nilPL :: (⌲) Pat ()
tupPL :: (⌲) Pat ((∧) Pat Pat)
rPL :: (⌲) Pat Pat
lPL :: (⌲) Pat Pat
bulPL :: (⌲) Pat ()
varPL :: (⌲) Pat Var
data Op
OrO :: Op
AndO :: Op
NotO :: Op
PlusO :: Op
MinusO :: Op
TimesO :: Op
ExpO :: Op
DivO :: Op
ModO :: Op
EqO :: Op
LTO :: Op
GTO :: Op
LTEO :: Op
GTEO :: Op
CondO :: Op
AbsO :: Op
SqrtO :: Op
LogO :: Op
NatO :: IPrecision -> Op
IntO :: IPrecision -> Op
FltO :: FPrecision -> Op
CeilO :: IPrecision -> Op
ceilOL :: (⌲) Op IPrecision
fltOL :: (⌲) Op FPrecision
intOL :: (⌲) Op IPrecision
natOL :: (⌲) Op IPrecision
logOL :: (⌲) Op ()
sqrtOL :: (⌲) Op ()
absOL :: (⌲) Op ()
condOL :: (⌲) Op ()
gTEOL :: (⌲) Op ()
lTEOL :: (⌲) Op ()
gTOL :: (⌲) Op ()
lTOL :: (⌲) Op ()
eqOL :: (⌲) Op ()
modOL :: (⌲) Op ()
divOL :: (⌲) Op ()
expOL :: (⌲) Op ()
timesOL :: (⌲) Op ()
minusOL :: (⌲) Op ()
plusOL :: (⌲) Op ()
notOL :: (⌲) Op ()
andOL :: (⌲) Op ()
orOL :: (⌲) Op ()
type Exp = Annotated FullContext ExpR
data ExpR
VarE :: Var -> ExpR
BoolE :: 𝔹 -> ExpR
StrE :: 𝕊 -> ExpR
NatE :: IPrecision -> ℕ -> ExpR
IntE :: IPrecision -> ℤ -> ExpR
FltE :: FPrecision -> 𝔻 -> ExpR
BulE :: ExpR
IfE :: Exp -> Exp -> Exp -> ExpR
MuxIfE :: Exp -> Exp -> Exp -> ExpR
LE :: Exp -> ExpR
RE :: Exp -> ExpR
TupE :: Exp -> Exp -> ExpR
NilE :: ExpR
ConsE :: Exp -> Exp -> ExpR
LetTyE :: Pat -> Exp -> ExpR
LetE :: Pat -> Exp -> Exp -> ExpR
CaseE :: Exp -> 𝐿 (Pat ∧ Exp) -> ExpR
MuxCaseE :: Exp -> 𝐿 (Pat ∧ Exp) -> ExpR
LamE :: 𝑂 Var -> 𝐿 Pat -> Exp -> ExpR
AppE :: Exp -> Exp -> ExpR
TLamE :: TVar -> Exp -> ExpR
TAppE :: Exp -> Type -> ExpR
ParE :: 𝐿 PrinExp -> Exp -> ExpR
ShareE :: Prot -> 𝐿 PrinExp -> 𝐿 PrinExp -> Exp -> ExpR
AccessE :: Exp -> PrinExp -> ExpR
BundleE :: 𝐿 (PrinExp ∧ Exp) -> ExpR
BundleUnionE :: Exp -> Exp -> ExpR
RevealE :: 𝐿 PrinExp -> Exp -> ExpR
SendE :: 𝐿 PrinExp -> 𝐿 PrinExp -> Exp -> ExpR
AscrE :: Exp -> Type -> ExpR
ReadE :: Type -> Exp -> ExpR
WriteE :: Exp -> Exp -> ExpR
RandE :: Type -> ExpR
RandRangeE :: Type -> Exp -> ExpR
InferE :: ExpR
HoleE :: ExpR
PrimE :: Op -> 𝐿 Exp -> ExpR
TraceE :: Exp -> Exp -> ExpR
SetE :: 𝐿 PrinExp -> ExpR
RefE :: Exp -> ExpR
RefReadE :: Exp -> ExpR
RefWriteE :: Exp -> Exp -> ExpR
ArrayE :: Exp -> Exp -> ExpR
ArrayReadE :: Exp -> Exp -> ExpR
ArrayWriteE :: Exp -> Exp -> ExpR
SizeE :: Exp -> ExpR
DefaultE :: ExpR
ProcE :: Exp -> ExpR
ReturnE :: Exp -> ExpR
NizkWitnessE :: Prot -> 𝐿 PrinExp -> Exp -> ExpR
NizkCommitE :: Prot -> 𝐿 PrinExp -> Exp -> ExpR
StringConcatE :: Exp -> Exp -> ExpR
ToStringE :: Exp -> ExpR
SignE :: 𝐿 PrinExp -> Exp -> ExpR
UnsignE :: 𝐿 PrinExp -> Exp -> ExpR
IsSignedE :: 𝐿 PrinExp -> Exp -> ExpR
buildLambda :: FullContext -> Var -> 𝐿 Pat -> Exp -> Exp
buildUnfixedLambda :: FullContext -> Var -> 𝐿 Pat -> Exp -> Exp
type TL = Annotated FullContext TLR
data TLR
DeclTL :: 𝔹 -> Var -> Type -> TLR
DefnTL :: 𝔹 -> Var -> 𝐿 Pat -> Exp -> TLR
PrinTL :: 𝐿 PrinDecl -> TLR
PrimTL :: Var -> Type -> TLR
ImportTL :: 𝕊 -> 𝐿 (𝕊 ∧ 𝐿 PrinExp) -> TLR
VirtualPartyTL :: 𝐿 𝕊 -> TLR
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝔹, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Var, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Type, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.Pat), UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Exp, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.PrinDecl), UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝕊, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 (UVMHS.Core.Init.𝕊 UVMHS.Core.Init.∧ UVMHS.Core.Init.𝐿 PSL.Syntax.PrinExp)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 UVMHS.Core.Init.𝕊)) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.TLR
instance GHC.Classes.Ord PSL.Syntax.TLR
instance GHC.Classes.Eq PSL.Syntax.TLR
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Var, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝔹, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝕊, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.IPrecision, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℕ, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℤ, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.FPrecision, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝔻, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Exp, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Pat, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 (PSL.Syntax.Pat UVMHS.Core.Init.∧ PSL.Syntax.Exp)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝑂 PSL.Syntax.Var), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.Pat), UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.TVar, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Type, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.PrinExp), UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Prot, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.PrinExp, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 (PSL.Syntax.PrinExp UVMHS.Core.Init.∧ PSL.Syntax.Exp)), UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Op, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.Exp)) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.ExpR
instance GHC.Show.Show PSL.Syntax.ExpR
instance GHC.Classes.Ord PSL.Syntax.ExpR
instance GHC.Classes.Eq PSL.Syntax.ExpR
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.IPrecision, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.FPrecision) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Op
instance GHC.Show.Show PSL.Syntax.Op
instance GHC.Classes.Ord PSL.Syntax.Op
instance GHC.Classes.Eq PSL.Syntax.Op
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Var, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Pat, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Binders.𝕏, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Type) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Pat
instance GHC.Show.Show PSL.Syntax.Pat
instance GHC.Classes.Ord PSL.Syntax.Pat
instance GHC.Classes.Eq PSL.Syntax.Pat
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.TVar, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.IPrecision, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.FPrecision, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Type, UVMHS.Lib.Pretty.Core.Pretty (PSL.Syntax.Effect UVMHS.Core.Init.∧ PSL.Syntax.Type), UVMHS.Lib.Pretty.Core.Pretty ((UVMHS.Lib.Binders.𝕏 UVMHS.Core.Init.∧ PSL.Syntax.Type) UVMHS.Core.Init.∧ UVMHS.Core.Init.𝐿 PSL.Syntax.Constr), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 (PSL.Syntax.TVar UVMHS.Core.Init.∧ PSL.Syntax.Kind)), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.Constr), UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.PrinExp), UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Prot) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Type
instance GHC.Show.Show PSL.Syntax.Type
instance GHC.Classes.Ord PSL.Syntax.Type
instance GHC.Classes.Eq PSL.Syntax.Type
instance GHC.Show.Show PSL.Syntax.FPrecision
instance GHC.Classes.Ord PSL.Syntax.FPrecision
instance GHC.Classes.Eq PSL.Syntax.FPrecision
instance GHC.Show.Show PSL.Syntax.IPrecision
instance GHC.Classes.Ord PSL.Syntax.IPrecision
instance GHC.Classes.Eq PSL.Syntax.IPrecision
instance GHC.Show.Show PSL.Syntax.Prot
instance GHC.Classes.Ord PSL.Syntax.Prot
instance GHC.Classes.Eq PSL.Syntax.Prot
instance (UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝑃 PSL.Syntax.PrinExp), UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.EMode) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Effect
instance GHC.Show.Show PSL.Syntax.Effect
instance GHC.Classes.Ord PSL.Syntax.Effect
instance GHC.Classes.Eq PSL.Syntax.Effect
instance UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.PrinExp) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.EMode
instance GHC.Show.Show PSL.Syntax.EMode
instance GHC.Classes.Ord PSL.Syntax.EMode
instance GHC.Classes.Eq PSL.Syntax.EMode
instance UVMHS.Core.Classes.Lattice.POrd PSL.Syntax.Mode
instance GHC.Show.Show PSL.Syntax.Mode
instance GHC.Classes.Ord PSL.Syntax.Mode
instance GHC.Classes.Eq PSL.Syntax.Mode
instance UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 PSL.Syntax.PrinExp) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Constr
instance GHC.Show.Show PSL.Syntax.Constr
instance GHC.Classes.Ord PSL.Syntax.Constr
instance GHC.Classes.Eq PSL.Syntax.Constr
instance UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℕ => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.PrinKind
instance GHC.Show.Show PSL.Syntax.PrinKind
instance GHC.Classes.Ord PSL.Syntax.PrinKind
instance GHC.Classes.Eq PSL.Syntax.PrinKind
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Prin, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℕ) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.PrinDecl
instance GHC.Show.Show PSL.Syntax.PrinDecl
instance GHC.Classes.Ord PSL.Syntax.PrinDecl
instance GHC.Classes.Eq PSL.Syntax.PrinDecl
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Lib.Binders.𝕏, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℕ) => UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.PrinExp
instance GHC.Show.Show PSL.Syntax.PrinExp
instance GHC.Classes.Ord PSL.Syntax.PrinExp
instance GHC.Classes.Eq PSL.Syntax.PrinExp
instance GHC.Show.Show PSL.Syntax.PrinExpVal
instance GHC.Classes.Ord PSL.Syntax.PrinExpVal
instance GHC.Classes.Eq PSL.Syntax.PrinExpVal
instance GHC.Show.Show PSL.Syntax.PrinVal
instance GHC.Classes.Ord PSL.Syntax.PrinVal
instance GHC.Classes.Eq PSL.Syntax.PrinVal
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Kind
instance GHC.Show.Show PSL.Syntax.Kind
instance GHC.Classes.Ord PSL.Syntax.Kind
instance GHC.Classes.Eq PSL.Syntax.Kind

module PSL.Interpreter.Types
data Val
BoolV :: 𝔹 -> Val
StrV :: 𝕊 -> Val
NatV :: IPrecision -> ℕ -> Val
IntV :: IPrecision -> ℤ -> Val
FltV :: FPrecision -> 𝔻 -> Val
BulV :: Val
PairV :: ValP -> ValP -> Val
LV :: ValP -> Val
RV :: ValP -> Val
NilV :: Val
ConsV :: ValP -> ValP -> Val
CloV :: 𝑂 Var -> Pat -> Exp -> Env -> Val
TCloV :: TVar -> Exp -> Env -> Val
PrinV :: PrinExpVal -> Val
PrinSetV :: 𝑃 PrinVal -> Val
LocV :: Mode -> ℤ64 -> Val
ArrayV :: 𝕍 ValP -> Val
DefaultV :: Val
NizkVerifyV :: 𝑃 PrinVal -> ValP -> Val
data ValP
SSecVP :: 𝑃 PrinVal -> Val -> ValP
ISecVP :: (PrinVal ⇰ Val) -> ValP
ShareVP :: 𝔹 -> Prot -> 𝑃 PrinVal -> ValMPC -> ValP
AllVP :: Val -> ValP
UnknownVP :: ValP
PairVP :: ValP -> ValP -> ValP
data ValMPC
BaseMV :: ℕ -> BaseValMPC -> ValMPC
PairMV :: ValMPC -> ValMPC -> ValMPC
SumMV :: ℕ -> 𝔹 -> ValMPC -> ValMPC -> ValMPC
NilMV :: ValMPC
ConsMV :: ValMPC -> ValMPC -> ValMPC
BulMV :: ValMPC
DefaultMV :: ValMPC
data BaseValMPC
BoolMV :: 𝔹 -> BaseValMPC
NatMV :: IPrecision -> ℕ -> BaseValMPC
IntMV :: IPrecision -> ℤ -> BaseValMPC
FltMV :: FPrecision -> 𝔻 -> BaseValMPC
PrinMV :: AddBTD PrinVal -> BaseValMPC
type Env = 𝕏 ⇰ ValP
nizkVerifyVL :: (⌲) Val ((∧) (𝑃 PrinVal) ValP)
defaultVL :: (⌲) Val ()
arrayVL :: (⌲) Val (𝕍 ValP)
locVL :: (⌲) Val ((∧) Mode ℤ64)
prinSetVL :: (⌲) Val (𝑃 PrinVal)
prinVL :: (⌲) Val PrinExpVal
tCloVL :: (⌲) Val ((∧) ((∧) TVar Exp) Env)
cloVL :: (⌲) Val ((∧) ((∧) ((∧) (𝑂 Var) Pat) Exp) Env)
consVL :: (⌲) Val ((∧) ValP ValP)
nilVL :: (⌲) Val ()
rVL :: (⌲) Val ValP
lVL :: (⌲) Val ValP
pairVL :: (⌲) Val ((∧) ValP ValP)
bulVL :: (⌲) Val ()
fltVL :: (⌲) Val ((∧) FPrecision 𝔻)
intVL :: (⌲) Val ((∧) IPrecision ℤ)
natVL :: (⌲) Val ((∧) IPrecision ℕ)
strVL :: (⌲) Val 𝕊
boolVL :: (⌲) Val 𝔹
pairVPL :: (⌲) ValP ((∧) ValP ValP)
unknownVPL :: (⌲) ValP ()
allVPL :: (⌲) ValP Val
shareVPL :: (⌲) ValP ((∧) ((∧) ((∧) 𝔹 Prot) (𝑃 PrinVal)) ValMPC)
iSecVPL :: (⌲) ValP ((⇰) PrinVal Val)
sSecVPL :: (⌲) ValP ((∧) (𝑃 PrinVal) Val)
defaultMVL :: (⌲) ValMPC ()
bulMVL :: (⌲) ValMPC ()
consMVL :: (⌲) ValMPC ((∧) ValMPC ValMPC)
nilMVL :: (⌲) ValMPC ()
sumMVL :: (⌲) ValMPC ((∧) ((∧) ((∧) ℕ 𝔹) ValMPC) ValMPC)
pairMVL :: (⌲) ValMPC ((∧) ValMPC ValMPC)
baseMVL :: (⌲) ValMPC ((∧) ℕ BaseValMPC)
prinMVL :: (⌲) BaseValMPC (AddBTD PrinVal)
fltMVL :: (⌲) BaseValMPC ((∧) FPrecision 𝔻)
intMVL :: (⌲) BaseValMPC ((∧) IPrecision ℤ)
natMVL :: (⌲) BaseValMPC ((∧) IPrecision ℕ)
boolMVL :: (⌲) BaseValMPC 𝔹
data ShareInfo
NotShared :: ShareInfo
Shared :: 𝔹 -> Prot -> 𝑃 PrinVal -> ShareInfo
type Store = 𝑊 ValP
data IParams
IParams :: 𝔹 -> 𝔹 -> (𝕊 ⇰ 𝑃 PrinVal) -> IParams
[iParamsDoResources] :: IParams -> 𝔹
[iParamsIsExample] :: IParams -> 𝔹
[iParamsVirtualPartyArgs] :: IParams -> 𝕊 ⇰ 𝑃 PrinVal
iParamsVirtualPartyArgsL :: (⟢) IParams ((⇰) 𝕊 (𝑃 PrinVal))
iParamsIsExampleL :: (⟢) IParams 𝔹
iParamsDoResourcesL :: (⟢) IParams 𝔹
θ₀ :: IParams
data ICxt
ICxt :: IParams -> 𝑂 FullContext -> (Prin ⇰ PrinKind) -> Env -> Mode -> 𝐿 ((ℕ ∧ 𝔹) ∧ ShareInfo) -> ICxt
[iCxtParams] :: ICxt -> IParams
[iCxtSource] :: ICxt -> 𝑂 FullContext
[iCxtDeclPrins] :: ICxt -> Prin ⇰ PrinKind
[iCxtEnv] :: ICxt -> Env
[iCxtMode] :: ICxt -> Mode
[iCxtMPCPathCondition] :: ICxt -> 𝐿 ((ℕ ∧ 𝔹) ∧ ShareInfo)
iCxtMPCPathConditionL :: (⟢) ICxt (𝐿 ((∧) ((∧) ℕ 𝔹) ShareInfo))
iCxtModeL :: (⟢) ICxt Mode
iCxtEnvL :: (⟢) ICxt Env
iCxtDeclPrinsL :: (⟢) ICxt ((⇰) Prin PrinKind)
iCxtSourceL :: (⟢) ICxt (𝑂 FullContext)
iCxtParamsL :: (⟢) ICxt IParams
iCxtDoResourcesL :: ICxt ⟢ 𝔹
iCxtIsExampleL :: ICxt ⟢ 𝔹
ξ₀ :: ICxt
data IState
IState :: Store -> ℤ64 -> 𝐿 ((𝐿 ((ℕ ∧ 𝔹) ∧ ShareInfo) ∧ ShareInfo) ∧ ValMPC) -> IState
[iStateStore] :: IState -> Store
[iStateNextLoc] :: IState -> ℤ64
[iStateMPCCont] :: IState -> 𝐿 ((𝐿 ((ℕ ∧ 𝔹) ∧ ShareInfo) ∧ ShareInfo) ∧ ValMPC)
iStateMPCContL :: (⟢) IState (𝐿 ((∧) ((∧) (𝐿 ((∧) ((∧) ℕ 𝔹) ShareInfo)) ShareInfo) ValMPC))
iStateNextLocL :: (⟢) IState ℤ64
iStateStoreL :: (⟢) IState Store
ω₀ :: IState
data ResEv
ResEv :: 𝔹 -> Prot -> 𝑃 PrinVal -> 𝑃 PrinVal -> 𝑃 PrinVal -> 𝕊 -> 𝕊 -> 𝕊 -> 𝕊 -> ℕ -> ResEv
[resEvZK] :: ResEv -> 𝔹
[resEvProt] :: ResEv -> Prot
[resEvPrins] :: ResEv -> 𝑃 PrinVal
[resEvPrinsFrom] :: ResEv -> 𝑃 PrinVal
[resEvPrinsTo] :: ResEv -> 𝑃 PrinVal
[resEvType] :: ResEv -> 𝕊
[resEvTypeFrom] :: ResEv -> 𝕊
[resEvTypeTo] :: ResEv -> 𝕊
[resEvOp] :: ResEv -> 𝕊
[resEvMd] :: ResEv -> ℕ
resEvMdL :: (⟢) ResEv ℕ
resEvOpL :: (⟢) ResEv 𝕊
resEvTypeToL :: (⟢) ResEv 𝕊
resEvTypeFromL :: (⟢) ResEv 𝕊
resEvTypeL :: (⟢) ResEv 𝕊
resEvPrinsToL :: (⟢) ResEv (𝑃 PrinVal)
resEvPrinsFromL :: (⟢) ResEv (𝑃 PrinVal)
resEvPrinsL :: (⟢) ResEv (𝑃 PrinVal)
resEvProtL :: (⟢) ResEv Prot
resEvZKL :: (⟢) ResEv 𝔹
data IOut
IOut :: (ResEv ⇰ ℕ) -> IOut
[iOutResEvs] :: IOut -> ResEv ⇰ ℕ
iOutResEvsL :: (⟢) IOut ((⇰) ResEv ℕ)
data IErrorClass
SyntaxIError :: IErrorClass
TypeIError :: IErrorClass
NotImplementedIError :: IErrorClass
InternalIError :: IErrorClass
data IError
IError :: 𝑂 FullContext -> CallStack -> IErrorClass -> Doc -> IError
[iErrorSource] :: IError -> 𝑂 FullContext
[iErrorCallStack] :: IError -> CallStack
[iErrorClass] :: IError -> IErrorClass
[iErrorMsg] :: IError -> Doc
throwIErrorCxt :: (Monad m, MonadReader ICxt m, MonadError IError m, STACK) => IErrorClass -> 𝕊 -> 𝐿 (𝕊 ∧ Doc) -> m a
throwIError :: (Monad m, MonadError IError m, STACK) => 𝑂 FullContext -> IErrorClass -> 𝕊 -> 𝐿 (𝕊 ∧ Doc) -> m a
guardErr :: (Monad m, MonadError IError m) => Bool -> m () -> m ()
error𝑂 :: (Monad m, MonadError IError m) => 𝑂 a -> m a -> m a
data ITLState
ITLState :: (Prin ⇰ PrinKind) -> Env -> IState -> ITLState
[itlStateDeclPrins] :: ITLState -> Prin ⇰ PrinKind
[itlStateEnv] :: ITLState -> Env
[itlStateExp] :: ITLState -> IState
itlStateExpL :: (⟢) ITLState IState
itlStateEnvL :: (⟢) ITLState Env
itlStateDeclPrinsL :: (⟢) ITLState ((⇰) Prin PrinKind)
ωtl₀ :: ITLState
newtype IM a
IM :: RWST ICxt IOut IState (ErrorT IError IO) a -> IM a
[unIM] :: IM a -> RWST ICxt IOut IState (ErrorT IError IO) a
mkIM :: (ICxt -> IState -> IO (IError ∨ ((IState ∧ IOut) ∧ a))) -> IM a
runIM :: ICxt -> IState -> IM a -> IO (IError ∨ ((IState ∧ IOut) ∧ a))
newtype ITLM a
ITLM :: RWST IParams IOut ITLState (ErrorT IError IO) a -> ITLM a
[unITLM] :: ITLM a -> RWST IParams IOut ITLState (ErrorT IError IO) a
printError :: IError -> IO ()
mkITLM :: (IParams -> ITLState -> IO (IError ∨ ((ITLState ∧ IOut) ∧ a))) -> ITLM a
runITLM :: IParams -> ITLState -> ITLM a -> IO (IError ∨ ((ITLState ∧ IOut) ∧ a))
runITLMIO :: IParams -> ITLState -> 𝕊 -> ITLM a -> IO ((ITLState ∧ IOut) ∧ a)
evalITLM :: IParams -> ITLState -> ITLM a -> IO (IError ∨ a)
evalITLMIO :: IParams -> ITLState -> 𝕊 -> ITLM a -> IO a
asTLM :: IM a -> ITLM a
instance UVMHS.Core.Effects.MonadIO PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Effects.MonadError PSL.Interpreter.Types.IError PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Effects.MonadState PSL.Interpreter.Types.ITLState PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Effects.MonadWriter PSL.Interpreter.Types.IOut PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Effects.MonadReader PSL.Interpreter.Types.IParams PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Classes.Monad.Monad PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Classes.Monad.Bind PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Classes.Monad.Return PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Classes.Functor.Functor PSL.Interpreter.Types.ITLM
instance UVMHS.Core.Effects.MonadIO PSL.Interpreter.Types.IM
instance UVMHS.Core.Effects.MonadError PSL.Interpreter.Types.IError PSL.Interpreter.Types.IM
instance UVMHS.Core.Effects.MonadState PSL.Interpreter.Types.IState PSL.Interpreter.Types.IM
instance UVMHS.Core.Effects.MonadWriter PSL.Interpreter.Types.IOut PSL.Interpreter.Types.IM
instance UVMHS.Core.Effects.MonadReader PSL.Interpreter.Types.ICxt PSL.Interpreter.Types.IM
instance UVMHS.Core.Classes.Monad.Monad PSL.Interpreter.Types.IM
instance UVMHS.Core.Classes.Monad.Bind PSL.Interpreter.Types.IM
instance UVMHS.Core.Classes.Monad.Return PSL.Interpreter.Types.IM
instance UVMHS.Core.Classes.Functor.Functor PSL.Interpreter.Types.IM
instance (UVMHS.Lib.Pretty.Core.Pretty (PSL.Syntax.Prin UVMHS.Core.Init.⇰ PSL.Syntax.PrinKind), UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.Env, UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.IState) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.ITLState
instance GHC.Show.Show PSL.Interpreter.Types.ITLState
instance GHC.Classes.Ord PSL.Interpreter.Types.ITLState
instance GHC.Classes.Eq PSL.Interpreter.Types.ITLState
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.IErrorClass
instance GHC.Show.Show PSL.Interpreter.Types.IErrorClass
instance GHC.Classes.Ord PSL.Interpreter.Types.IErrorClass
instance GHC.Classes.Eq PSL.Interpreter.Types.IErrorClass
instance UVMHS.Core.Classes.Monoid.Null PSL.Interpreter.Types.IOut
instance UVMHS.Core.Classes.Monoid.Append PSL.Interpreter.Types.IOut
instance UVMHS.Core.Classes.Monoid.Monoid PSL.Interpreter.Types.IOut
instance UVMHS.Lib.Pretty.Core.Pretty (PSL.Interpreter.Types.ResEv UVMHS.Core.Init.⇰ UVMHS.Core.Init.ℕ) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.IOut
instance GHC.Show.Show PSL.Interpreter.Types.IOut
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝔹, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Prot, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝑃 PSL.Syntax.PrinVal), UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝕊, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℕ) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.ResEv
instance GHC.Show.Show PSL.Interpreter.Types.ResEv
instance GHC.Classes.Ord PSL.Interpreter.Types.ResEv
instance GHC.Classes.Eq PSL.Interpreter.Types.ResEv
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.Store, UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.ℤ64, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 ((UVMHS.Core.Init.𝐿 ((UVMHS.Core.Init.ℕ UVMHS.Core.Init.∧ UVMHS.Core.Init.𝔹) UVMHS.Core.Init.∧ PSL.Interpreter.Types.ShareInfo) UVMHS.Core.Init.∧ PSL.Interpreter.Types.ShareInfo) UVMHS.Core.Init.∧ PSL.Interpreter.Types.ValMPC))) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.IState
instance GHC.Show.Show PSL.Interpreter.Types.IState
instance GHC.Classes.Ord PSL.Interpreter.Types.IState
instance GHC.Classes.Eq PSL.Interpreter.Types.IState
instance (UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.IParams, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝑂 UVMHS.Lib.Parser.ParserContext.FullContext), UVMHS.Lib.Pretty.Core.Pretty (PSL.Syntax.Prin UVMHS.Core.Init.⇰ PSL.Syntax.PrinKind), UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.Env, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Mode, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝐿 ((UVMHS.Core.Init.ℕ UVMHS.Core.Init.∧ UVMHS.Core.Init.𝔹) UVMHS.Core.Init.∧ PSL.Interpreter.Types.ShareInfo))) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.ICxt
instance GHC.Show.Show PSL.Interpreter.Types.ICxt
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝔹, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝕊 UVMHS.Core.Init.⇰ UVMHS.Core.Init.𝑃 PSL.Syntax.PrinVal)) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.IParams
instance GHC.Show.Show PSL.Interpreter.Types.IParams
instance GHC.Classes.Ord PSL.Interpreter.Types.IParams
instance GHC.Classes.Eq PSL.Interpreter.Types.IParams
instance (UVMHS.Lib.Pretty.Core.Pretty UVMHS.Core.Init.𝔹, UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Prot, UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Init.𝑃 PSL.Syntax.PrinVal)) => UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.ShareInfo
instance GHC.Show.Show PSL.Interpreter.Types.ShareInfo
instance GHC.Classes.Ord PSL.Interpreter.Types.ShareInfo
instance GHC.Classes.Eq PSL.Interpreter.Types.ShareInfo
instance GHC.Show.Show PSL.Interpreter.Types.Val
instance GHC.Classes.Ord PSL.Interpreter.Types.Val
instance GHC.Classes.Eq PSL.Interpreter.Types.Val
instance GHC.Show.Show PSL.Interpreter.Types.ValP
instance GHC.Classes.Ord PSL.Interpreter.Types.ValP
instance GHC.Classes.Eq PSL.Interpreter.Types.ValP
instance GHC.Show.Show PSL.Interpreter.Types.ValMPC
instance GHC.Classes.Ord PSL.Interpreter.Types.ValMPC
instance GHC.Classes.Eq PSL.Interpreter.Types.ValMPC
instance GHC.Show.Show PSL.Interpreter.Types.BaseValMPC
instance GHC.Classes.Ord PSL.Interpreter.Types.BaseValMPC
instance GHC.Classes.Eq PSL.Interpreter.Types.BaseValMPC

module PSL.Interpreter.Truncating
trNat :: ℕ -> ℕ -> ℕ
trPrNat :: IPrecision -> ℕ -> ℕ
buNat :: ℕ -> ℕ -> ℕ
buPrNat :: IPrecision -> ℕ -> ℕ
trInt :: ℕ -> ℤ -> ℤ
trPrInt :: IPrecision -> ℤ -> ℤ

module PSL.Interpreter.Pretty
levelIF :: ℕ64
levelLAM :: ℕ64
levelLET :: ℕ64
levelPAR :: ℕ64
levelUPDATE :: ℕ64
levelCOMMA :: ℕ64
levelASCR :: ℕ64
levelCONS :: ℕ64
levelREVEAL :: ℕ64
levelCOND :: ℕ64
levelCOMPARE :: ℕ64
levelARROW :: ℕ64
levelPLUS :: ℕ64
levelTIMES :: ℕ64
levelEXP :: ℕ64
levelAPP :: ℕ64
levelDEREF :: ℕ64
levelACCESS :: ℕ64
levelMODE :: ℕ64
ppBoolPSL :: 𝔹 -> Doc
ppNatPSL :: IPrecision -> ℕ -> Doc
ppIntPSL :: IPrecision -> ℤ -> Doc
ppFltPSL :: FPrecision -> 𝔻 -> Doc
ppListPSL :: 𝐿 ValP -> Doc
ppArrayPSL :: 𝕍 ValP -> Doc
ppISecPSL :: (PrinVal ⇰ Val) -> Doc
asListVP :: ValP -> 𝑂 (𝐿 ValP ∧ Mode)
asListV :: Val -> 𝑂 (𝐿 ValP ∧ 𝑂 Mode)
asNtupVP :: ValP -> 𝐼 ValP
ppPreF :: (𝐼 Doc -> Doc) -> ℕ64 -> Doc -> Doc -> Doc
ppPostF :: (𝐼 Doc -> Doc) -> ℕ64 -> Doc -> Doc -> Doc
ppInflF :: (𝐼 Doc -> Doc) -> ℕ64 -> Doc -> Doc -> Doc -> Doc
ppTight :: ToIter Doc t => t -> Doc
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Prot
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.IPrecision
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.FPrecision
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Mode
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.Val
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.PrinVal
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.PrinExpVal
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.ValP
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.ValMPC
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Interpreter.Types.BaseValMPC

module PSL.Parser
lexer :: Lexer CharClass ℂ TokenClassBasic ℕ64 TokenBasic
pKind :: CParser TokenBasic Kind
pPrin :: CParser TokenBasic 𝕏
pPrinExp :: CParser TokenBasic PrinExp
pPrins :: CParser TokenBasic (𝐿 PrinExp)
pPrinExps :: CParser TokenBasic (𝐿 PrinExp)
pConstr :: CParser TokenBasic Constr
pEMode :: CParser TokenBasic EMode
pEffect :: CParser TokenBasic Effect
pTVar :: CParser TokenBasic TVar
pIPrecision :: CParser TokenBasic IPrecision
pFPrecision :: CParser TokenBasic FPrecision
pType :: CParser TokenBasic Type
pBool :: CParser TokenBasic 𝔹
pProt :: CParser TokenBasic Prot
pVar :: CParser TokenBasic Var
pPat :: CParser TokenBasic Pat
pExp :: CParser TokenBasic Exp
pTL :: CParser TokenBasic TL
cpTLs :: CParser TokenBasic (𝐿 TL)
testParserExample :: 𝕊 -> IO ()
testParser :: IO ()

module PSL.Interpreter.Json
iprecisionSuffix :: IPrecision -> 𝕊
fprecisionSuffix :: FPrecision -> 𝕊
getType :: Val -> 𝕊
getTypeMPC :: ValMPC -> 𝕊
getTypeBaseMPC :: BaseValMPC -> 𝕊
stringProtocol :: Prot -> 𝕊
jsonPrinVal :: PrinVal -> 𝕊
jsonPrins :: 𝑃 PrinVal -> Value
jsonEvent :: ResEv -> ℕ -> Value
jsonEvents :: ToIter (ResEv ∧ ℕ) t => t -> Value

module PSL.Interpreter.Primitives
valWithType :: Val -> Val ∧ 𝕊
tnat :: IPrecision -> 𝕊
tint :: IPrecision -> 𝕊
tflt :: FPrecision -> 𝕊
tboo :: 𝕊
tprn :: 𝕊
interpPrim :: STACK => Op -> 𝐿 BaseValMPC -> IM ((𝕊 ∧ 𝕊) ∧ BaseValMPC)
opName :: Op -> 𝕊
multDepth :: Prot -> Op -> ℕ
multDepthShareInfo :: Op -> ShareInfo -> ℕ

module PSL.Interpreter.Access
restrictMode :: STACK => Mode -> IM a -> IM a
introValP :: STACK => Val -> IM ValP
locValP :: STACK => ℤ64 -> IM ValP
elimLocV :: STACK => Val -> IM ℤ64
elimValP :: STACK => ValP -> IM Val
restrictValP :: STACK => ValP -> IM ValP
restrictValPRecVal :: STACK => Val -> IM Val
joinShareInfo :: STACK => ShareInfo -> ShareInfo -> IM ShareInfo
joinShareInfos :: (STACK, ToIter ShareInfo t) => t -> IM ShareInfo
unShareValP :: STACK => ValP -> IM (ShareInfo ∧ ValMPC)
unShareValPMode :: STACK => Mode -> ValP -> IM (ShareInfo ∧ ValMPC)
unShareValMode :: STACK => Mode -> Val -> IM (ShareInfo ∧ ValMPC)
unShareValPs :: STACK => 𝐿 ValP -> IM (ShareInfo ∧ 𝐿 ValMPC)
reShareValP :: STACK => ValMPC -> ShareInfo -> IM ValP
reShareValPShared :: STACK => 𝔹 -> Prot -> 𝑃 PrinVal -> ValMPC -> IM ValP
mpcFrValP :: STACK => ValP -> IM ValMPC
mpcFrValPBaseVals :: STACK => ValP -> (BaseValMPC -> IM ()) -> IM ValMPC
mpcFrValPFWith :: STACK => (BaseValMPC -> IM ()) -> (𝔹 -> Prot -> 𝑃 PrinVal -> ValMPC -> IM ()) -> ValP -> IM ValMPC
mpcFrValFWith :: STACK => (BaseValMPC -> IM ()) -> (𝔹 -> Prot -> 𝑃 PrinVal -> ValMPC -> IM ()) -> Val -> IM ValMPC
eachBaseValWith :: (ℕ -> BaseValMPC -> IM ()) -> ValMPC -> IM ()
eachBaseVal :: ValMPC -> (ℕ -> BaseValMPC -> IM ()) -> IM ()
valFrMPC :: STACK => ValMPC -> IM ValP
valFrMPCF :: STACK => ValMPC -> (ℕ -> BaseValMPC -> IM ()) -> IM ValP
valFrMPCFWith :: STACK => (ℕ -> BaseValMPC -> IM ()) -> ValMPC -> IM ValP
valFrBaseMPC :: STACK => BaseValMPC -> IM ValP
revealValP :: STACK => 𝔹 -> 𝑃 PrinVal -> ValP -> IM ValP
revealVal :: STACK => 𝔹 -> 𝑃 PrinVal -> Val -> IM ValP

module PSL.Interpreter.PrinExp
interpPrinVar :: STACK => 𝕏 -> IM PrinExpVal
interpPrinExp :: STACK => PrinExp -> IM PrinExpVal
interpPrinExpSingle :: STACK => PrinExp -> IM PrinVal
prinExpVals :: STACK => PrinExpVal -> IM (𝑃 PrinVal)
prinExpValss :: (STACK, ToIter PrinExpVal t) => t -> IM (𝑃 PrinVal)

module PSL.TypeChecker
type CTyEnv = TVar ⇰ Kind
type CTmDec = Var ⇰ Type
type CTmEnv = Var ⇰ Type
type CTLTmEnv = Var ⇰ Exp ∧ Type
type CTLDefns = Var ⇰ Exp
data CTLState
CTLState :: (PrinExp ⇰ PrinKind) -> CTyEnv -> CTyEnv -> CTmDec -> CTLTmEnv -> CTLDefns -> CTLState
[ctlStatePrins] :: CTLState -> PrinExp ⇰ PrinKind
[ctlStateTyDec] :: CTLState -> CTyEnv
[ctlStateTyEnv] :: CTLState -> CTyEnv
[ctlStateTmDec] :: CTLState -> CTmDec
[ctlStateTmEnv] :: CTLState -> CTLTmEnv
[ctlStateDefns] :: CTLState -> CTLDefns
ctlStateDefnsL :: (⟢) CTLState CTLDefns
ctlStateTmEnvL :: (⟢) CTLState CTLTmEnv
ctlStateTmDecL :: (⟢) CTLState CTmDec
ctlStateTyEnvL :: (⟢) CTLState CTyEnv
ctlStateTyDecL :: (⟢) CTLState CTyEnv
ctlStatePrinsL :: (⟢) CTLState ((⇰) PrinExp PrinKind)
σtl₀ :: CTLState
data CCxt
CCxt :: 𝑂 FullContext -> (PrinExp ⇰ PrinKind) -> CTyEnv -> CTyEnv -> CTmDec -> CTmEnv -> Mode -> CCxt
[cCxtSource] :: CCxt -> 𝑂 FullContext
[cCxtPrins] :: CCxt -> PrinExp ⇰ PrinKind
[cCxtTyDec] :: CCxt -> CTyEnv
[cCxtTyEnv] :: CCxt -> CTyEnv
[cCxtTmDec] :: CCxt -> CTmDec
[cCxtTmEnv] :: CCxt -> CTmEnv
[cCxtMode] :: CCxt -> Mode
cCxtModeL :: (⟢) CCxt Mode
cCxtTmEnvL :: (⟢) CCxt CTmEnv
cCxtTmDecL :: (⟢) CCxt CTmDec
cCxtTyEnvL :: (⟢) CCxt CTyEnv
cCxtTyDecL :: (⟢) CCxt CTyEnv
cCxtPrinsL :: (⟢) CCxt ((⇰) PrinExp PrinKind)
cCxtSourceL :: (⟢) CCxt (𝑂 FullContext)
ξ₀ :: CCxt
data COut
COut :: Effect -> COut
[cOutEff] :: COut -> Effect
cOutEffL :: (⟢) COut Effect
data CErrorClass
SyntaxCError :: CErrorClass
TypeCError :: CErrorClass
NotImplementedCError :: CErrorClass
InternalCError :: CErrorClass
data CError
CError :: 𝑂 FullContext -> CallStack -> CErrorClass -> Doc -> CError
[cErrorSource] :: CError -> 𝑂 FullContext
[cErrorCallStack] :: CError -> CallStack
[cErrorClass] :: CError -> CErrorClass
[cErrorMsg] :: CError -> Doc
throwCErrorCxt :: (Monad m, MonadReader CCxt m, MonadError CError m, STACK) => CErrorClass -> 𝕊 -> 𝐿 (𝕊 ∧ Doc) -> m a
throwCError :: (Monad m, MonadError CError m, STACK) => 𝑂 FullContext -> CErrorClass -> 𝕊 -> 𝐿 (𝕊 ∧ Doc) -> m a
newtype CTLM a
CTLM :: RWST () () CTLState (ErrorT CError ID) a -> CTLM a
[unCTLM] :: CTLM a -> RWST () () CTLState (ErrorT CError ID) a
mkCTLM :: (CTLState -> CError ∨ (CTLState ∧ a)) -> CTLM a
runCTLM :: CTLState -> CTLM a -> CError ∨ (CTLState ∧ a)
evalCTLM :: CTLState -> CTLM a -> CError ∨ a
evalCTLMIO :: CTLState -> CTLM a -> IO a
instance UVMHS.Lib.Pretty.Core.Pretty (UVMHS.Core.Monads.RWST () () PSL.TypeChecker.CTLState (UVMHS.Core.Monads.ErrorT PSL.TypeChecker.CError UVMHS.Core.Monads.ID) a) => UVMHS.Lib.Pretty.Core.Pretty (PSL.TypeChecker.CTLM a)
instance UVMHS.Core.Effects.MonadError PSL.TypeChecker.CError PSL.TypeChecker.CTLM
instance UVMHS.Core.Effects.MonadState PSL.TypeChecker.CTLState PSL.TypeChecker.CTLM
instance UVMHS.Core.Effects.MonadWriter () PSL.TypeChecker.CTLM
instance UVMHS.Core.Effects.MonadReader () PSL.TypeChecker.CTLM
instance UVMHS.Core.Classes.Monad.Monad PSL.TypeChecker.CTLM
instance UVMHS.Core.Classes.Monad.Bind PSL.TypeChecker.CTLM
instance UVMHS.Core.Classes.Monad.Return PSL.TypeChecker.CTLM
instance UVMHS.Core.Classes.Functor.Functor PSL.TypeChecker.CTLM
instance UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.CErrorClass
instance GHC.Show.Show PSL.TypeChecker.CErrorClass
instance GHC.Classes.Ord PSL.TypeChecker.CErrorClass
instance GHC.Classes.Eq PSL.TypeChecker.CErrorClass
instance UVMHS.Lib.Pretty.Core.Pretty PSL.Syntax.Effect => UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.COut
instance GHC.Show.Show PSL.TypeChecker.COut
instance GHC.Classes.Ord PSL.TypeChecker.COut
instance GHC.Classes.Eq PSL.TypeChecker.COut
instance (UVMHS.Lib.Pretty.Core.Pretty (PSL.Syntax.PrinExp UVMHS.Core.Init.⇰ PSL.Syntax.PrinKind), UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.CTyEnv, UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.CTmDec, UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.CTLTmEnv, UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.CTLDefns) => UVMHS.Lib.Pretty.Core.Pretty PSL.TypeChecker.CTLState
instance GHC.Show.Show PSL.TypeChecker.CTLState
instance GHC.Classes.Ord PSL.TypeChecker.CTLState
instance GHC.Classes.Eq PSL.TypeChecker.CTLState

module PSL.Config
psl_VERSION :: 𝕊
datapath :: 𝕊 -> IO 𝕊

module PSL.Interpreter.ReadType
primRead :: Read a => 𝕊 -> 𝑂 (𝕊 ∧ a)
prinDataPath :: PrinVal -> IM 𝕊
parseInputType :: STACK => PrinVal -> Type -> 𝕊 -> IM (𝕊 ∧ Val)
readType :: STACK => PrinVal -> Type -> 𝕊 -> IM Val
serializeVal :: Val -> IM (𝐼 𝕊)
writeVal :: STACK => PrinVal -> Val -> 𝕊 -> IM ()

module PSL.Interpreter
interpVar :: STACK => Var -> IM ValP
bindVar :: STACK => Var -> ValP -> IM a -> IM a
bindPat :: STACK => Pat -> ValP -> IM a -> IM a
bindPatO :: STACK => Pat -> ValP -> FailT IM (IM a -> IM a)
data MatchState
NoMatch :: MatchState
LeftMatch :: MatchState
RightMatch :: MatchState
bindPatMPC :: STACK => ShareInfo -> Pat -> ValMPC -> 𝑂 (IM (ShareInfo ∧ ValMPC) -> IM (ShareInfo ∧ ValMPC))
interpCase :: STACK => ValP -> 𝐿 (Pat ∧ Exp) -> IM ValP
interpCaseO :: STACK => ValP -> 𝐿 (Pat ∧ Exp) -> FailT IM ValP
interpApp :: STACK => ValP -> ValP -> IM ValP
wrapInterp :: STACK => (ExpR -> IM ValP) -> Exp -> IM ValP
reportPrimop :: STACK => 𝕊 -> 𝕊 -> 𝕊 -> ℕ -> ShareInfo -> IM ()
interpReportPrim :: Op -> ℕ -> ShareInfo -> 𝐿 BaseValMPC -> IM (ℕ ∧ BaseValMPC)
defaultBaseVal :: STACK => BaseValMPC -> BaseValMPC
sumMPCVal :: STACK => ShareInfo -> ValMPC -> ValMPC -> IM ValMPC
muxMPCVal :: STACK => ℕ -> ShareInfo -> 𝔹 -> ValMPC -> ValMPC -> IM ValMPC
interpExp :: STACK => Exp -> IM ValP
interpTL :: TL -> ITLM ()
interpTLs :: 𝐿 TL -> ITLM ()
data Options
Options :: 𝔹 -> 𝔹 -> 𝔹 -> 𝔹 -> 𝑂 ℕ -> 𝕊 -> 𝕊 -> Options
[optVersion] :: Options -> 𝔹
[optHelp] :: Options -> 𝔹
[optDoResources] :: Options -> 𝔹
[optJustPrint] :: Options -> 𝔹
[optRandomSeed] :: Options -> 𝑂 ℕ
[optTestsPath] :: Options -> 𝕊
[optLibPath] :: Options -> 𝕊
optLibPathL :: (⟢) Options 𝕊
optTestsPathL :: (⟢) Options 𝕊
optRandomSeedL :: (⟢) Options (𝑂 ℕ)
optJustPrintL :: (⟢) Options 𝔹
optDoResourcesL :: (⟢) Options 𝔹
optHelpL :: (⟢) Options 𝔹
optVersionL :: (⟢) Options 𝔹
options₀ :: IO Options
usageInfoTop :: [OptDescr (Options -> Options)]
usageInfoRun :: [OptDescr (Options -> Options)]
usageInfoExample :: [OptDescr (Options -> Options)]
usageInfoTest :: [OptDescr (Options -> Options)]
initializeIO :: Options -> IO ()
initializeEnv :: Options -> IParams
interpretFile :: IParams -> ITLState -> 𝕊 -> 𝕊 -> IO (ITLState ∧ IOut)
interpretFileMain :: IParams -> ITLState -> 𝕊 -> 𝕊 -> IO (ValP ∧ 𝑂 ValP)
printFileMain :: 𝕊 -> IO ()
parseOptions :: IO (Options ∧ [𝕊])
pslMainRun :: IO ()
pslMainExample :: IO ()
pslMainTest :: IO ()
pslMainInfo :: IO ()
interpreterMain :: IO ()
instance GHC.Show.Show PSL.Interpreter.Options
instance GHC.Classes.Ord PSL.Interpreter.Options
instance GHC.Classes.Eq PSL.Interpreter.Options

module PSL
mainDefaultArgs :: 𝐿 𝕊
main :: IO ()
mainDefault :: IO ()
