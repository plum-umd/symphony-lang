---
--- Function library
---
def const x = fun y -> x


def solo-f : ∀ A:☆. (P:ℙs) → ((p:ℙ | {p}⊆P) →{p} A) →{P} A{isec:P}
def solo-f P f = case P
  { {} → ⟪⟫
  ; {p}∪P′ → ⟪ p | par {p} f p ⟫ ⧺ solo-f P′ f
  }


def fold-f : ∀ A:☆,B:☆,P:ℙs. B → ((p:ℙ | {p}⊆P) → A → B →{P} B) → A{isec:P} →{P} B
def fold-f i f xs = case xs
  { ⟪⟫ → i
  ; ⟪p|x⟫⧺xs′ → f p x (fold-f i f xs′)
  }


def fst : (a * b) -> a
def fst x = case x { (a, _) -> a }


def snd : (a * b) -> a
def snd x = case x { (_, b) -> b }


def at : a -> nat -> list a -> a
def at default ix xs = case xs
  { [] -> default
  ; (x::xs') -> if ix == 0
                then x
                else at default (ix - 1) xs'
  }


def head : a -> list a -> a
def head default = at default 0


-- Safe version of tail: If the list is empty, the tail of the list is the
-- empty list.
def tail : list int -> list int
def tail xs = case xs
  { [] -> []
  ; _::xs' -> xs'
  }


def foldr : (a -> b -> b) -> b -> list a -> b
def foldr f acc xs = case xs
  { [] -> acc
  ; x::xs' -> f x (foldr f acc xs')
  }


-- List map.
def map : (a -> b) -> list a -> list b
def map f xs = foldr (fun x ys -> f x :: ys) [] xs


def filter : (a -> bool) -> list a -> list a
def filter p xs =
  case xs
  { [] -> []
  ; (x::xs') -> if p x
                then x :: filter p xs'
                else filter p xs'
  }


-- Compute the length of a list.
def length : list int -> int
def length = foldr (fun _ n -> n+1) 0


-- Oblivious friendly insert to list.
def insert : (a -> a -> (a * a)) -> a -> list a -> list a
def insert minmax x xs = case xs
  { [] -> [x]
  ; (x'::xs') ->
      let lo, hi = minmax x x'
      in lo :: insert minmax hi xs'
  }


-- Oblivious friendly sort. Always O(n^2)
def sort : (a -> a -> (a * a)) -> list a -> list a
def sort minmax = foldr (insert minmax) []


def median : (a -> a -> (a * a)) -> a -> list a -> a
def median minmax default xs =
  at default (length xs / 2) (sort minmax xs)


def sum : list float -> float
def sum = foldr (fun x y -> x + y) 0.0


def mean : list float -> float
def mean xs = sum xs / to_flt (length xs)


def stddev : list float -> float
def stddev xs =
  let m = mean xs
  let square = fun x -> x * x
  let diffs = map (fun x -> square (x - m)) xs
  in sqrt (mean diffs)


def pair-swap swap b xs ys =
  let x0, x1 = xs
  let y0, y1 = ys
  in (swap b x0 y0, swap b x1 y1)


def int-swap b x y = b ? x >< y
def bool-swap b x y = b ? x >< y
def flt-swap b x y = b ? x >< y


-- def nat-minmax : nat -> nat -> (nat * nat)
def nat-minmax x y =
  pair-swap nat-swap (x < y) (x, y) (y, x)

-- def int-minmax : int -> int -> (int * int)
def int-minmax x y =
  pair-swap int-swap (x < y) (x, y) (y, x)

-- def flt-minmax : float -> float -> (float * float)
def flt-minmax x y =
  pair-swap flt-swap (x < y) (x, y) (y, x)


def split : nat -> list a -> (list a * list a)
def split n xs =
  if n == 0
  then [], xs
  else
    case xs
    { [] -> []
    ; (x::xs') ->
        let take, drop = split (n - 1) xs'
        in x::take, drop
    }


def take : nat -> list a -> list a
def take n xs = fst (split n xs)

def drop : nat -> list a -> list a
def drop n xs = snd (split n xs)


def append : list a -> list a -> list a
def append xs ys = foldr (fun x zs -> x :: zs) ys xs


def concat : list (list a) -> list a
def concat = foldr (fun xs xss -> append xs xss) []

def zip xs ys = case (xs,ys)
  { ([],_) → []
  ; (_,[]) → []
  ; (x∷xs',y∷ys') → (x,y)∷(zip xs' ys')
  }

def fst p = case p
  { (f,_) → f
  }

def snd p = case p
  { (_,s) → s
  }


def rangen-help : nat -> nat -> list nat
def rangen-help n goal =
  if n == goal
  then []
  else n :: rangen-help (n+1) goal

def rangen : nat -> list nat
def rangen n = rangen-help 0 n


def reverse-help : list a -> list a -> list a
def reverse-help xs acc =
  case xs
  { [] -> acc
  ; (x::xs') -> reverse-help xs' (x::acc)
  }


def reverse : list a -> list a
def reverse xs = reverse-help xs []


-- Convert a known list into a list of known objects.
-- The list will contain the first `n` elements of the known list.
-- If `n` exceeds the length of the list, the list will be padded with default.
def sequenceKnownnessN :
  forall knowers:prin.
  int -> int -> (list int){ssec:knowers} -> list (int{ssec:knowers})
def sequenceKnownnessN knowers n default xs =
  let shareHead : (list int){ssec:knowers} -> int{ssec:knowers}
  let shareHead = fun xs ->
    par {knowers} case xs
                  { [] -> default
                  ; x::_ -> x
                  }

  if n == 0
  then []
  else
    shareHead xs ::
      sequenceKnownnessN knowers (n - 1) default (par {knowers} (tail xs))


-- Convert a known list into a list of known objects.
-- WARNING: This shares the length of the list in cleartext.
def sequenceKnownness :
  forall knowers:prin.
  (list int){ssec:knowers} -> list (int{ssec:knowers})
def sequenceKnownness knowers xs =
  let n = par {knowers} length xs
  let n' = send {knowers -> this} n
  in sequenceKnownnessN {knowers} n' 0 xs

def obliv-head : ∀ P:☆. ℤ → (list ℤ){isec:P} → ℤ{isec:P}
def obliv-head P i xs = solo {P} as α in case xs@α
  { [] → i
  ; x∷_ → x
  }

def obliv-tail : ∀ P:☆. (list ℤ){isec:P} → (list ℤ){isec:P}
def obliv-tail P xs = solo {P} as α in case xs@α
  { [] → []
  ; _∷xs′ → xs′
  }

def preprocess-lists : (P:ℙ) → ℕ → ℤ → (list ℤ){isec:P} → list ℤ{isec:P}
def preprocess-lists P n i xs =
  if n <= 0
  then []
  else
    let x′ : ℤ{isec:P}
    let x′ = obliv-head P i xs
    let xs′ : list ℤ{isec:P}
    let xs′ = preprocess-lists P (n - 1) i (obliv-tail P xs)
    in
    x′ ∷ xs′

-- Merge sort, copy and pasted and modified slightly, used by atq
--def list-cond :
--    𝔹{yao:C}
--  → list ℤ{yao:C}
--  → list ℤ{yao:C}
--  → list ℤ{yao:C}
def list-cond b xs ys = case xs,ys
  { [],_ → ys
  ; _,[] → xs
  ; x∷xs′,y∷ys′ → b ? x ◇ y ∷ list-cond b xs′ ys′
  }

--def split : list ℤ{isec:A,B} → list ℤ{isec:A,B} × list ℤ{isec:A,B}
def split xs = case xs
  { [] → [] , []
  ; [x] → [] , [x]
  ; x₁∷x₂∷xs →
      let xs₁,xs₂ = split xs
      in x₁∷xs₁,x₂∷xs₂
  }

--def merge :
--    list ℤ{yao:C}
--  → list ℤ{yao:C}
--  → list ℤ{yao:C}
def merge xs ys = case xs,ys
  { [],_ → ys
  ; _,[] → xs
  ; x∷xs′,y∷ys′ →
      list-cond (x ≤ y)
                (x ∷ merge xs′ ys)
                (y ∷ merge xs ys′)
  }

--input is shares instead of isec
--def msort : list ℤ{isec:A,B} → list ℤ{yao:C}
def msort xs = case xs
  { [] → []
  ; [x] → [x]
  ; x₁∷x₂∷xs′ →
      let xs₁,xs₂ = split xs
      let ys₁ = msort xs₁
      let ys₂ = msort xs₂
      in merge ys₁ ys₂
  }
-- Merge sort end













---
--- VECTOR LIBRARY
---


-- given a swap function for type a, build swap for bool * a
-- def tag-swap : (bool{P} -> a -> a -> a) 
--             -> (bool{P} -> bool{P} * a -> bool{P} * a -> bool{P} * a)
def tag-swap swap =
  fun b x y ->
    let tx, x' = x
    let ty, y' = y
    in (b ? tx >< ty), (swap b x' y')


-- def init-content : nat -> a -> array{P} a
def content-init default n =
  if n == 0
  then []
  else
    (false, default) :: content-init default (n - 1)


-- def vec-init : a -> (bool{P} -> a -> a -> a) -> nat -> vec{P} a
def vec-init default swap n =
  default, swap, content-init default n


def content-over swap cond n f xs =
  case xs
  { [] -> []
  ; cell::xs' ->
    let (tag, x) = cell
    in
      swap (cond && (n == 0) && tag) (tag, f x) cell
        :: content-over swap cond (n - 1) f xs'
  }


def vec-cond-over cond n f vec =
  let default, swap, xs = vec
  in default, swap, (content-over (tag-swap swap) cond n f xs)


-- def vec : nat{P} -> a -> vec{P} a -> vec{P} a
def vec-cond-write cond n y vec =
  vec-cond-over cond n (fun _ -> y) vec


-- apply function f to the specified index
def vec-over = vec-cond-over true

def vec-write = vec-cond-write true

def content-push swap flag cond y xs =
  case xs
  { [] -> []
  ; cell::xs' ->
    let (tag, x) = cell
    in
      swap (cond && not tag && flag) (true, y) cell
        :: content-push swap tag cond y xs'
  }

def vec-cond-push cond x vec =
  let default, swap, xs = vec
  in default, swap, (content-push (tag-swap swap) true cond x xs)

def vec-push = vec-cond-push true


def resize-content n xs =
  case xs
  { [] -> []
  ; cell::xs ->
    let (tag, x) = cell
    in
      (n > 0, x) :: resize-content (n - 1) xs
  }


-- def resize : nat{P} -> vec{P} a -> vec{P} a
def vec-resize n vec =
  let default, swap, xs = vec
  in default, swap, (resize-content n xs)


def content-size xs =
  case xs
  { [] -> 0
  ; cell::xs ->
    let (tag, x) = cell
    let diff = tag ? 1 >< 0
    in
      diff + content-size xs
  }


def vec-length vec =
  let default, swap, xs = vec
  in content-size xs

def vec-capacity vec =
  let _, _, xs = vec
  in length xs


def content-read default swap n xs =
  case xs
  { [] -> false, default
  ; cell::xs' ->
    let tl = content-read default swap (n - 1) xs'
    in swap (n == 0) cell tl
  }


def vec-read n vec =
  let default, swap, xs = vec
  in content-read default (tag-swap swap) n xs


def content-swap swap b xs ys =
  case xs, ys
  { [], [] -> []
  ; x::xs, y::ys -> swap b x y :: content-swap swap b xs ys
  }


def vec-swap b vecx vecy =
  let default, swap, xs = vecx
  let _, _, ys = vecy
  in default, swap, content-swap (tag-swap swap) b xs ys

-- def vec-content : vec{P} a -> list (bool{P} * a{P})
def vec-content vec =
  let _, _, xs = vec
  in xs

def vec-append xs ys =
  foldr (fun c acc ->
    let r, x = c
    in vec-cond-push r x acc) xs (reverse (vec-content ys))


def int-vec-init = vec-init 0 (fun b x y -> b ? x >< y)

def share-as-vec-content knowers shareFlag shareContent default n xs =
  if n == 0
  then []
  else
    let flag = par {knowers} case xs
                   { [] -> false
                   ; x::_ -> true
                   }
    let head = par {knowers} case xs
                    { [] -> default
                    ; x::_ -> x
                    }
    let sflag = shareFlag flag
    let shead = shareContent head
    in (sflag, shead) :: share-as-vec-content
      knowers shareFlag shareContent default (n - 1) (par {knowers} tail xs)



-- def share-as-vec : P
--                 -> (bool -> bool{P})
--                 -> (a -> a{P})
--                 -> a
--                 -> (bool{P} -> a{P} -> a{P} -> a{P})
--                 -> list a -> nat -> vec{P} a
def share-as-vec knowers shareFlag shareContent default swap n xs =
  default, swap,
      share-as-vec-content knowers shareFlag shareContent default n xs



-- def vec-reveal : (a{P} -> a) -> vec{P} a -> list a
def vec-reveal revealContent vec =
  let _, _, xs = vec
  let revealed = map (fun cell ->
    let t, x = cell
    in reveal {this} t, revealContent x) xs
  let filtered = filter (fun cell ->
    let t, x = cell in t) revealed
  in map snd filtered


def content-fold swap-val f acc xs =
  case xs
  { [] -> acc
  ; cell::xs' ->
    let t, x = cell
    let acc' = content-fold swap-val f acc xs'
    in swap-val t (f x acc') acc'
  }

def vec-fold swap-val f acc vec =
  let _, _, xs = vec
  in content-fold swap-val f acc xs

def vec-int-sum =
  vec-fold int-swap (fun x y -> x + y) 0

def vec-flt-sum =
  vec-fold flt-swap (fun x y -> x + y) 0.0

def vec-int-product=
  vec-fold int-swap (fun x y -> x * y) 1

def content-map f xs =
  case xs
  { [] -> []
  ; cell::xs' ->
    let t, x = cell
    in (t, f x) :: content-map f xs'
  }

def vec-map val-swap f vec =
  let default, _, xs = vec
  in (f default, val-swap, content-map f xs)


def tag-minmax swap minmax x y =
  let tx, xx = x
  let ty, yy = y

  let r0, r1 =
    pair-swap swap
      (tx && ty)
      (minmax xx yy)
      (pair-swap swap tx (xx, yy) (yy, xx))
  in
  (tx || ty, r0), (tx && ty, r1)


-- Oblivious friendly sort. Always O(n^2)
-- def vec-sort : (a -> a -> (a * a)) -> vec a -> vec a
def vec-sort minmax vec =
  let default, swap, xs = vec
  in (default, swap, sort (tag-minmax swap minmax) xs)

-- def vec-median : (a -> a -> (a * a)) -> a -> vec a -> a
def vec-median minmax xs =
  vec-read (vec-length xs / 2) (vec-sort minmax xs)


---
--- ASSOCIATIVE MAP LIBRARY
---


def map-init k-eql k-default v-default k-swap v-swap n =
  let swap = fun b cell0 cell1 ->
    let k0, v0 = cell0
    let k1, v1 = cell1
    in (k-swap b k0 k1, v-swap b v0 v1)
  let default = (k-default, v-default)
  in k-eql, v-default, v-swap, vec-init default swap n

def map-read-help k-eql v-default v-swap k xs =
  case xs
  { [] -> 0, false, v-default
  ; x::xs' ->
    let (b, (k', v)) = x
    let (i', b', v') = map-read-help k-eql v-default v-swap k xs'
    let is-here = b && k-eql k k'
    in int-swap is-here 0 (i' + 1), is-here || b', v-swap is-here v v'
  }

-- returns a tuple (i, b, v) where i is the vector index of the value,
-- b is whether or not the read was successful
-- v is the read value.
def map-read-index k m =
  let k-eql, v-default, v-swap, vec = m
  in map-read-help k-eql v-default v-swap k (vec-content vec)

def map-read k m =
  let (_, b, v) = map-read-index k m
  in (b, v)

def map-cond-insert-with f cond k v m =
  let k-eql, v-default, v-swap, vec = m
  let (i, b, _) = map-read-index k m
  let f' = fun cell ->
    let (k', v') = cell
    in (k, f v v')

  let vec = vec-cond-over (cond && b) i f' vec
  in k-eql, v-default, v-swap, vec-cond-push (cond && not b) (k, v) vec

def map-insert-with f = map-cond-insert-with f true

def map-insert = map-insert-with (fun x _ -> x)

def loop-f f n =
  if n ≡ 0n
  then •
  else 
    do f •
    in loop-f f (n - 1n)

---
--- NAT LIBRARY
---

-- elim_nat: elimination form for nats
def elim_nat m z s = 
  if m == 0n then z
  else s (elim_nat (m - 1n) z s)

---
--- SECURE RECURSION LIBRARY
---

-- bnd_rec f init fuel: simulates "nearly-recursive" function f for up
-- to fuel steps, then simulates init.
def bnd_rec f init fuel = elim_nat fuel init f

-- bound_int_fn (f : 't -> int) fuel: f, bounded to execute fuel
-- steps.
def int-eval-upto f = bnd_rec f (const 0) 
def nat-eval-upto f = bnd_rec f (const 0n) 
def flt-eval-upto f = bnd_rec f (const 0.0) 

